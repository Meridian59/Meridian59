// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.
/*
 * game.h: Header file for game.c and gameuser.c
 */

#ifndef _GAME_H
#define _GAME_H

#define ROOM_OVERRIDE_DEPTH1  0x00000001
#define ROOM_OVERRIDE_DEPTH2  0x00000002
#define ROOM_OVERRIDE_DEPTH3  0x00000004
#define ROOM_OVERRIDE_MASK    0x00000007

// Convert from client drawing angle to server angle
#define ANGLE_CTOS(x) ((x) * MAX_ANGLE / NUMDEGREES)

// Convert from server drawing angle to client angle
#define ANGLE_STOC(x) ((x) * NUMDEGREES / MAX_ANGLE)

typedef struct {
   char         hotspot;     // Screen hotspot on which to put player overlay
   object_node *obj;         // Player overlay and its overlays
} PlayerOverlay;

typedef struct 
{
   ID    id;                 /* Player's id # */
   ID    name_res;           /* Player's name resource */
   ID    icon_res;           /* Resource of player's icon */
   ID    room_id;            /* ID # of current room */
   ID    room_res;           /* Resource of current room's grid file */
   ID    room_name_res;      /* Resource of current room's name */
   int   room_security;      /* Security # unqiue to each roo file */
   int   x, y;               /* Player's position in room, in FINENESS units */
   int   angle;              /* Angle player is facing */
   BYTE  light;              /* Strength of light source at player */
   int   height;             /* Player's height above floor in FINENESS units */
   int   width;              /* Width of player's body, in FINENESS units */
   
   ID	 viewID;
   int	 viewFlags;
   int	 viewHeight;
   BYTE	 viewLight;
   
   list_type inventory;      /* List of object_node items */

   PlayerOverlay poverlays[NUM_PLAYER_OVERLAYS];  /* Player overlays to draw in graphics window */
} player_info;


typedef struct {
   object_node obj;
   DWORD       cost;
} buy_object;    /* Object to display in list of things to buy */

void InitializeGame(void);
M59EXPORT void ResetUserData(void);
void CloseGame(void);

ID GetPlayerId(void);
M59EXPORT room_contents_node *GetRoomObjectById(ID id);

/* stuff generated by received message from server */
void SetPlayerInfo(player_info *new_player, BYTE ambient_light, ID bkgnd_id);
void SetRoomInfo(ID room_id, list_type new_room_contents);
void SetObjectInfo(ID object_id, list_type contents);
void SetPlayerRemoteView(ID objID, int flags, int height, BYTE light);


Bool IsInUse(ID obj_id);

void ChangePlayerPos(WORD new_row, WORD new_col);
void TurnObject(ID object_id, WORD angle);
void CreateObject(room_contents_node *r);
void RemoveObject(ID obj_id);
void ChangeObject(object_node *new_obj, BYTE translation, BYTE effect, Animate *a, list_type overlays);
void SetObjectContents(ID object_id, list_type contents);

void SetInventory(list_type inventory);
void AddToInventory(object_node *obj);
void ResetInventory(void);
void RemoveFromInventory(ID obj);

void SetAmbientLight(BYTE l);
void SetPlayerLight(BYTE l);
void SetBackground(ID bkgnd);

void GameWait(void);
void GameUnwait(void);
void GameQuit(void);
M59EXPORT void GameMessage(char *message);
M59EXPORT void _cdecl GameMessagePrintf(char *fmt, ...);
void GameDisplayResync(void);
void GamePlaySound(ID sound_rsc, ID source_obj, BYTE flags, WORD y, WORD x, WORD radius, WORD max_vol);

int  ComputeObjectDistance(room_contents_node *r1, room_contents_node *r2);

void SetGameDataValid(BOOL flag);
BOOL GetGameDataValid(void);
void SetFrameDrawn(BOOL flag);
BOOL GetFrameDrawn(void);
void SetRoomFlags(DWORD flags);
DWORD GetRoomFlags(void);
void SetOverrideRoomDepth(int level, DWORD depth);
DWORD GetOverrideRoomDepth(int level);

M59EXPORT player_info *GetPlayerInfo(void);

// currently selected stat button (inventory,stats,spells,skils...)
M59EXPORT void SetCurrentGroup(BYTE newGroup);
M59EXPORT BYTE GetCurrentGroup();

#endif _GAME_H
