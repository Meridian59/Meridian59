% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DarkAngel is Monster

constants:

   include blakston.khd

   ANIM_SPEED = 75
   WING_ANIM_SPEED = 200

   FRAME_STAND = 1
   FRAME_ATTACK_START = 2
   FRAME_ATTACK_END = 6

   FRAME_WING_START = 1
   FRAME_WING_END = 4

   HS_WINGS = 1

   % Base percent chance to resist spells.
   MAGIC_RESIST = 50
   % Range, squared, of spell attacks.
   SPELL_RANGE_SQUARED = 100
   % Chance (1 in this many) to cast an offensive spell per attack.
   SPELL_CHANCE = 3
   
resources:

   DarkAngel_koc_name_rsc = "ozangelis"
   DarkAngel_name_rsc = "dark angel"
   DarkAngel_icon_rsc = angel.bgf
   DarkAngel_desc_rsc = \
      "Travelling under cover of darkness, the Dark Angels seek the souls of "
      "people to consume.  They are pure evil, lashing out at any that wander "
      "near them.  Surely these beasts are the handservants of Qor!"

   DarkAngel_wings_rsc = anglwing.bgf

   DarkAngel_dead_icon_rsc = angelX.bgf
   DarkAngel_dead_name_rsc = "dead dark angel"

   DarkAngel_sound_attack = dangatk.wav
   DarkAngel_sound_death = dangdth.wav
   DarkAngel_sound_aware = dangawr.wav

   DarkAngel_fireball = fireball.bgf

classvars:

   viIndefinite = ARTICLE_A
   vrName = DarkAngel_name_rsc
   vrIcon = DarkAngel_icon_rsc
   vrDesc = DarkAngel_desc_rsc
   vrDead_icon = DarkAngel_dead_icon_rsc
   vrDead_name = DarkAngel_dead_name_rsc

   viTreasure_type = TID_DARK_ANGEL

   viSpeed = SPEED_VERY_FAST
   viAttack_type = ATCK_WEAP_MAGIC
   viAttack_spell = ATCK_SPELL_FIRE
   viLevel = 200
   viDifficulty = 9
   viKarma = -100
   viDefault_behavior = AI_FIGHT_NEWBIESAFE | AI_FIGHT_AGGRESSIVE \
                        | AI_FIGHT_SWITCHALOT | AI_MOVE_REGROUP \
                        | AI_MOVE_OPTIMAL_RANGE

   vrSound_miss = DarkAngel_sound_attack
   vrSound_aware = DarkAngel_sound_aware
   vrSound_death = DarkAngel_sound_death

properties:

   piAnimation = ANIM_NONE
   piDrawfx = BOUNCE_YES
   plSummoned = $

messages:

   Constructed()
   {
      plResistances = [ [ 50, -ATCK_SPELL_COLD ],
                        [ 50, -ATCK_SPELL_FIRE ],
                        [ 50, -ATCK_SPELL_SHOCK ],
                        [ 75, ATCK_WEAP_NERUDITE ],
                        [ -5, ATCK_WEAP_MAGIC ]
                      ];
      propagate;
   }

   % Dark Angels have a range with their fireballs.
   GetAttackRange()
   {
      return 7;
   }

   MonsterAttack(what = $)
   {
      local oSpell;

      oSpell = Send(SYS,@FindSpellByNum,#num=SID_DARKNESS);
      if NOT Send(poOwner,@IsEnchanted,#what=oSpell)
         AND Send(oSpell,@CanPayMonsterCosts,#who=self,#lTargets=$,
                  #iSpellPower=SPELLPOWER_MAXIMUM)
         AND Send(poOwner,@ReqSpellCast,#who=self,#oSpell=oSpell,#litems=$)
      {
         Send(oSpell,@CastSpell,#who=self,#lTargets=$,
              #iSpellPower=SPELLPOWER_MAXIMUM);
      }
      
      Send(self,@MonsterCastSpell);
      Send(self,@DoFireball);
      
      return;
   }

   MonsterCastSpell()
   {
      local iDistance, oSpell, iRandom, lTargets;

      iDistance = Send(self,@SquaredDistanceTo,#what=poTarget);

      iRandom = Send(self,@AdjustedChanceBase,#base=SPELL_CHANCE);
      if Random(1,iRandom) = 1
         AND iDistance > Send(self,@GetAttackRange)
         AND iDistance <= SPELL_RANGE_SQUARED
         AND Send(poOwner,@LineOfSight,#obj1=self,#obj2=poTarget)
         AND Send(poOwner,@ReqSomethingAttack,#what=self,#victim=poTarget,
                  #use_weapon=self)
      {
         iRandom = random(1,100);
         if iRandom < 20
         {
            oSpell = SID_BLIND;
            lTargets = [poTarget];
         }
         else
         {
            if iRandom < 30
            {
               % Summoning an Evil Twin
               return Send(self,@SummonAngelReflection,#target=poTarget);
            }
            else
            {
               if iRandom < 40
               {
                  oSpell = SID_HOLD;
                  lTargets = [poTarget];
               }
               else
               {
                  if iRandom < 60
                  {
                     % Summoning a Reflection
                     return Send(self,@SummonAngelReflection,#target=self);
                  }
                  else
                  {
                     if iRandom < 70
                     {
                        oSpell = SID_DISCORDANCE;
                        lTargets = $;
                     }
                     else
                     {
                        if iRandom < 80
                        {
                           oSpell = SID_ENFEEBLE;
                           lTargets = [poTarget];
                        }
                        else
                        {
                           oSpell = SID_FORGET;
                           lTargets = [poTarget];
                        }
                     }
                  }
               }
            }
         }

         oSpell = Send(SYS,@FindSpellByNum,#num=oSpell);
         lTargets = Send(oSpell,@GetTargets,#who=self,#lTargets=lTargets);

         if Send(oSpell,@CanPayMonsterCosts,#who=self,#ltargets=lTargets,
                 #iSpellPower=SPELLPOWER_MAXIMUM)
            AND Send(poOwner,@ReqSpellCast,#who=self,#oSpell=oSpell,
                     #litems=lTargets)
         {
            Send(oSpell,@CastSpell,#who=self,#ltargets=lTargets,
                 #iSpellPower=SPELLPOWER_MAXIMUM);
         }

         return TRUE;
      }
      
      return FALSE;
    }

   DoFireball()
   {
      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      Send(poOwner,@SomethingShot,#who=self,#target=poTarget,#projectile=self,
           #flags=PROJ_FLAG_LIGHT_SOURCE);
      piAnimation = ANIM_NONE;
      
      return;
   }

   % This summons a reflection type monster.  If target is not self,
   %  then summons an evil twin. If self, summons a reflection instead.
   % Use this instead of the proper spells because of player-specific
   %  checks.
   SummonAngelReflection(target = $)
   {
      local oTwin, oRoom, iRow, iCol;

      oRoom = Send(target,@GetOwner);

      % Check the summon limit restrictions
      if Send(oRoom,@CountHoldingHowMany,#class=&monster) > 25
         OR Send(oRoom,@CountHoldingHowMany,#class=&EvilTwin) > 10
         OR Send(oRoom,@CountHoldingHowMany,#class=&Reflection) > 10
         OR Send(oRoom,@CountHoldingSummoned)
            > Send(Send(SYS, @GetSettings), @GetPlayerSummonedObjectLimit)
      {
         return FALSE;
      }

      if target = self
      {
         oTwin = Create(&Reflection,#iSpellpower=100,#oMaster=self);  
      }
      else
      {
         oTwin = Create(&EvilTwin,#iSpellpower=100,#oMaster=self,
                        #oTarget=target);
      }

      iRow = Send(target,@GetRow);
      iCol = Send(target,@GetCol);

      Send(oTwin,@SetOriginal,#who=target);
      
      if NOT Send(oRoom,@ReqNewHold,#what=oTwin,#new_row=iRow,#new_col=iCol)
      {
         Send(oTwin,@Delete);

         return FALSE;
      }

      Send(oRoom,@NewHold,#what=oTwin,#new_row=iRow,#new_col=iCol);
      Send(SYS,@AddReflection,#who=target,#oReflection=oTwin);
      plSummoned = cons(oTwin,plSummoned);
   
      return TRUE;
   }

   SummonDeleted(what=$)
   {
      plSummoned = DelListElem(plSummoned,what);

      return;
   }

   GetProjectileIcon()
   {
      return DarkAngel_fireball;
   }

   GetProjectileSpeed()
   {
      return 25;
   }
   
   SendProjectileAnimation()
   {
      % 40ms between animations
      AddPacket(1,ANIMATE_CYCLE, 4,40, 2,1, 2,2);   

      return;
   }

   GetProjectileLightFlags()
   {
      % General lighting information.
      return LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC;
   }

   GetProjectileLightIntensity()
   {
      % Medium light radius for projectile.  Out of 255 levels.
      return 125;
   }

   GetProjectileLightColor()
   {
      % Color is a bright orange.
      return LIGHT_BORANGE;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,FRAME_STAND);

      return;
   }
   
   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_NONE, 2,FRAME_STAND);

      return;
   }

   SendMoveOverlays()
   {
      Send(self,@SendOverlays);

      return;
   }

   SendOverlays()
   {
      AddPacket(1,1);
      AddPacket(4,DarkAngel_wings_rsc, 1,HS_WINGS);
      AddPacket(1,ANIMATE_CYCLE, 4,WING_ANIM_SPEED, 2,FRAME_WING_START,
                2,FRAME_WING_END);

      return;
   }

   SendAnimation(iAnimation = $)
   {
      local iAnim;

      if iAnimation = $
      {
         iAnim = piAnimation;
      }
      else
      {
         iAnim = iAnimation;
      }
      
      if iAnim = ANIM_NONE
      {
         AddPacket(1,ANIMATE_NONE,2,FRAME_STAND);

         return;
      }
      
      if iAnim = ANIM_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE, 4,ANIM_SPEED, 2,FRAME_ATTACK_START,
                   2,FRAME_ATTACK_END, 2,FRAME_STAND);

         return;
      }

      propagate;
   }

   Delete()
   {
      local oEachObj;

      for oEachObj in plSummoned
      {
         Send(oEachObj,@Delete,#bMonsterReport=FALSE);
      }

      plSummoned = $;

      propagate;
   }

   GetObjectFlags()
   {
      return MOVEON_NO | BOUNCE_YES | BATTLER_YES;
   }
   
   CanMorphTo()
   {
      % Dark Angel has overlays.
      return FALSE;
   }      

   CanBeSilenced()
   "Dark Angels cannot be silenced by the room enchantment."
   {
      return FALSE;
   }

   SpellResist(oSpell=$,who=$,iSpellpower=$)
   {
      local iResistChance;

      if IsClass(who,&DM)
      {
         return FALSE;
      }
 
      if Send(oSpell,@IsHarmful)
      {
         iResistChance = MAGIC_RESIST;
         if IsClass(oSpell,&Dazzle)
            OR IsClass(oSpell,&Blind)
            OR IsClass(oSpell,&Hold)
         {
            % Extra 60% chance to resist.  Brings 50% up to 80%
            iResistChance = (iResistChance * 160)/100;
         }
         
         if iSpellPower < 40
            OR Random(0,100) < iResistChance
         {
            return TRUE;
         }
      }

      return FALSE;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
