% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DragonFlyPet is Monster

constants:

   include blakston.khd

   ANIM_SPEED = 100
   WING_ANIM_SPEED = 100
   ANIM_HOVER = 2
   HOVER_DELAY = ANIM_SPEED * 5
   LAND_DELAY = HOVER_DELAY * 5
   % any attack or spasm animation?

   FRAME_STAND = 1
   FRAME_LAND = 1
   FRAME_HOVER_START = 2
   FRAME_HOVER_END = 3
   FRAME_FLY_START = 4
   FRAME_FLY_END = 5
   FRAME_ATTACK_START = 6
   FRAME_ATTACK_END = 9

   HS_WINGS = 1

resources:

   DragonFlyPet_koc_name_rsc = "vo'huzotz"
   DragonFlyPet_name_rsc = "pet dragonfly"
   DragonFlyPet_icon_rsc = dflypet.bgf
   DragonFlyPet_desc_rsc = \
      "These small lizards look exceptionally friendly.  Their gossamer wings allow "
      "them to jump into the air and take flight for brief periods of time.  When "
      "backed into a corner, dragonflies are known to have a nasty spitting attack."

   DragonFlyPet_wings_rsc = dflypetw.bgf

   DragonFlyPet_dead_icon_rsc = dflypetX.bgf
   DragonFlyPet_dead_name_rsc = "dead pet dragonfly"

   DragonFlyPet_sound_hit = df_atkm.wav
   DragonFlyPet_sound_miss = df_atkm.wav
   DragonFlyPet_sound_death = df_dth.wav
   DragonFlyPet_sound_aware = df_awr.wav

   DragonFlyPet_spit = loogy.bgf

classvars:

   viIndefinite = ARTICLE_A
   vrName = DragonFlyPet_name_rsc
   vrIcon = DragonFlyPet_icon_rsc
   vrDesc = DragonFlyPet_desc_rsc
   vrDead_icon = DragonFlyPet_dead_icon_rsc
   vrDead_name = DragonFlyPet_dead_name_rsc

   viTreasure_type = TID_NONE

   viSpeed = SPEED_AVERAGE
   viAttack_type = ATCK_WEAP_PIERCE
   viLevel = 120
   viDifficulty = 6
   viKarma = 40
   viDefault_behavior = AI_FIGHT_AGGRESSIVE | AI_FIGHT_NEWBIESAFE

   viWimpy = 5

   vrSound_hit = DragonFlyPet_sound_hit
   vrSound_miss = DragonFlyPet_sound_miss
   vrSound_aware = DragonFlyPet_sound_aware
   vrSound_death = DragonFlyPet_sound_death

properties:

   piAnimation = ANIM_NONE
   ptHover = $   
   ptLand = $   

   piDrawfx = BOUNCE_YES

   piColor = PT_GRAY_TO_DGREEN

messages:

   Constructed()
   {
      plResistances = [ [ 25, -ATCK_SPELL_COLD ],
                        [ 40, -ATCK_SPELL_SHOCK ],
                        [ -20, -ATCK_SPELL_FIRE ],
                        [ 40, ATCK_WEAP_THRUST ],
                        [ 25, ATCK_WEAP_NERUDITE ],
                        [ -10, ATCK_WEAP_MAGIC]
                      ];

      propagate;
   }

   MonsterAttack(what = $)
   {
      Send(self,@DoSpit);

      return;
   }

   DoSpit()
   {
      piAnimation = ANIM_ATTACK;
      piDrawFX = piDrawFX | BOUNCE_YES;
      Send(poOwner,@SomethingChanged,#what=self);
      send(poOwner,@SomethingShot,#who=self,#target=poTarget,
           #projectile = self);
      piAnimation = ANIM_HOVER;
      if ptHover = $
      {
         ptHover = CreateTimer(self,@HoverTimer,HOVER_DELAY);
      }

      return;
   }

   GetProjectileSpeed()
   {
      return 8;
   }
   
   SendProjectileAnimation()
   {
      AddPacket(1, ANIMATE_CYCLE, 4, 40, 2, 1, 2, 5);   % 40ms between animations
      return;
   }

   GetProjectileIcon()
   {
      return DragonFlyPet_spit;
   }
      
   HoverTimer()
   {  
      ptHover = $;
      
      Send(poOwner,@SomethingChanged,#what=self);
      if ptLand <> $
      {
         Deletetimer(ptLand);
      }

      ptLand = CreateTimer(self,@LandTimer,LAND_DELAY);

      return;
   }

   LandTimer()
   {
      ptLand = $;

      if (poTarget = $) and (piAnimation = ANIM_HOVER)
      {
         piAnimation = ANIM_NONE;
         piDrawFX = (piDrawFX & (~BOUNCE_YES));
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_TRANSLATION,1,piColor);
      AddPacket(1,ANIMATE_NONE);
      AddPacket(2,FRAME_LAND);

      return;
   }

   SendLookOverlays()
   {
      AddPacket(1,0);

      return;
   }

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_TRANSLATION,1,piColor);
      AddPacket(1,ANIMATE_CYCLE,4,ANIM_SPEED,2,FRAME_FLY_START,2,FRAME_FLY_END);
      %if piState & STATE_MOVE { piAnimation = ANIM_NONE; }

      return;
   }

   SendMoveOverlays()
   {
      AddPacket(1,1);
      AddPacket(4,DragonFlyPet_wings_rsc,1,HS_WINGS);
      AddPacket(1,ANIMATE_EFFECT,1,DRAWFX_TRANSLUCENT_25-DRAWFX_TRANSLUCENT_25+1);
      AddPacket(1,ANIMATE_CYCLE,4,WING_ANIM_SPEED,2,(FRAME_FLY_START - 1),2,(FRAME_FLY_END - 1) );

      return;
   }

   SendOverlays()
   {
      if piAnimation = ANIM_HOVER
      {
         AddPacket(1,1);
         AddPacket(4,DragonFlyPet_wings_rsc,1,HS_WINGS);
         AddPacket(1,ANIMATE_EFFECT,1,DRAWFX_TRANSLUCENT_25-DRAWFX_TRANSLUCENT_25+1);
         AddPacket(1,ANIMATE_CYCLE,4,WING_ANIM_SPEED,2,(FRAME_HOVER_START-1),2,(FRAME_HOVER_END-1));

         return;
      }

      if piAnimation = ANIM_ATTACK
      {
         % Uses normal body speed for attack
         AddPacket(1,1);
         AddPacket(4,DragonFlyPet_wings_rsc,1,HS_WINGS);
         AddPacket(1,ANIMATE_EFFECT,1,DRAWFX_TRANSLUCENT_25-DRAWFX_TRANSLUCENT_25+1);
         AddPacket(1,ANIMATE_ONCE,4,ANIM_SPEED,2,(FRAME_ATTACK_START - 1),2,(FRAME_ATTACK_END - 1),2,(FRAME_HOVER_END - 1) );

         return;
      }

     propagate;
   }

   SendAnimation()
   {
      AddPacket(1,ANIMATE_TRANSLATION,1,piColor);

      if piAnimation = ANIM_HOVER
      {
         AddPacket(1,ANIMATE_CYCLE,4,ANIM_SPEED,2,FRAME_HOVER_START,2,FRAME_HOVER_END);
         return;
      }

      if piAnimation = ANIM_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,ANIM_SPEED,2,FRAME_ATTACK_START,2,FRAME_ATTACK_END,2,FRAME_HOVER_END);
         return;
      }

      % No body animation.     
      propagate;
   }

   Delete()
   {
      if ptHover <> $
      {
         deletetimer(ptHover);
         ptHover = $;
      }

      if ptLand <> $
      {
         deletetimer(ptLand);
         ptLand = $;
      }

      propagate;
   }

   GetObjectFlags()
   {
      if piAnimation = ANIM_NONE
      {
         return MOVEON_NO | BATTLER_YES;
      }

      return MOVEON_NO | BOUNCE_YES | BATTLER_YES;
   }
   
   CanMorphTo()
   {
      return FALSE;
   }      

   SetColor(iColor=PT_GRAY_TO_DGREEN)
   {
      piColor = iColor;
      if poOwner <> $
      {
         send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
