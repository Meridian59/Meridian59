% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DragonFlyQueen is Monster

constants:

   include blakston.khd

   ANIM_SPEED = 100
   WING_ANIM_SPEED = 100
   ANIM_HOVER = 2
   HOVER_DELAY = ANIM_SPEED * 5
   LAND_DELAY = HOVER_DELAY * 5
   % any attack or spasm animation?

   FRAME_STAND = 1
   FRAME_LAND = 1
   FRAME_HOVER_START = 2
   FRAME_HOVER_END = 3
   FRAME_FLY_START = 4
   FRAME_FLY_END = 5
   FRAME_ATTACK_START = 6
   FRAME_ATTACK_END = 9

   HS_WINGS = 1

resources:

   DragonFlyQueen_koc_name_rsc = "kohuzotz"
   DragonFlyQueen_name_rsc = "dragonfly queen"
   DragonFlyQueen_icon_rsc = dflo.bgf
   DragonFlyQueen_desc_rsc = \
      "The other dragonflies seem to revere this oddly colored female.  She looks "
      "up at you out of curiosity or hunger, you are not sure which."

   DragonFlyQueen_wings_rsc = dflywing.bgf

   DragonFlyQueen_dead_icon_rsc = dfloX.bgf
   DragonFlyQueen_dead_name_rsc = "dead dragonfly queen"

   DragonFlyQueen_sound_hit = df_atkm.wav
   DragonFlyQueen_sound_miss = df_atkm.wav
   DragonFlyQueen_sound_death = df_dth.wav
   DragonFlyQueen_sound_aware = df_awr.wav

   dragonfly_charmed = "The dragonfly scarfs down the %s and looks at you with obvious adoration."
   dragonfly_notcharmed = "The dragonfly scarfs down the %s, sniffs your hand, and looks at you expectantly."
   DragonFlyQueen_unwanted_give = "~k%s%s cocks its head quizzically and sniffs your hand.~n~k"
   
   DragonFlyQueen_spit = loogy.bgf

classvars:

   viIndefinite = ARTICLE_A
   vrKocName = DragonFlyQueen_koc_name_rsc
   vrName = DragonFlyQueen_name_rsc
   vrIcon = DragonFlyQueen_icon_rsc
   vrDesc = DragonFlyQueen_desc_rsc
   vrDead_icon = DragonFlyQueen_dead_icon_rsc
   vrDead_name = DragonFlyQueen_dead_name_rsc

   viTreasure_type = TID_DRAGONFLY

   viSpeed = SPEED_FAST
   viAttack_type = ATCK_WEAP_PIERCE
   viLevel = 145
   viDifficulty = 6
   viKarma = 40
   viDefault_behavior = AI_FIGHT_AGGRESSIVE
   viAttributes = MOB_RECEIVE
   viGender = GENDER_FEMALE

   viWimpy = 2

   vrSound_hit = DragonFlyQueen_sound_hit
   vrSound_miss = DragonFlyQueen_sound_miss
   vrSound_aware = DragonFlyQueen_sound_aware
   vrSound_death = DragonFlyQueen_sound_death

   vrUnwanted_give = DragonFlyQueen_unwanted_give

properties:

   piAnimation = ANIM_NONE
   ptHover = $   
   ptLand = $   

messages:

   Constructor()
   {
      plWantedItems = [&Food];

      propagate;
   }

   Constructed()
   {
      plResistances = [ [ 25, -ATCK_SPELL_COLD ],
                        [ 40, -ATCK_SPELL_SHOCK ],
                        [ -20, -ATCK_SPELL_FIRE ],
                        [ 40, ATCK_WEAP_THRUST ],
                        [ 25, ATCK_WEAP_NERUDITE ],
                        [ -10, ATCK_WEAP_MAGIC]
                      ];

      propagate;
   }

   MonsterAttack(what = $)
   {
      Send(self,@DoSpit);

      return;
   }

   DoSpit()
   {
      piAnimation = ANIM_ATTACK;
      piDrawFX = piDrawFX | BOUNCE_YES;
      Send(poOwner,@SomethingChanged,#what=self);
      send(poOwner,@SomethingShot,#who=self,#target=poTarget,#projectile = self);
      piAnimation = ANIM_HOVER;
      if ptHover = $
      {
         ptHover = CreateTimer(self,@HoverTimer,HOVER_DELAY);
      }

      return;
   }

   GetProjectileSpeed()
   {
      return 8;
   }
   
   SendProjectileAnimation()
   {
      AddPacket(1, ANIMATE_CYCLE, 4, 40, 2, 1, 2, 5);   % 40ms between animations

      return;
   }

   GetProjectileIcon()
   {
      return DragonFlyQueen_spit;
   }

   GetProjectileLightFlags()
   {
      % No lighting information.
      return LIGHT_FLAG_NONE;
   }

   HoverTimer()
   {
      ptHover = $;

      Send(poOwner,@SomethingChanged,#what=self);
      if ptLand <> $
      {
         DeleteTimer(ptLand);
      }

      ptLand = CreateTimer(self,@LandTimer,LAND_DELAY);

      return;
   }

   LandTimer()
   {
      ptLand = $;

      if (poTarget = $) AND (piAnimation = ANIM_HOVER)
      {
         piAnimation = ANIM_NONE;
         piDrawFX = (piDrawFX & (~BOUNCE_YES));
          Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_NONE);
      AddPacket(2,FRAME_LAND);

      return;
   }

   SendLookOverlays()
   {
      AddPacket(1,0);

      return;
   }

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,ANIM_SPEED,2,FRAME_FLY_START,2,FRAME_FLY_END);

      return;
   }

   SendmoveOverlays()
   {
      AddPacket(1,1);
      AddPacket(4,DragonFlyQueen_wings_rsc,1,HS_WINGS);
      AddPacket(1,ANIMATE_EFFECT,1,DRAWFX_TRANSLUCENT_25-DRAWFX_TRANSLUCENT_25+1);
      AddPacket(1,ANIMATE_CYCLE,4,WING_ANIM_SPEED,2,(FRAME_FLY_START - 1),2,(FRAME_FLY_END - 1) );

      return;
   }

   SendOverlays()
   {
      if piAnimation = ANIM_HOVER
      {
         AddPacket(1,1);
         AddPacket(4,DragonFlyQueen_wings_rsc,1,HS_WINGS);
         AddPacket(1,ANIMATE_EFFECT,1,DRAWFX_TRANSLUCENT_25-DRAWFX_TRANSLUCENT_25+1);
         AddPacket(1,ANIMATE_CYCLE,4,WING_ANIM_SPEED,2,(FRAME_HOVER_START - 1),2,(FRAME_HOVER_END - 1) );

         return;
      }

      if piAnimation = ANIM_ATTACK
      {
         % uses normal body speed for attack
         AddPacket(1,1);
         AddPacket(4,DragonFlyQueen_wings_rsc,1,HS_WINGS);
         AddPacket(1,ANIMATE_EFFECT,1,DRAWFX_TRANSLUCENT_25-DRAWFX_TRANSLUCENT_25+1);
         AddPacket(1,ANIMATE_ONCE,4,ANIM_SPEED,2,(FRAME_ATTACK_START - 1),2,(FRAME_ATTACK_END - 1),2,(FRAME_HOVER_END - 1) );

         return;
      }

     propagate;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_HOVER
      {
         AddPacket(1,ANIMATE_CYCLE,4,ANIM_SPEED,2,FRAME_HOVER_START,2,FRAME_HOVER_END);

         return;
      }

      if piAnimation = ANIM_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,ANIM_SPEED,2,FRAME_ATTACK_START,2,FRAME_ATTACK_END,2,FRAME_HOVER_END);

         return;
      }

      % If no body animation.     
      propagate;
   }

   Delete()
   {
      if ptHover <> $
      {
         deletetimer(ptHover);
         ptHover = $;
      }

      if ptLand <> $
      {
         deletetimer(ptLand);
         ptLand = $;
      }

      propagate;
   }

   GetDrawfx()
   {
      return piDrawfx;
   }

   CanAcceptOffer()
   {
      return TRUE;
   }
   
   GotWantedItem(who=$, obj = 0)
   {
      local oPlayerObj, i;

      if not isClass(obj,&Food)  { return false; }
      
      oPlayerObj = $;
      for i in send(who,@GetHolderPassive)
      {
         if isClass(i,GetClass(obj))
         {
            oPlayerObj = i;

            break;
         }
      }

      if oPlayerObj = $ 
      {
         debug("player offered some food he didn't have.");

         return FALSE;
      }

      if send(oPlayerObj,@GetNumber) < send(obj,@GetNumber)
      {
         debug("Player offered more food than he had.");

         return FALSE;
      }

      if isClass(obj,&Meatpie) and (send(self,@GetMaster)=$ or isClass(send(self,@GetMaster),&User))
      {
         %% Dragonfly is charmed.
         send(self,@SetMaster,#omaster=who);
         post(self,@ResetBehaviorFlags);  
         post(who,@msgsenduser,#message_rsc=dragonfly_charmed,#parm1=send(obj,@GetName));
      }
      else
      {
         post(who,@msgsenduser,#message_rsc=dragonfly_notcharmed,#parm1=send(obj,@GetName));
      }

      Send(oPlayerObj,@SubtractNumber,#number=send(obj,@Getnumber));      
      send(obj,@Delete);

      return TRUE;
   }

   GetObjectFlags()
   {
      if piAnimation = ANIM_NONE
      {
         return MOVEON_NO | BATTLER_YES | OFFER_YES;
      }

      return MOVEON_NO | BOUNCE_YES | BATTLER_YES | OFFER_YES;
   }

   TweakBehavior(mob = $)
   {      
      if poMaster <> $
      {
         send(self,@SetBehaviorFlag,#flag=AI_MOVE_FOLLOW_MASTER,#value=TRUE);
         send(self,@SetBehaviorFlag,#flag=AI_FIGHT_AGGRESSIVE,#value=FALSE);
         send(self,@SetBehaviorFlag,#flag=AI_FIGHT_NEWBIESAFE);
         send(self,@SetBehaviorFlag,#flag=AI_FIGHT_MONSTERS);
      }

      return;      
   }

   CanMorphTo()
   {
      return FALSE;
   }      


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
