% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
GroundWorm is Monster

constants:

   include blakston.khd

   ANIM_POPUP = 2
   ANIM_POPDOWN = 3
   ANIM_POPUPATTACK = 4

   FRAME_UNDERGROUND = 1
   FRAME_POPUP_START = 2
   FRAME_POPUP_END = 6
   FRAME_SURFACED = 7
   FRAME_ATTACK_START = 8
   FRAME_ATTACK_END = 11
   FRAME_POPDOWN_START = 12
   FRAME_POPDOWN_END = 14

   ANIMATION_SPEED = 80

   POSTPOP_DELAY = 500     % half a second

resources:

   GroundWorm_name_rsc = "groundworm"
   GroundWorm_icon_rsc = wormm.bgf
   GroundWorm_koc_name_rsc = "slithic"
   GroundWorm_desc_rsc = \
      "A fearsome and stealthy creature, the groundworm is known for its habit "
      "of lurking underground out of sight, then suddenly springing forth to "
      "devour its hapless victim."

   GroundWorm_dead_icon_rsc = wormmX.bgf
   GroundWorm_dead_name_rsc = "slain groundworm"

   GroundWorm_sound_miss = gwrmatk.wav
   GroundWorm_sound_death = gwrmdie.wav
   GroundWorm_sound_aware = gwrm1awr.wav

classvars:

   vrKocName = GroundWorm_koc_name_rsc
   vrName = GroundWorm_name_rsc
   vrIcon = GroundWorm_icon_rsc
   vrDesc = GroundWorm_desc_rsc
   vrDead_icon = GroundWorm_dead_icon_rsc
   vrDead_name = GroundWorm_dead_name_rsc

   viTreasure_type = TID_TOUGH
   viSpeed = SPEED_FAST
   viAttack_spell = ATCK_SPELL_ACID
   viAttributes = 0
   viLevel = 100
   viDifficulty = 5
   viKarma = 30
   viDefault_behavior = AI_FIGHT_AGGRESSIVE

   vrSound_miss = GroundWorm_sound_miss
   vrSound_aware = GroundWorm_sound_aware
   vrSound_death = GroundWorm_sound_death

   viTrailLength = 3
   vbTrailLarge = TRUE

properties:

   piAnimation = ANIM_NONE
   plTrail = $
   piLastRow = 0
   piLastCol = 0

   pbSurfaced = FALSE

   ptPostPop = $
   
messages:

   Constructed()
   {
      plResistances = [ [ -20, ATCK_WEAP_MAGIC ],
                        [ -30, ATCK_WEAP_BLUDGEON ],
                        [  70, -ATCK_SPELL_ACID ],
                        [  50, -ATCK_SPELL_QUAKE ]
                      ];

      propagate;
   }

   MonsterAttack(what = $)
   {
      if pbSurfaced
      {
         piAnimation = ANIM_ATTACK;
         Send(poOwner,@SomethingChanged,#what=self);
         piAnimation = ANIM_NONE;
      }
      else
      {
         if ptPostPop = $
         {
            ptPostPop = createTimer(self,@PostPop,POSTPOP_DELAY);
            piAnimation = ANIM_POPUPATTACK;
            pbSurfaced = TRUE;
            Send(poOwner,@SomethingChanged,#what=self);
            piAnimation = ANIM_NONE;
         }
      }

      return;
   }

   PopDown()
   {
      if ptPostPop = $
      {
         ptPostPop = createTimer(self,@PostPop,POSTPOP_DELAY);
         piAnimation = ANIM_POPDOWN;
         pbSurfaced = FALSE;
         Send(poOwner,@SomethingChanged,#what=self);
         piAnimation = ANIM_NONE;
      }

      return;
   }

   PostPop()
   {
      ptPostPop = $;

      return;
   }

%%%
%  Shouldn't need to handle this state change, since the animation stuff is handled in MonsterAttack.
%        In fact, if we handled it here we might have sychronization problems - either we do the
%        POPUPATTACK animation here and we'd actually attack a bit later, or we do the POPUP animation
%        here and it might get interrupted by an ATTACK animation.
%%%
%   EnterStateAttack()
%   {
%      propagate;
%   }
%%%

   EnterStateLimbo()
   {
      if pbSurfaced
      {
         send(self,@PopDown);
      }

      propagate;
   }

   EnterStateWait()
   {
      if pbSurfaced
      {
         send(self,@PopDown);
      }

      propagate;
   }

   EnterStateMove()
   {
      if pbSurfaced
      {
         send(self,@PopDown);
      }

      propagate;
   }

   EnterStateChase()
   {
      if pbSurfaced
      {
         send(self,@PopDown);
      }

      propagate;
   }

   SendMoveAnimation()
   {
      send(self,@SendAnimation);

      return;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_ATTACK
      {
         send(self,@SendAttackAnimation);

         return;
      }

      if piAnimation = ANIM_POPUP
      {
         send(self,@SendPopupAnimation);

         return;
      }

      if piAnimation = ANIM_POPDOWN
      {
         send(self,@SendPopdownAnimation);

         return;
      }

      if piAnimation = ANIM_POPUPATTACK
      {
         send(self,@SendPopupAttackAnimation);

         return;
      }

      if pbSurfaced
      {
         AddPacket(1,ANIMATE_NONE,2,FRAME_SURFACED);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,FRAME_UNDERGROUND);
      }

      return;
   }

   SendAttackAnimation()
   {
      AddPacket(1,ANIMATE_ONCE,4,ANIMATION_SPEED,2,FRAME_ATTACK_START,2,FRAME_ATTACK_END,2,FRAME_SURFACED);

      return;
   }

   SendPopupAnimation()
   {
      AddPacket(1,ANIMATE_ONCE,4,ANIMATION_SPEED,2,FRAME_POPUP_START,2,FRAME_POPUP_END,2,FRAME_SURFACED);

      return;
   }

   SendPopdownAnimation()
   {
      AddPacket(1,ANIMATE_ONCE,4,ANIMATION_SPEED,2,FRAME_POPDOWN_START,2,FRAME_POPDOWN_END,2,FRAME_UNDERGROUND);

      return;
   }

   SendPopupAttackAnimation()
   {
      AddPacket(1,ANIMATE_ONCE,4,ANIMATION_SPEED,2,FRAME_POPUP_START,2,FRAME_ATTACK_END,2,FRAME_SURFACED);

      return;
   }

   SendLookAnimation()
   {
      if pbSurfaced
      {
         AddPacket(1,ANIMATE_NONE,2,FRAME_SURFACED);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,FRAME_POPUP_START);
      }

      return;
   }

   NewOwner(what = $)
   {
      if send(self,@GetOwner) <> what
      {
         % gotta post this so we look at our coords after we're in the new room
         post(self,@InitializeTrail);
      }

      propagate;
   }

   InitializeTrail()
   {
      local i;

      if send(self,@GetOwner) <> $
      {
         piLastRow = send(self,@GetRow);
         piLastCol = send(self,@GetCol);
      }

      for i in plTrail
      {
         send(i,@Delete);
      }

      plTrail = $;

      return;
   }

   SomethingMoved(what=$,new_row=$,new_col=$)
   {
      local i,bAddTrailClump,oTrailClump;

      if what = self
      {
         if (send(self,@GetRow) = piLastRow) and (send(self,@GetCol) = piLastCol)
         {
            %DEBUG("got Somethingmoved but still at saved coords - got the order wrong");
            propagate;
         }

         piLastRow = send(self,@GetRow);
         piLastCol = send(self,@GetCol);
         bAddTrailClump = TRUE;
         for i in plTrail
         {
            if send(i,@GetOwner) = $
            {
               plTrail = DelListElem(plTrail,i);
               continue;
            }
            if (send(i,@GetRow) = new_row) and (send(i,@GetCol) = new_col)
            {
               send(i,@Delete);
               plTrail = DelListElem(plTrail,i);
               continue;
            }
            if (send(i,@GetRow) = piLastRow) and (send(i,@GetCol) = piLastCol)
            {
               if bAddTrailClump
               {
                  bAddTrailClump = FALSE;
               }
               else
               {
                  DEBUG("Got two trail elements at the same location!  Deleting the extra one.");
                  send(i,@Delete);
                  plTrail = DelListElem(plTrail,i);
               }
            }
         }

         if bAddTrailClump
         {
            oTrailClump = Create(&GroundWormTrailClump,#TrailLarge=vbTrailLarge);
            send(poOwner,@NewHold,#what=oTrailClump,#new_row=piLastRow,#new_col=piLastCol);
            plTrail = cons(oTrailClump,plTrail);
         }

         while length(plTrail) > viTrailLength
         {
            oTrailClump = nth(plTrail,length(plTrail));
            send(oTrailClump,@Delete);
            plTrail = DelListElem(plTrail,oTrailClump);
         }
      }

      propagate;
   }

   CanMonsterFight(who=$, oStroke = $, use_weapon = $)
   {

      if (oStroke <> $)
         AND (IsClass(oStroke,&DMSpell) OR IsClass(oStroke,&Smite))
      {
         return TRUE;
      }
      
      if NOT pbSurfaced
      {
         if use_weapon = $
            OR NOT (IsClass(use_weapon,&Hammer)
                    OR IsClass(use_weapon,&SpiritualHammer))
         { 
            return FALSE; 
         }
      }

      return TRUE;
   }

   Delete()
   {
      local i;
      for i in plTrail
      {
         send(i,@Delete);
      }
      plTrail = $;
      if ptPostPop <> $
      {
         DeleteTimer(ptPostPop);
         ptPostPop = $;
      }

      propagate;
   }

   CanMorphTo()
   {
      return FALSE;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
