% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Iceperson is Monster

constants:

   include blakston.khd

   ANIM_THROW = 3

   THROW_CHANCE = 25
   THROW_RANGE_SQUARED = 666

   % damage levels - incomplete assets
   % GROUP_DEFAULT = 1
   % GROUP_WOUNDED = 2
   % GROUP_VERY_WOUNDED = 3

   FRAME_FEET_STANDING = 1
   FRAME_FEET_ATTACKING = 4
   FRAME_FEET_WALK_START = 2
   FRAME_FEET_WALK_END = 4

   % right arm
   FRAME_ARM_STANDING = 1
   FRAME_ARM_ATTACK_START = 2
   FRAME_ARM_ATTACK_END = 3
   FRAME_ARM_THROW_START = 4
   FRAME_ARM_THROW_END = 5

   % sword
   FRAME_WEAPON_ATTACK_HELD = 1

   % spear
   FRAME_WEAPON_THROW_HELD = 1
   FRAME_WEAPON_THROW_READY = 2

   ANIMATION_WALK_SPEED = 150
   ANIMATION_ATTACK_SPEED = 200
   ANIMATION_THROW_SPEED = 200

resources:

   iceperson_koc_name_rsc = "atzmoch"
   iceperson_name_rsc = "ice creature"
   iceperson_icon_rsc = iceper_torso.bgf
   iceperson_desc_rsc = "Frost clings to every inch of the crystalline figure,"
      " its jagged limbs glimmering in the pale light.  The air around it crackles"
      " with an icy stillness, not born of malice but of a resolve to protect"
      " something greater."

   iceperson_rightarm = iceper_rightarm.bgf
   iceperson_feet = iceper_feet.bgf
   iceperson_spear = iceper_spear.bgf
   iceperson_sword = iceper_sword.bgf
   iceperson_spear_projectile = icespflt.bgf

   iceperson_dead_icon_rsc = iceperX.bgf
   iceperson_dead_name_rsc = "melting ice"

   iceperson_sound_hit = ice_atkh.wav
   iceperson_sound_miss = ice_atkm.wav
   iceperson_sound_death = ice_dth.wav
   iceperson_sound_aware = ice_awr.wav

classvars:
   vrKocName = iceperson_koc_name_rsc
   vrName = iceperson_name_rsc
   vrIcon = iceperson_icon_rsc
   vrDesc = iceperson_desc_rsc
   vrDead_icon = iceperson_dead_icon_rsc
   vrDead_name = iceperson_dead_name_rsc

   viTreasure_type = TID_ICE_PERSON
   
   viSpeed = SPEED_FAST
   viAttack_type = ATCK_WEAP_THRUST
   viAttack_spell = ATCK_SPELL_COLD
   viDefault_behavior = AI_FIGHT_KARMA_AGGRESSIVE | AI_FIGHT_WIZARD_KILLER |  AI_MOVE_FLEE_FRIGHTENERS |  AI_MOVE_REGROUP
   viAttributes = 0
   viLevel = 90
   viDifficulty = 8
   viKarma = 75

   vrSound_hit = iceperson_sound_hit
   vrSound_miss = iceperson_sound_miss
   vrSound_aware = iceperson_sound_aware
   vrSound_death = iceperson_sound_death

   viDead_drawfx = DRAWFX_TRANSLUCENT_50
   
properties:

   piAnimation = ANIM_NONE
   piDrawFX = DRAWFX_TRANSLUCENT_50

   prWeaponOverlay = iceperson_sword      % sword as default weapon

messages:

   Constructed()
   {
      plResistances = [ [ 99, -ATCK_SPELL_COLD ],
                        [-30, -ATCK_SPELL_FIRE ],
                        [ 40, ATCK_WEAP_PIERCE ],
                        [ 30, ATCK_WEAP_THRUST],
                        [ 20, ATCK_SPELL_SHOCK ],
                        [ 20, ATCK_SPELL_ALL ],
                        [ 20, ATCK_WEAP_SLASH],
                        [-10, ATCK_WEAP_BLUDGEON ],
                        [-10, ATCK_SPELL_ACID ],
                        [-20, ATCK_SPELL_QUAKE ] ];

      % Random weapon selection
      Send(self,@SetWeapon);

      propagate;
   }

   SetWeapon()
   "Random chance to spawn a spear variant"
   {
      local iRandom;

      iRandom = random(0,1);
      if iRandom = 1
      {
         prWeaponOverlay = iceperson_spear;
         piBehavior = AI_MOVE_OPTIMAL_RANGE;
      }
      else
      {
         prWeaponOverlay = iceperson_sword;
         piBehavior = viDefault_behavior;
      }
      
      return;
   }

   % Used for defense messages
   GetParryAbility(stroke_obj=$)
   {
      if (stroke_obj <> $) AND NOT Send(stroke_obj,@CanParry)
      {
         return 0;
      }
      return (viDifficulty*10)/2;
   }

   MonsterAttack(what = $)
   {
      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   MonsterCanCastSpell()
   {
      if (prWeaponOverlay = iceperson_sword)
      {
         return FALSE;
      }

      propagate;
   }

   MonsterCastSpell()
   {
      local iDistance;

      iDistance = Send(self,@SquaredDistanceTo,#what=poTarget);
      if Random(1,100) < THROW_CHANCE
         AND iDistance > Send(self,@GetAttackRange)
         AND iDistance <= THROW_RANGE_SQUARED
         AND Send(poOwner,@LineOfSight,#obj1=self,#obj2=poTarget)
         AND Send(poOwner,@ReqSomethingAttack,#what=self,#victim=poTarget,
                  #use_weapon=self)
      {
         Send(self,@DoMissileAttack);
         
         return TRUE;
      }

      return FALSE;
   }

   DoMissileAttack()
   {
      piAnimation = ANIM_THROW;
      Send(poOwner,@SomethingChanged,#what=self);
      Send(poOwner,@SomethingShot,#who=self,#target=poTarget,#projectile=self,#flags=PROJ_FLAG_LIGHT_SOURCE);

      return;
   }

   SendMoveOverlays()
   {
      AddPacket(1,3);

      AddPacket(4,iceperson_feet,1,HS_LEGS,1,ANIMATE_CYCLE,4,ANIMATION_WALK_SPEED,2,FRAME_FEET_WALK_START,2,FRAME_FEET_WALK_END);

      AddPacket(4,iceperson_rightarm,1,HS_RIGHT_HAND,1,ANIMATE_NONE,2,FRAME_ARM_STANDING);
      
      AddPacket(4,prWeaponOverlay,1,HS_RIGHT_WEAPON,1,ANIMATE_NONE,2,1);

      return;
   }

   SendOverlays()
   {
      % Send overlay bitmap info to user.
      AddPacket(1,3);

      if piAnimation = ANIM_ATTACK
      {
         AddPacket(4,iceperson_feet,1,HS_LEGS);
         AddPacket(1,ANIMATE_NONE,2,FRAME_FEET_ATTACKING);
         
         AddPacket(4,iceperson_rightarm,1,HS_RIGHT_HAND);
         AddPacket(1,ANIMATE_ONCE,4,ANIMATION_ATTACK_SPEED,2,FRAME_ARM_ATTACK_START,2,FRAME_ARM_ATTACK_END,2,FRAME_ARM_STANDING);

         AddPacket(4,prWeaponOverlay,1,HS_RIGHT_WEAPON);
         AddPacket(1,ANIMATE_NONE,2,FRAME_WEAPON_ATTACK_HELD);
      }

      if piAnimation = ANIM_THROW
      {
         AddPacket(4,iceperson_feet,1,HS_LEGS);
         AddPacket(1,ANIMATE_NONE,2,FRAME_FEET_ATTACKING);
         
         AddPacket(4,iceperson_rightarm,1,HS_RIGHT_HAND);
         AddPacket(1,ANIMATE_ONCE,4,ANIMATION_THROW_SPEED,2,FRAME_ARM_THROW_START,2,FRAME_ARM_THROW_END,2,FRAME_ARM_STANDING);

         AddPacket(4,prWeaponOverlay,1,HS_RIGHT_WEAPON);
         AddPacket(1,ANIMATE_NONE,2,FRAME_WEAPON_THROW_HELD);
      }

      if piAnimation = ANIM_NONE
      {
         AddPacket(4,iceperson_feet,1,HS_LEGS);
         AddPacket(1,ANIMATE_NONE,2,FRAME_FEET_STANDING);

         AddPacket(4,iceperson_rightarm,1,HS_RIGHT_HAND);
         AddPacket(1,ANIMATE_NONE,2,FRAME_ARM_STANDING);

         AddPacket(4,prWeaponOverlay,1,HS_RIGHT_WEAPON);
         if prWeaponOverlay = iceperson_spear
         {
            AddPacket(1,ANIMATE_NONE,2,FRAME_WEAPON_THROW_READY);
         }
         else
         {
            AddPacket(1,ANIMATE_NONE,2,FRAME_WEAPON_ATTACK_HELD);
         }
      }

      return;
   }

   GetProjectileSpeed()
   {
      return 8;
   }

   SendProjectileAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }

   GetProjectileLightFlags()
   {
      % General lighting information.
      return LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC;
   }

   GetProjectileLightIntensity()
   {
      % Medium light radius for projectile.  Out of 255 levels.
      return 125;
   }

   GetProjectileLightColor()
   {
      return LIGHT_WHITE;
   }

   GetProjectileIcon()
   {
      return iceperson_spear_projectile;
   }

   SendLightingInformation()
   {
      AddPacket(2,(LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC));
      AddPacket(1,5); % 5 out of 255 intensity of light
      AddPacket(2,LIGHT_WHITE);

      return;
   }

   CanMorphTo()
   {
      return FALSE;
   }      

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
