% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Iceperson is Monster

constants:

   include blakston.khd

   % Spear throw animation
   ANIM_THROW = 2

   THROW_CHANCE = 25
   THROW_RANGE_SQUARED = 666

resources:

   iceperson_koc_name_rsc = "atzmoch"
   iceperson_name_rsc = "ice creature"
   iceperson_icon_rsc = iceperT.bgf
   iceperson_desc_rsc = "This is a creature made completely from frozen water!"

   iceperson_head = iceperH.bgf
   iceperson_armor = iceperA.bgf
   iceperson_legs = iceperF.bgf

   iceperson_rightarm = iceperR.bgf

   iceperson_spear = icepersp.bgf
   iceperson_sword = icperswd.bgf
   
   iceperson_spear_projectile = icespflt.bgf

   iceperson_dead_icon_rsc = blank.bgf
   iceperson_dead_name_rsc = "melting ice"

   iceperson_sound_hit = ice_atkh.wav
   iceperson_sound_miss = ice_atkm.wav
   iceperson_sound_death = ice_dth.wav
   iceperson_sound_aware = ice_awr.wav

classvars:
   vrKocName = iceperson_koc_name_rsc
   vrName = iceperson_name_rsc
   vrIcon = iceperson_icon_rsc
   vrDesc = iceperson_desc_rsc
   vrDead_icon = iceperson_dead_icon_rsc
   vrDead_name = iceperson_dead_name_rsc

   viTreasure_type = TID_NONE
   viSpeed = SPEED_AVERAGE
   viAttack_type = ATCK_WEAP_THRUST
   viAttack_spell = ATCK_SPELL_COLD
   viAttributes = 0
   viLevel = 75
   viDifficulty = 5
   viKarma = -70

   vrSound_hit = iceperson_sound_hit
   vrSound_miss = iceperson_sound_miss
   vrSound_aware = iceperson_sound_aware
   vrSound_death = iceperson_sound_death

properties:

   piAnimation = ANIM_NONE
   piDrawFX = DRAWFX_TRANSLUCENT_50

   prWeaponOverlay = iceperson_sword

messages:

   Constructed()
   {
      plResistances = [ [ -99, -ATCK_SPELL_FIRE ],[ 99, -ATCK_SPELL_COLD ]];

      % Random weapon selection
      Send(self,@SetType);

      propagate;
   }

   SetType()
   "Random chance to spawn a spear variant"
   {
      local iRandom;

      iRandom = random(0,1);
      if iRandom = 0
      {
         prWeaponOverlay = iceperson_spear;
      }

      return;
   }

   % Used for defense messages
   GetParryAbility(stroke_obj=$)
   {
      if (stroke_obj <> $) and not Send(stroke_obj,@CanParry)
      {
         return 0;
      }
      return (viDifficulty*10)/2;
   }

   MonsterAttack(what = $)
   {
      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   MonsterCastSpell()
   {
      local iDistance;

      iDistance = Send(self,@SquaredDistanceTo,#what=poTarget);
      if Random(1,100) < THROW_CHANCE
         AND iDistance > Send(self,@GetAttackRange)
         AND iDistance <= THROW_RANGE_SQUARED
         AND Send(poOwner,@LineOfSight,#obj1=self,#obj2=poTarget)
         AND Send(poOwner,@ReqSomethingAttack,#what=self,#victim=poTarget,
                  #use_weapon=self)
      {
         Send(self,@DoMissileAttack);
         
         return TRUE;
      }

      return FALSE;
   }

   DoMissileAttack()
   {
      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;
      Send(poOwner,@SomethingShot,#who=self,#target=poTarget,#projectile=self);

      return;
   }

   GetProjectileSpeed()
   {
      return 8;
   }

   SendProjectileAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }

   GetProjectileLightFlags()
   {
      % No lighting information.
      return LIGHT_FLAG_NONE;
   }

   GetProjectileIcon()
   {
      return iceperson_spear_projectile;
   }

   SendMoveOverlays()
   {
      AddPacket(1,3);

      AddPacket(4,iceperson_legs,1,HS_LEGS,1,ANIMATE_CYCLE,4,150,2,2,2,3); 
      AddPacket(4,iceperson_rightarm,1,HS_RIGHT_HAND,1,ANIMATE_NONE,2,1);
      AddPacket(4,prWeaponOverlay,1,HS_RIGHT_WEAPON,1,ANIMATE_NONE,2,1);

      return;
   }

   SendOverlays()
   {
      % Send overlay bitmap info to user.  

      % iceperson has left and right arms, head, legs, and a weapon
      AddPacket(1,3);
      
      AddPacket(4,iceperson_legs,1,HS_LEGS);

      if piAnimation = ANIM_ATTACK
      {	 
         AddPacket(1,ANIMATE_NONE,2,4); 
      }
      else
      {	 
         AddPacket(1,ANIMATE_NONE,2,1); 
      }

      AddPacket(4,iceperson_rightarm,1,HS_RIGHT_HAND);

      if piAnimation = ANIM_ATTACK
      {	 
         AddPacket(1,ANIMATE_ONCE,4,200,2,2,2,3,2,1); 
      }
      else
      {  
         AddPacket(1,ANIMATE_NONE,2,1); 
      }


      AddPacket(4,prWeaponOverlay,1,HS_RIGHT_WEAPON);

      if piAnimation = ANIM_ATTACK
      {
         if prWeaponOverlay = iceperson_spear
         {
            AddPacket(1,ANIMATE_ONCE,4,200,2,1,2,2,2,1);
         }
         else
         {
            AddPacket(1,ANIMATE_ONCE,4,200,2,2,2,3,2,1);
         }
      }
      else
      {  
         AddPacket(1,ANIMATE_NONE,2,1);
      }

      return;
   }

   SendAnimation()
   {
      local iGroup;

      iGroup = 1;

      if piHit_points < (2*viLevel/3)
      {
	      iGroup = 2;
      }
      
      if piHit_points < (viLevel/3)
      {
	      iGroup = 3;
      }

      AddPacket(1,ANIMATE_NONE,2,iGroup);

      return;
   }

   CanMorphTo()
   {
      return FALSE;
   }      

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
