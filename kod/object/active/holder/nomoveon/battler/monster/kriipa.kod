% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Kriipa is Monster

constants:

   include blakston.khd

   FRAME_STAND_CANOPY = 1
   FRAME_STAND = 2  
   FRAME_JUMPUP_START = 3
   FRAME_JUMPUP_END = 6
   FRAME_JUMPDOWN_START = 6
   FRAME_JUMPDOWN_END = 10

   FRAME_WALK_START = 11
   FRAME_WALK_END = 15
   FRAME_ATTACK_START = 16
   FRAME_ATTACK_END = 20

   ANIM_JUMPUP = 2
   ANIM_JUMPDOWN = 3
   
   STATE_JUMPINGDOWN = 0
   STATE_ONROOF = 1
   STATE_READY = 2
   STATE_JUMPINGUP = 3

resources:

   Kriipa_name_rsc = "kriipa"
   Kriipa_icon_rsc = kriipa.bgf
   Kriipa_desc_rsc = \
      "This spindly-legged creature scuttles along the jungle canopy in search "
	   "of unsuspecting prey, which includes just about everything that moves. "
   	"Island travelers are warned to keep careful watch above, for the deadly "
	   "grinning lizards have been known to decapitate a grown man in a single "
   	"blow with their dagger sharp claws."

   Kriipa_dead_icon_rsc = kriipaX.bgf
   Kriipa_dead_name_rsc = "slain Kriipa"

   Kriipa_sound_hit = kr_atkm.wav
   Kriipa_sound_miss = kr_atkm.wav
   Kriipa_sound_death = kr_dth.wav
   Kriipa_sound_aware = kr_awr.wav

   kriipa_cant_attack = "The kriipa is out of your reach!"

classvars:

   vrName = Kriipa_name_rsc
   vrIcon = Kriipa_icon_rsc
   vrDesc = Kriipa_desc_rsc
   vrDead_icon = Kriipa_dead_icon_rsc
   vrDead_name = Kriipa_dead_name_rsc
 
   viTreasure_type = TID_DRAGONFLY
   viAttack_type = ATCK_WEAP_SLASH
   viSpeed = SPEED_FAST
   viDefault_behavior = AI_FIGHT_AGGRESSIVE | AI_FIGHT_HYPERAGGRESSIVE
   viLevel = 160
   viDifficulty = 6
   viKarma = -50
   viWimpy = 2

   vrSound_hit = Kriipa_sound_hit
   vrSound_miss = Kriipa_sound_miss
   vrSound_aware = Kriipa_sound_aware
   vrSound_death = Kriipa_sound_death

properties:

   piAnimation = ANIM_NONE
   piRoofState = STATE_ONROOF

   ptDrop = $

messages:


   Constructed()
   {
      plResistances = [ [ 30, -ATCK_SPELL_COLD ],
                        [-20, -ATCK_SPELL_SHOCK ],
                        [ 30, -ATCK_SPELL_FIRE ],
                        [-25, ATCK_WEAP_SLASH ],
                        [-25, ATCK_WEAP_NERUDITE ]
                      ];

      propagate;
   }

   GetObjectFlags()
   {
      if (piRoofState <> STATE_ONROOF)
      {  
         return MOVEON_NO | piDrawFX | BATTLER_YES;
      }      

      return piDrawFX | OF_HANGING | BATTLER_YES;
   }

   TryAttack()
   {
      if poOwner = $
      {	
         debug("Unreachable. Null Owner");
         Send(self,@EnterStateLimbo);

         return; 
      }

      if poTarget=$
      {	
         Send(self,@EnterStateWait); 

         return; 
      }

      if piRoofState <> STATE_READY
      {
         return FALSE;
      }

      if NOT Send(self,@CanReach,#what=poTarget) 
      {         
         Send(self,@EnterStateChase);

         return;
      }

      propagate;
   }

   CanMonsterFight(who=$, oStroke = $)
   {
      if piRoofState = STATE_ONROOF
      {
         if NOT send(oStroke,@IsRangedAttack)
         { 
            send(who,@msgsenduser,#message_rsc=kriipa_cant_attack);

            return FALSE; 
         }
      }

      return True;
   }

   DropTimer()
   {
      ptDrop = $;

      if piRoofState = STATE_JUMPINGDOWN
      {  
         piRoofState = STATE_READY;      
         send(self,@TryAttack,#what=poTarget);
         ptDrop=CreateTimer(self,@DropTimer,2000);          

         return;
      }

      if piRoofState = STATE_READY
      {         
         piRoofState = STATE_JUMPINGUP;
         send(self,@MonsterJumpUp);
         ptDrop=CreateTimer(self,@DropTimer,950);          
         Send(poBrain,@PostAttackTimer,#mob=self,#state=piState);
      }

      if piRoofState = STATE_JUMPINGUP
      {
         piRoofState = STATE_ONROOF;
         piBehavior = (piBehavior & ~AI_NOMOVE);
         send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   MonsterAttack(what = $)
   {
      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;
      
      return;
   }
   
   MonsterJumpUp(what = $)
   {
      piAnimation = ANIM_JUMPUP;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;
      
      return;
   }   

   MonsterJumpDown(what = $)
   {
      piAnimation = ANIM_JUMPDOWN;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;
      
      return;
   }   

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,200,2,FRAME_WALK_START,2,FRAME_WALK_END);

      return;
   }

   AttackTimer( timer = $ )
   "We were bashing on something before, and now its time to hit it again."
   {
      Send(self,@ClearBehavior,#timer=timer);

      %%% sanity checks
      if poOwner = $
      {
         debug("Unreachable. Null Owner");
         Send(self,@EnterStateLimbo);

         return;
      }

      if poTarget=$
      {
         Send(self,@EnterStateWait); 

         return; 
      }
      
      send(poBrain,@GetAttackBehavior,#mob=self,#target=poTarget,#behavior=piBehavior);
      
      if poTarget = $
      {
         Send(self,@EnterStateMove);

         return;
      }      

      if not Send(self,@CanReach,#what=poTarget) 
      {         
         Send(self,@EnterStateChase);

         return;
      }

      % We're close enough and in range.  Now, normally, we move 
      %  around the player to keep him guessing.   Let's zigzag around,
      %  instead of consistently moving to that player's right.
      if random(1,100) < 50
      {
         piState = piState | ESTATE_CLOCKWISE;
      }
      else
      {
         piState = piState & ESTATE_CCLK_MASK;
      }

      if ptDrop = $
      {
         %%% carry out attack      
         piRoofState = STATE_JUMPINGDOWN;
         piBehavior = (piBehavior | AI_NOMOVE);
         send(self,@MonsterJumpDown);
         ptDrop=CreateTimer(self,@DropTimer,1200);
      }

      return;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_ATTACK 
      {
         AddPacket(1,ANIMATE_ONCE,4,150,2,FRAME_ATTACK_START,2,
                   FRAME_ATTACK_END,2,FRAME_STAND);

         return;
      }

      if piAnimation = ANIM_JUMPUP
      {
         AddPacket(1,ANIMATE_ONCE,4,150,2,FRAME_JUMPUP_START,2,
                   FRAME_JUMPUP_END,2,FRAME_STAND_CANOPY);

         return;
      }

      if piAnimation = ANIM_JUMPDOWN
      {
         AddPacket(1,ANIMATE_ONCE,4,150,2,FRAME_JUMPDOWN_START,2,
                   FRAME_JUMPDOWN_END,2,FRAME_STAND);

         return;
      }

      % if no body animation
      if piRoofState = STATE_ONROOF
      {
         AddPacket(1,ANIMATE_NONE,2,FRAME_STAND_CANOPY);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,FRAME_STAND);
      }
      
      return;
   }

   ReqMonsterMove(new_row = $,new_col = $)
   "Called by monster moving code to check if we really want to go"
   "to <new_row>,<new_col>."
   "The Kriipa never changes rooms."
   {
      if (new_row > send(poOwner,@GetRoomRows)) OR (new_row < 1) 
         OR (new_col > send(poOwner,@GetRoomCols)) OR (new_col < 1)
      {
         return FALSE;
      }

      return TRUE;
   }

   Delete()
   {
      if ptDrop <> $
      {
         deletetimer(ptDrop);
         ptDrop = $;
      }

      propagate;
   }

   CanMorphTo()
   {
      return FALSE;
   }      


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
