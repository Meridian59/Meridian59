% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
LivingStatue is Monster

constants:

   include blakston.khd

   ANIM_CAST = 3

   % Neutral action, our troops don't smile, etc.
   NO_ACTION = 1  

   % What percent of the statues are soldiers?
   SOLDIER_PERCENT = 20

   % What percent of the time do we wake up when someone is near?
   WAKEUP_CHANCE = 100

   % How long are we dormant when someone tries to wake us up?
   DORMANT_DURATION = 2 * 60 * 1000  % 2 minutes (in ms)

resources:

   LivingStatue_name_rsc = "statue"
   LivingStatue_active_name_rsc = "living statue"

   LivingStatue_desc_rsc = \
      "This statue is the image of some ancient %s."

   LivingStatue_dead_name_rsc = "crumbled living statue"

   LivingStatue_mason = "mason"
   LivingStatue_farmer = "farmer"
   LivingStatue_merchant = "merchant"
   LivingStatue_blacksmith = "blacksmith"
   LivingStatue_elder = "elder"
   LivingStatue_soldier = "soldier"

   LivingStatue_damage = "~B~r%s%s is noticeably more damaged."
   LivingStatue_severe_damage = "~B~r%s%s is severely damaged."

   LivingStatue_rose_drop = "My... beloved...!"

   LivingStatue_icon_blank = blank.bgf

   LivingStatue_male_icon_rsc = bta.bgf
   LivingStatue_female_icon_rsc = btb.bgf  

   % a is male, b is female
   LivingStatue_legs_a_rsc = bfa.bgf
   LivingStatue_legs_b_rsc = bfb.bgf
  
   LivingStatue_rightarm_a_rsc = bra.bgf
   LivingStatue_rightarm_b_rsc = brb.bgf
   
   LivingStatue_leftarm_a_rsc = bla.bgf
   LivingStatue_leftarm_b_rsc = blb.bgf

   LivingStatue_dead_male_icona_rsc = playerXa.bgf
   LivingStatue_dead_male_iconb_rsc = playerXb.bgf
   LivingStatue_dead_female_icona_rsc = heraXa.bgf
   LivingStatue_dead_female_iconb_rsc = heraXb.bgf

   LivingStatue_head_male_icon = phax.bgf
   LivingStatue_head_female_icon = phkx.bgf

   % male
   LivingStatue_eyes_ax_icon = peax.bgf
   LivingStatue_eyes_bx_icon = pebx.bgf
   LivingStatue_eyes_cx_icon = pecx.bgf
   LivingStatue_eyes_dx_icon = pedx.bgf

   % female 
   LivingStatue_eyes_kx_icon = pekx.bgf
   LivingStatue_eyes_lx_icon = pelx.bgf
   LivingStatue_eyes_mx_icon = pemx.bgf

   % male
   LivingStatue_mouth_ax_icon = pmax.bgf
   LivingStatue_mouth_bx_icon = pmbx.bgf
   LivingStatue_mouth_cx_icon = pmcx.bgf

   % female 
   LivingStatue_mouth_kx_icon = pmkx.bgf
   LivingStatue_mouth_lx_icon = pmlx.bgf
   LivingStatue_mouth_mx_icon = pmmx.bgf

   % male
   LivingStatue_nose_ax_icon = pnax.bgf
   LivingStatue_nose_bx_icon = pnbx.bgf
   LivingStatue_nose_cx_icon = pncx.bgf

   % female 
   LivingStatue_nose_kx_icon = pnkx.bgf
   LivingStatue_nose_lx_icon = pnlx.bgf
   LivingStatue_nose_mx_icon = pnmx.bgf

   % both
   LivingStatue_hair_cd_icon = ptcd.bgf
   LivingStatue_hair_bald_icon = blank.bgf

   % male 
   LivingStatue_hair_ac_icon = ptac.bgf
   LivingStatue_hair_ba_icon = ptba.bgf
   LivingStatue_hair_ad_icon = ptad.bgf
   LivingStatue_hair_bb_icon = ptbb.bgf
   LivingStatue_hair_xa_icon = ptxa.bgf

   % female
   LivingStatue_hair_bc_icon = ptbc.bgf
   LivingStatue_hair_ca_icon = ptca.bgf
   LivingStatue_hair_db_icon = ptdb.bgf
   LivingStatue_hair_bd_icon = ptbd.bgf
   LivingStatue_hair_cb_icon = ptcb.bgf
   LivingStatue_hair_dc_icon = ptdc.bgf
   LivingStatue_hair_dr_icon = ptdr.bgf
   LivingStatue_hair_xb_icon = ptxb.bgf

   LivingStatue_rightarm_gauntlet_male = bre.bgf
   LivingStatue_rightarm_gauntlet_female = brf.bgf
   LivingStatue_leftarm_gauntlet_male = ble.bgf
   LivingStatue_leftarm_gauntlet_female = blf.bgf

   LivingStatue_sound_attack = trpsatk.wav
   LivingStatue_sound_aware = xeodie.wav
   LivingStatue_sound_death = xeo1awr.wav

classvars:

   vrDesc = LivingStatue_desc_rsc
   vrDead_name = LivingStatue_dead_name_rsc

   viTreasure_type = TID_MEDIUM_TOUGH

   viAttack_type = ATCK_WEAP_SLASH

   vrSound_hit = LivingStatue_sound_attack
   vrSound_miss = LivingStatue_sound_attack
   vrSound_aware = LivingStatue_sound_aware
   vrSound_death = LivingStatue_sound_death

   viKarma = -40
   viDead_drawfx = DRAWFX_SECONDTRANS

   % percentage chance to be female
   viChanceFemale = 50  

   % Our normal speed when active
   viNormalSpeed = SPEED_AVERAGE

properties:

   % Put these as properties so they can be set
   vrName = LivingStatue_name_rsc

   vrIcon = LivingStatue_male_icon_rsc
   vrDead_Icon = LivingStatue_dead_male_icona_rsc
   vrDead_Legs = LivingStatue_dead_male_iconb_rsc

   viLevel = 75
   viDifficulty = 5
   viGender = GENDER_MALE

   viSpeed = SPEED_NONE

   piAnimation = ANIM_NONE

   prLegs = LivingStatue_legs_a_rsc
   prRight_arm = LivingStatue_rightarm_a_rsc
   prLeft_arm = LivingStatue_leftarm_a_rsc

   prHead = LivingStatue_head_male_icon
   prEyes = LivingStatue_eyes_ax_icon
   prMouth = LivingStatue_mouth_ax_icon
   prNose = LivingStatue_nose_ax_icon
   prToupee = LivingStatue_hair_ac_icon

   plUsing = $
   plOverlays = $
   poHair_Remove = $

   piDrawFX = DRAWFX_SECONDTRANS

   % Is this a soldier?
   pbIsSoldier = FALSE

   % Do we have a shield?
   pbHasShield = FALSE

   % What are we an image of?
   prProfession = LivingStatue_elder

   % How long should we remain dormant, unable to be awoken by players?
   ptRemainDormant = $

   % Used to lock statue into a dormant state
   pbLockedDormant = FALSE

messages:

   Constructor(bIsSoldier=FALSE)
   {
      local lProfessions;

      plOverlays = [ ];
      plUsing = [ ];
      plResistances = [ ];
      
      pbIsSoldier = bIsSoldier;

      Send(self,@SetGender);
      Send(self,@SetFace);
      Send(self,@SetEquipment);
      Send(self,@SetHair);

      if pbIsSoldier
      {
         prProfession = LivingStatue_soldier;

         % Give us a little boost to our stats
         viLevel = viLevel + 15;
         viDifficulty = viDifficulty + 2;

	 % This makes the soliders not have karma
         pbDontDispose = TRUE;
      }
      else
      {
         lProfessions = [ LivingStatue_mason, LivingStatue_farmer,
                          LivingStatue_merchant, LivingStatue_blacksmith,
                          LivingStatue_elder
                        ];

         prProfession = Nth(lProfessions,Random(1,5));
      }

      propagate;
   }

   Delete()
   {
      local oUsedItem;
      
      if ptRemainDormant <> $
      {
         DeleteTimer(ptRemainDormant);
         ptRemainDormant = $;
      }

      for oUsedItem in plUsing
      {
         Send(oUsedItem,@Delete);
      }
      
      plUsing = $;
      plOverlays = $;
      
      propagate;
   }

   %%% Infrastructure

   ShowDesc()
   {
      % Does not show status information, because it has none.
      AddPacket(4,vrDesc, 4,prProfession);

      return;
   }

   HitPointThreshold()
   "Shows physical damage instead of a message."
   {
      local i, iThreshold, iRandomDamage, rDamageReport, each_obj;

      iThreshold = piHit_points*5/piMax_hit_points;

      % General damage report
      rDamageReport = LivingStatue_damage;

      if iThreshold <= 1
      {
         if prHead = LivingStatue_icon_blank
         {
            return;
         }

         prHead = LivingStatue_icon_blank;
         rDamageReport = LivingStatue_severe_damage;
      }
      else
      {
         iRandomDamage = random(1,4);

         if iRandomDamage = 1
         {
            if prEyes = LivingStatue_icon_blank
            {
               return;
            }

            prEyes = LivingStatue_icon_blank;
         }
         else
         {
            if iRandomDamage = 2
            {
               if prMouth = LivingStatue_icon_blank
               {
                  return;
               }

               prMouth = LivingStatue_icon_blank;
            }
            else
            {
               if iRandomDamage = 3
               {
                  if prNose = LivingStatue_icon_blank
                  {
                     return;
                  }

                  prNose = LivingStatue_icon_blank;
               }
               else
               {
                  if prLeft_arm = LivingStatue_icon_blank
                  {
                     return;
                  }

                  prLeft_arm = LivingStatue_icon_blank;
                  pbHasShield = FALSE;
               }
            }
         }
      }

      Send(poOwner,@SomethingChanged,#what=self);

      for i in Send(poOwner,@GetHolderActive)
      {
         each_obj=Send(poOwner,@HolderExtractObject,#data=i);
         if isClass(each_obj,&User) AND Send(each_obj,@GetKillTarget) = self 
         {
            Post(each_obj,@MsgSendUser,#what=self,#message_rsc=rDamageReport,
                 #parm1=Send(self,@GetCapDef),#parm2=Send(self,@GetName));
         }
      }

      return;
   }

   SpellResist(oSpell=$,who=$,iSpellpower=$)
   {
      % Ignore sight-based spells and Seduce
      if IsClass(oSpell,&Blind)
         OR IsClass(oSpell,&Dazzle)
         OR IsClass(oSpell,&Seduce)
      {
         return TRUE;
      }

      propagate;
   }

   SomethingMoved(what = $,new_row = $,new_col = $)
   {
      local iDelay;
      
      % Only care about moving stuff if we're not already moving
      % Only care about non-immortal players we can see and are "close"
      if viSpeed = SPEED_NONE
         AND NOT pbLockedDormant
         AND what <> $
         AND IsClass(what,&Player)
         AND NOT (IsClass(what,&DM) AND Send(what,@PlayerIsImmortal))
         AND Send(poOwner,@LineOfSight,#obj1=self,#obj2=what)
         AND Send(self,@CanSee,#what=what)
      {
         if Random(1,100) <= WAKEUP_CHANCE
         {
            % Set our intruder as our target if we don't have another one.
            % 25 hatred is pretty low.
            if Send(self,@GetHatred) <= 25
            {
               Send(self,@TargetSwitch,#what=what,#iHatred=25);
            }

            % Someone walked close enough!  Spring to life!
            Send(self,@WakeUp);
         }
         else
         {
            % Don't wake up yet.  Rest a bit longer.
            pbLockedDormant = TRUE;

            iDelay = DORMANT_DURATION;
            % Created by an admin?  Probably an invasion.  Don't sleep as long.
            if pbDontDispose
            {
               iDelay = iDelay / 5;
            }

            ptRemainDormant = CreateTimer(self,@EndDormantTimer,iDelay);
         }
      }

      propagate;
   }

   EndDormantTimer()
   {
      ptRemainDormant = $;
      pbLockedDormant = FALSE;

      return;
   }

   GetVisionDistance()
   {
      % A fairly short range for these monsters.
      return 3;
   }

   TweakBehavior()
   "Our default behavior it not be noticable as a monster."
   {
      if viSpeed = SPEED_NONE
      {
         piBehavior = AI_NOMOVE | AI_NOFIGHT | AI_NPC;
      }

      return;
   }

   %%% Dealing with waking up and going dormant

   WakeUp()
   {
      % Make ourselves mobile!
      viSpeed = viNormalSpeed;
      piBehavior = piBehavior & ~(AI_NOMOVE | AI_NOFIGHT | AI_NPC);
      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
         Send(self,@EnterStateChase,#target=poTarget,#actnow=TRUE);
      }

      % Now, fix our name!
      vrName = LivingStatue_active_name_rsc;

      return;
   }

   %%% Defense messages

   GetParryAbility(stroke_obj=$)
   {
      if (stroke_obj <> $) AND NOT Send(stroke_obj,@CanParry)
      {
         return 0;
      }
      
      return (viDifficulty*10)/2;
   }

   GetBlockAbility(stroke_obj=$)
   {
      if ((stroke_obj <> $) AND NOT Send(stroke_obj,@CanBlock))
         OR NOT pbHasShield
      {
         return 0;
      }
      
      return (viDifficulty*10);
   }

   %%% Graphics setup

   SetGender()
   {
      if random(1,100) < viChanceFemale
      {
         viGender = GENDER_FEMALE;
         vrIcon = LivingStatue_female_icon_rsc;
         prHead = LivingStatue_head_female_icon;
         prEyes = LivingStatue_eyes_kx_icon;
         prMouth = LivingStatue_mouth_kx_icon;
         prNose = LivingStatue_nose_kx_icon;
         prToupee = LivingStatue_hair_ca_icon;
         prLegs = LivingStatue_legs_b_rsc;
         prRight_arm = LivingStatue_rightarm_b_rsc;
         prLeft_arm = LivingStatue_leftarm_b_rsc;
         vrDead_Icon = LivingStatue_dead_female_icona_rsc;
         vrDead_Legs = LivingStatue_dead_female_iconb_rsc;
      }

      return;
   }

   SetHair()
   {
      local RandomNumber,Translation,HelmetHair;

      % Sets the hairdo, color.  Has a chance of putting a helmet on instead.

      % Helmet?
      if poHair_Remove <> $
      {
         return;
      }

      % Select a hairdo
      if viGender = GENDER_MALE
      {
         RandomNumber = random(0,6);
         % 0 keeps the "default"
         if RandomNumber = 1
         {
            prToupee = LivingStatue_hair_cd_icon;
         }
         else
         {
            if RandomNumber = 2
            {
               prToupee = LivingStatue_hair_bald_icon;
            }
            else
            {
               if RandomNumber = 3
               {
                  prToupee = LivingStatue_hair_ba_icon;
               }
               else
               {
                  if RandomNumber = 4
                  {
                     prToupee = LivingStatue_hair_ad_icon;
                  }
                  else
                  {
                     if RandomNumber = 5
                     {
                        prToupee = LivingStatue_hair_bb_icon;
                     }
                     else
                     {
                        prToupee = LivingStatue_hair_xa_icon;
                     }
                  }
               }
            }
         }
      } else {
      % female
         RandomNumber = random(0,8);
         % 0 keeps the "default"
         if RandomNumber = 1
         {
            prToupee = LivingStatue_hair_cd_icon;
         }
         else
         {
            if RandomNumber = 2
            {
               prToupee = LivingStatue_hair_bc_icon;
            }
            else
            {
               if RandomNumber = 3
               {
                  prToupee = LivingStatue_hair_db_icon;
               }
               else
               {
                  if RandomNumber = 4
                  {
                     prToupee = LivingStatue_hair_bd_icon;
                  }
                  else
                  {
                     if RandomNumber = 5
                     {
                        prToupee = LivingStatue_hair_cb_icon;
                     }
                     else
                     {
                        if RandomNumber = 6
                        {
                           prToupee = LivingStatue_hair_dc_icon;
                        }
                        else
                        {
                           if RandomNumber = 7
                           {
                              prToupee = LivingStatue_hair_dr_icon;
                           }
                           else
                           {
                              prToupee = LivingStatue_hair_xb_icon;
                           }
                        }
                     }
                  }
               }
            }
         }
      }

      return;
   }

   SetFace()
   % Randomly sets (gender-appropriate) face elements.
   {
      local RandomNumber;
      % NOTE: 0 always keeps the "default" (a) icon.

      if viGender = GENDER_MALE
      {
         RandomNumber = random(0,3);
         if RandomNumber = 1
         {
            prEyes = LivingStatue_eyes_bx_icon;
         }
         else
         {
            if RandomNumber = 2
            {
               prEyes = LivingStatue_eyes_cx_icon;
            }
            else
            {
               prEyes = LivingStatue_eyes_dx_icon;
            }
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prNose = LivingStatue_nose_bx_icon;
         }
         else
         {
            prNose = LivingStatue_nose_cx_icon;
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prMouth = LivingStatue_mouth_bx_icon;
         }
         else
         {
            prMouth = LivingStatue_mouth_cx_icon;
         }

      }
      else
      {
         % female

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prEyes = LivingStatue_eyes_lx_icon;
         }
         else
         {
            prEyes = LivingStatue_eyes_mx_icon;
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prNose = LivingStatue_nose_lx_icon;
         }
         else
         {
            prNose = LivingStatue_nose_mx_icon;
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prMouth = LivingStatue_mouth_lx_icon;
         }
         else
         {
            prMouth = LivingStatue_mouth_mx_icon;
         }
      }

      return;
   }

   SetEquipment()
   {
      local oEquipmentItem, iRandomNumber, HelmetHair;

      iRandomNumber = random(1,10);
      if iRandomNumber <= 3
      {
         oEquipmentItem = create(&Longsword);
      }
      else
      {
         if iRandomNumber <= 6
         {
            oEquipmentItem = create(&Hammer);
         }
         else
         {
            oEquipmentItem = create(&Axe);
         }
      }
                  
      Send(self,@AddEquipmentObject,#what=oEquipmentItem);

      % base 20% chance to be a soldier type statue.
      if random(1,100) <= SOLDIER_PERCENT
         OR pbIsSoldier
      {
         pbIsSoldier = TRUE;

         % Armor
         iRandomNumber = random(1,10);

         if iRandomNumber <= 4
         {
            oEquipmentItem = create(&LeatherArmor);
         }
         else
         {
            if iRandomNumber <= 8
            {
               oEquipmentItem = create(&ChainArmor);
            }
            else
            {
               oEquipmentItem = create(&ScaleArmor);
            }
         }

         Send(self,@SetStatueArmor,#NewArmor=oEquipmentItem);

         % Helmet?
         if random(1,10) <= 5
         {
            HelmetHair = create(&SimpleHelm);
            Send(self,@AddEquipmentObject,#what=HelmetHair);
            poHair_Remove = HelmetHair;
         }

         % Gauntlets?
         if random(1,10) <= 5
         {
            oEquipmentItem = create(&Gauntlet);
            plUsing = Cons(oEquipmentItem,plUsing);
            if viGender = GENDER_MALE
            {
               prRight_arm = LivingStatue_rightarm_gauntlet_male;
               prLeft_arm = LivingStatue_leftarm_gauntlet_male;
            }
            else
            {
               prRight_arm = LivingStatue_rightarm_gauntlet_female;
               prLeft_arm = LivingStatue_leftarm_gauntlet_female;
            }
         }

         % Shield?
         if random(1,10) <= 8
         {
            pbHasShield = TRUE;
            iRandomNumber = random(1,100);

            if iRandomNumber <= 40
            {
               oEquipmentItem = Create(&MetalShield);
            }
            else
            {
               if iRandomNumber <= 80
               {
                  oEquipmentItem = Create(&GoldShield);
               }
               else
               {
                  oEquipmentItem = Create(&KnightShield);
               }
            }

            Send(self,@AddEquipmentObject,#what=oEquipmentItem);
         }
      }

      return;
   }
   
   MonsterAttack(what = $)
   {
      % add in any attack animation calls
      Send(self,@DoSlash);
      
      return;
   }

   DoSlash()
   {
      piAnimation = PANM_WEAPON_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   SendMoveAnimation()
   {
      % use standing torso
      AddPacket(1,ANIMATE_NONE, 2,1);
      
      return;
   }

   SendAnimation()
   {
      % All new data
      if piAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE, 4,300, 2,2, 2,4, 2,1);

         return;
      }
      
      propagate;
   }

   SendMoveOverlays()
   {
      local i, iOverlays, hotspot, iLeft_group, iRight_group;

      % Player has 7 standard overlays: right arm, left arm, legs, head,
      %  eyes, mouth, nose      
      iOverlays = 7;
      
      if poHair_remove = $
      {
         iOverlays = iOverlays + 1;
      }

      iLeft_group = 1;
      iRight_group = 1;

      for i in plOverlays
      {
         % Bows can have more than 1.
         iOverlays = iOverlays + Send(i,@GetNumberOverlays);
         hotspot = Send(i,@GetOverlayHotspot);
         if hotspot = HS_RIGHT_WEAPON
         {
            iRight_group = 17;
         }
         else
         {
            if hotspot = HS_LEFT_WEAPON or hotspot = HS_BOTTOM_BOW
            % it's really a shield, not weapon
            {
               iLeft_group = 7;
            }
         }
      }
      
      AddPacket(1,iOverlays);
      AddPacket(4,prLeft_arm, 1,HS_LEFT_HAND);
      
      if iLeft_group = 1
      {
         AddPacket(1,ANIMATE_CYCLE, 4,200, 2,2, 2,3);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,iLeft_group); 
      }

      AddPacket(4,prRight_arm, 1,HS_RIGHT_HAND);
      
      if iRight_group = 1
      {
         Addpacket(1,ANIMATE_CYCLE, 4,200, 2,2, 2,3);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,iRight_group); 
      }

      AddPacket(4,prLegs, 1,HS_LEGS, 1,ANIMATE_CYCLE, 4,100, 2,2, 2,5);

      AddPacket(4,prHead, 1,HS_HEAD, 1,ANIMATE_NONE, 2,1);        
      
      AddPacket(4,prMouth, 1,HS_MOUTH, 1,ANIMATE_NONE, 2,NO_ACTION);
      AddPacket(4,prEyes, 1,HS_EYES, 1,ANIMATE_NONE, 2,NO_ACTION);
      AddPacket(4,prNose, 1,HS_NOSE, 1,ANIMATE_NONE, 2,1);

      if poHair_remove = $
      {  
         AddPacket(4,prToupee, 1,HS_TOUPEE);   
         AddPacket(1,ANIMATE_NONE, 2,1);
      }

      for i in plOverlays
      {
         Send(i,@SendOverlayInformation,#iAnimation=$);
      }

      return;
   }

   SendOverlays()
   {
      local i, iOverlays, hotspot, iLeft_group, iRight_group;

      % Send overlay bitmap info to user.  

      % Player has 7 standard overlays: right arm, left arm, legs, head,
      %  eyes, mouth, nose
      iOverlays = 7;
      
      if poHair_remove = $
      {
         iOverlays = iOverlays + 1;
      }
      
      % Overlay info -- display correct group for animation & action

      iLeft_group = 1;
      iRight_group = 1;

      for i in plOverlays
      {
         % Bows can have more than 1.
         iOverlays = iOverlays + Send(i,@GetNumberOverlays,
                                      #iAnimation=piAnimation); 
         hotspot = Send(i,@GetOverlayHotspot);
         if hotspot = HS_RIGHT_WEAPON
         {
            iRight_group = 17;
         }
         else
         {
            if hotspot = HS_LEFT_WEAPON or hotspot = HS_BOTTOM_BOW
            % it's really a shield, not weapon 
            {
               iLeft_group = 7;
            }
         }
      }

      AddPacket(1, iOverlays);

      AddPacket(4,prLeft_arm,1,HS_LEFT_HAND);

      if piAnimation = ANIM_CAST
      {
         AddPacket(1,ANIMATE_ONCE, 4,300, 2,8, 2,8, 2,iLeft_group);
      }
      else
      {
         if piAnimation = PANM_WEAPON_ATTACK
         {
            AddPacket(1,ANIMATE_ONCE, 4,300, 2,4, 2,6, 2,iLeft_group);
         }
         else
         {
            AddPacket(1,ANIMATE_NONE, 2,iLeft_group);
         }
      }

      AddPacket(4,prRight_arm,1,HS_RIGHT_HAND);

      if piAnimation = ANIM_NONE
      { 
         AddPacket(1,ANIMATE_NONE, 2,iRight_group); 
      }

      if piAnimation = ANIM_CAST
      {
         AddPacket(1,ANIMATE_ONCE, 4,300, 2,11, 2,11, 2,iRight_group);
      }

      if piAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE, 4,300, 2,4, 2,6, 2,17);
      }

      AddPacket(4,prLegs,1,HS_LEGS);
      
      if piAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE, 4,900, 2,6, 2,6, 2,1);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE, 2,1);
      }
  
      AddPacket(4,prHead, 1,HS_HEAD, 1,ANIMATE_NONE, 2,1); 
      
      AddPacket(4,prMouth, 1,HS_MOUTH, 1,ANIMATE_NONE, 2,NO_ACTION);
      AddPacket(4,prEyes, 1,HS_EYES, 1,ANIMATE_NONE, 2,NO_ACTION);
      AddPacket(4,prNose, 1,HS_NOSE, 1,ANIMATE_NONE, 2,1);
      
      if poHair_remove = $
      {  
         AddPacket(4,prToupee, 1,HS_TOUPEE);
         AddPacket(1,ANIMATE_NONE, 2,1); 
      }
      
      for i in plOverlays
      {
         Send(i,@SendOverlayInformation,#iAnimation=piAnimation);
      }
      
      return;
   }

   SetStatueArmor(NewArmor = $)
   {
      vrIcon = Send(NewArmor,@GetShirtIcon,#who=self);
      plUsing = cons(NewArmor, plUsing);

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   AddEquipmentObject(what = $)
   "Adds Overlay to list if not duplicated."
   {
      local i;

      for i in plOverlays
      {
         if i = what
         {
            return;
         }
      }

      plUsing = Cons(what,plUsing);
      plOverlays = Cons(what,plOverlays);

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   % Override from monster superclass
   CreateDeadBody(killer=$)
   {
      return Create(&DeadBody,#icon=vrDead_Icon,#name=vrDead_Name,
                    #playername=Send(killer,@GetTrueName),#mob=TRUE,
                    #monstername=LivingStatue_name_rsc,
                    #PlayerBodyOverlay=vrDead_Legs,#DrawFX=viDead_drawfx);
   }

   CreateTreasure(who=$,corpse=$)
   {
      local i,iGen_items,oTreasure,oTreasure_type;

      % Soldiers have a small chance to drop a rose as treasure.
      if pbIsSoldier AND random(0,100) = 59
      {
         oTreasure = Create(&Rose,#corpse=corpse);

         if Send(poOwner,@ReqNewHold,#what=oTreasure,#new_row=piRow,#new_col=piCol)
            AND Send(poOwner,@ReqSomethingMoved,#what=oTreasure,
                     #new_row=piRow,#new_col=piCol)
         {
            Send(poOwner,@NewHold,#what=oTreasure,
                 #new_row=piRow,#new_col=piCol);
            Send(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
                 #string=LivingStatue_rose_drop);
         }
         else
         {
            Send(oTreasure,@Delete);
         }
      }

      propagate;
   }

   IsAlly(target = $, regroup = FALSE)
   {
      local iFaction;

      if IsClass(target,GetClass(self))
      {
         return TRUE;
      }
      
      propagate;
   }

   CanMorphTo() 
   {
      return FALSE;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
