% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
OrcPitBoss is Monster

constants:

   include blakston.khd

   FRAME_STAND = 1
   FRAME_WALK_START = 2
   FRAME_WALK_END = 6
   FRAME_ATTACK_START = 7
   FRAME_ATTACK_END = 12
   ANIMSPEED_WALK = 125
   ANIMSPEED_ATTACK = 125

resources:

   OrcPitBoss_koc_name_rsc = "koutom"
   OrcPitBoss_name_rsc = "orc pit boss"
   OrcPitBoss_icon_rsc = OrcPitB.bgf
   OrcPitBoss_desc_rsc = \
	"In order to gain the ominous title and station of Pit Boss, "
	"this orc had to battle and slay over one hundred other of its "
	"kind.  In the caves, there is no more formidable warrior, "
	"determined leader or grisly adversary than the horrendous Pit Bosses."  

   OrcPitBoss_dead_icon_rsc = OrcPitbX.bgf
   OrcPitBoss_dead_name_rsc = "dead orc pit boss"

   OrcPitBoss_sound_hit = orc_atkh.wav
   OrcPitBoss_sound_miss = orc_atkm.wav
   OrcPitBoss_sound_death = por_dth.wav
   OrcPitBoss_sound_aware = por_awr.wav


classvars:

   viIndefinite = ARTICLE_AN
   vrKocName = OrcPitBoss_koc_name_rsc
   vrName = OrcPitBoss_name_rsc
   vrIcon = OrcPitBoss_icon_rsc
   vrDesc = OrcPitBoss_desc_rsc
   vrDead_icon = OrcPitBoss_dead_icon_rsc
   vrDead_name = OrcPitBoss_dead_name_rsc

   viTreasure_type = TID_ORC_CHIEF

   viSpeed = SPEED_FAST
   viAttack_type = ATCK_WEAP_SLASH
   viAttributes = 0
   viLevel = 115
   viDifficulty = 7
   viKarma = -90
   viDefault_behavior = AI_FIGHT_AGGRESSIVE | AI_FIGHT_HYPERAGGRESSIVE | AI_FIGHT_SWITCHALOT


   viWimpy = 0

   vrSound_hit = OrcPitBoss_sound_hit
   vrSound_miss = OrcPitBoss_sound_miss
   vrSound_aware = OrcPitBoss_sound_aware
   vrSound_death = OrcPitBoss_sound_death

properties:

   piAnimation = ANIM_NONE
   pbFirstAttack = TRUE
   ptSecondAttack = $

messages:


   Constructed()
   {
      plResistances = [ [ 40, -ATCK_SPELL_ALL ],
			[ 40, -ATCK_SPELL_UNHOLY ],
                        [ 40, ATCK_WEAP_PIERCE ],
                        [ 20, ATCK_WEAP_SLASH ],
			[ -25, ATCK_WEAP_MAGIC ],
                        [ -50, -ATCK_SPELL_HOLY ] ];
      propagate;
   }

   % Used for defense messages
   GetParryAbility(stroke_obj=$)
   {
      if (stroke_obj <> $) and not Send(stroke_obj,@CanParry)
      {
         return 0;
      }
      return (viDifficulty*10);
   }

   MonsterAttack(what = $)
   {
      if (not pbFirstAttack)
      {
         Send(self,@DoSlash);
         pbFirstAttack = TRUE;
      }
      else
      {
         pbFirstAttack = FALSE;
         if ptSecondAttack = $
         {
            ptSecondAttack = CreateTimer(self,@SecondAttackTimer,400);   %% this code executes the attack twice,
	 		                                                                %% but only does the animation once.
         }
      }
      return;
   }
   
   
   SecondAttackTimer()
   {
      if pbFirstAttack
      {  return;  }

      ptSecondAttack = $;
      if poTarget <> $ and send(self,@getowner) = send(poTarget,@getowner)
      {  Send(self,@tryAttack,#what=poTarget); }      
      return;
   }

   DoSlash()
   {
      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;
      
      return;
   }

   SendLookAnimation()
   {     
      %% Walk animation
      AddPacket(1,ANIMATE_CYCLE,4,ANIMSPEED_WALK,2,FRAME_WALK_START,2,FRAME_WALK_END);

      return;
   }

   SendMoveAnimation()
   {
      % Make it look like OrcPitBoss is walking
      % Cycle through "walking" bitmaps (groups 2-6) at 50 ms per frame
      AddPacket(1,ANIMATE_CYCLE,4,ANIMSPEED_WALK,2,FRAME_WALK_START,2,FRAME_WALK_END);

      return;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_ATTACK
      {
	 AddPacket(1,ANIMATE_ONCE,4,ANIMSPEED_ATTACK,2,FRAME_ATTACK_START,2,FRAME_ATTACK_END,2,FRAME_STAND);
	 return;
      } 
      %% if no body animation.     
      propagate;
   }

   Delete()
   {
      if ptSecondAttack <> $
      {
	 deletetimer(ptSecondAttack);
	 ptSecondAttack = $;
      }
      propagate;
   }

   ReqMonsterMove(new_row = $,new_col = $)
   "Called by monster moving code to check if we really want to go"
   "to <new_row>,<new_col>."
   {
      
      if (new_row > send(poOwner,@GetRoomRows)) or (new_row < 1) or
            (new_col > send(poOwner,@GetRoomCols)) or (new_col < 1)
      { return FALSE; }
      return True;
   }

   CreateDeadBody(killer=$)
   {
      local oBody;
      oBody = Create(&OrcPitBossBody);
      
      return oBody;			   
   }

   DMCanArmageddon()
   {
      return FALSE;
   }
   
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
