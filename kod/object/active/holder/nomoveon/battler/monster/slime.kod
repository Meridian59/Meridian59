% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Slime is Monster

constants:

   include blakston.khd
   
   % Chance (1 in this many) to cast reflection.
   SPELL_CHANCE = 10

resources:

   slime_koc_name_rsc = "kinachot"
   slime_name_rsc = "slime"
   slime_icon_rsc = amoeba.bgf
   slime_desc_rsc = \
   "A mass of quivering goo, the slime inches forward "
   "leaving a sickly trail behind.  The remains of its last "
   "victim are visible within its transparent innards."

   slime_dead_icon_rsc = amoebaX.bgf
   slime_dead_name_rsc = "dead slime"

   slime_sound_hit = slm_atkh.wav
   slime_sound_miss = slm_atkm.wav
   slime_sound_death = slm_dth.wav
   slime_sound_aware = slm_awr.wav

classvars:

   vrKocName = slime_koc_name_rsc
   vrName = slime_name_rsc
   vrIcon = slime_icon_rsc
   vrDesc = slime_desc_rsc
   vrDead_icon = slime_dead_icon_rsc
   vrDead_name = slime_dead_name_rsc

   viTreasure_type = TID_WIMPY_MEDIUM
   viSpeed = SPEED_SLOW
   viAttack_spells = ATCK_SPELL_ACID
   viAttributes = 0
   viLevel = 50
   viDifficulty = 4
   viKarma = 0
   viDefault_behavior = AI_FIGHT_AGGRESSIVE | AI_FIGHT_SINGLEMINDED

   vrSound_hit = slime_sound_hit
   vrSound_miss = slime_sound_miss
   vrSound_aware = slime_sound_aware
   vrSound_death = slime_sound_death
   viDead_drawfx = DRAWFX_TRANSLUCENT_75
		   
properties:

   piAnimation = ANIM_NONE
   piDrawfx = DRAWFX_TRANSLUCENT_75
   
   plSummoned = $
	      
messages:

   Delete()
   {
      local oEachObj;

      for oEachObj in plSummoned
      {
         Send(oEachObj,@Delete,#bMonsterReport=FALSE);
      }

      plSummoned = $;

      propagate;
   }

   Constructed()
   {
      plResistances = [ [ 45, -ATCK_SPELL_SHOCK ],
                        [ 45, -ATCK_SPELL_UNHOLY ],
                        [ 45, -ATCK_SPELL_HOLY ],
                        [ 45, -ATCK_SPELL_ACID ],
                        [ 45, ATCK_WEAP_ALL ],
						[ 10, ATCK_WEAP_BLUDGEON ],
                        [-25, -ATCK_SPELL_COLD ] ];
      propagate;
   }
   MonsterAttack(what = $)
   {
      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;
      
      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE);
      AddPacket(4,400,2,2,2,5);

      return;
   }

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,180,2,4,2,5);

      return;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_ATTACK
      {
	 AddPacket(1,ANIMATE_ONCE,4,200,2,2,2,4,2,1);
	 return;
      }

      % if no body animation
      
      propagate;
   }
   
   MonsterCastSpell()
   {
	  local iRandom;
   
      iRandom = Send(self,@AdjustedChanceBase,#base=SPELL_CHANCE);
      if Random(1,iRandom) = 1
	  {
		  Send(self,@CreateReflection,#target=self);
		  return TRUE;
	  }
   
	  return FALSE;
   }
   
   % This summons a reflection type monster.
   CreateReflection(target = $)
   {
      local oRoom, iRow, iCol, oReflection;

      oRoom = Send(target,@GetOwner);

      % Check the summon limit restrictions
      if Send(oRoom,@CountHoldingHowMany,#class=&monster) > 25
         OR Send(oRoom,@CountHoldingHowMany,#class=&EvilTwin) > 10
         OR Send(oRoom,@CountHoldingHowMany,#class=&Reflection) > 10
         OR Send(oRoom,@CountHoldingSummoned)
            > Send(Send(SYS, @GetSettings), @GetPlayerSummonedObjectLimit)
      {
         return FALSE;
      }

      if target = self
      {
         oReflection = Create(&Reflection,#iSpellpower=100,#oMaster=self);  
      }
	  
      iRow = Send(target,@GetRow);
      iCol = Send(target,@GetCol);
	  
      Send(oReflection,@SetOriginal,#who=target);
      
      if NOT Send(oRoom,@ReqNewHold,#what=oReflection,#new_row=iRow,#new_col=iCol)
      {
         Send(oReflection,@Delete);

         return FALSE;
      }

      Send(oRoom,@NewHold,#what=oReflection,#new_row=iRow,#new_col=iCol);
      Send(SYS,@AddReflection,#who=target,#oReflection=oReflection);
      plSummoned = cons(oReflection,plSummoned);
   
      return TRUE;
	}
	
   SummonDeleted(what=$)
   {
      plSummoned = DelListElem(plSummoned,what);

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
