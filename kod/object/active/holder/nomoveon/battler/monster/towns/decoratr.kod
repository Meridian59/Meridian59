% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Decorator is Towns

constants:

   include blakston.khd
   include protocol.khd

   TOPIC_NONE = 0
   TOPIC_FLOOR = 1
   TOPIC_BED_LOCATION = 2
   TOPIC_BEDSPREAD = 3
   TOPIC_WALLPAPER = 4
   TOPIC_PAINTING = 5
   TOPIC_PAINTING_LOCATION = 6
   TOPIC_PLACE_OBJECT = 7
   TOPIC_REMOVE_OBJECT = 8

   TOPIC_TIMEOUT = 40000         % in milliseconds: 40 sec

   PRICE_TIER_1 = 100            % in shillings
   PRICE_TIER_2 = 300
   PRICE_TIER_3 = 500

   BOX_PREMIUM = 4500            % How much more expensive than tier 3 is the box?

   IMPATIENT_TIME = 120000       % in milliseconds: 2 min

   DELETE_WAIT = 750             % Time before the consultant leaves.

resources:

   Decorator_name_rsc = "interior design consultant"
   Decorator_icon_rsc = faerie-g.bgf
   Decorator_desc_rsc = "A refugee from the bitter war over the Vale of Sorrows, "
      "this Fey Elhai has abandoned the complicated societal strictures of the "
      "Fey to dwell amongst humans and employ its connection to the sublime in "
      "a more creative fashion."

   Decorator_welcome = "Greetings.  Is there anything I can ~Ihelp~I you with?"

   Decorator_confused = "I'm sorry, can you state your request more simply?"
   Decorator_room_changed = "An excellent choice!"
   Decorator_topic_timeout = \
      "I see you have not reached a decision yet.  Can I help you with something else?"

   Decorator_bed_instructions = "Please stand where you'd like the bed, and say 'here'."
   Decorator_painting_instructions = \
      "Please stand near where you'd like the painting and say 'here'.  I can only "
      "hang it in four different spots, but I'll do my best to fit your needs."
   Decorator_object_placement = "Please stand where you'd like the object and say 'here'."
   Decorator_object_removal = "Please stand nearer the object you'd like removed."

   Decorator_bed_blocked = \
      "I'm sorry, if you would like the bed there we'll need to clear some room first."
   Decorator_no_object_stacking = \
      "I'm sorry, there is no room to place anything there.  If you're set on "
      "that spot, let's clear some room first."

   Decorator_help = \
      "I am here to assist you in decorating your room to your taste.  I can ~Ichange~I "
      "the carpet or wallpaper for you, help you ~Imove~I the bed, ~Ichange~I the "
      "bedspread, or even ~Iplace~I a painting in the location of your choice.  Also, "
      "we have a number of objects you can place around the room or remove later.  I "
      "can ~Ilist objects~I for all the available objects if you're interested.  "
      "Finally, I can ~Ilighten~I or ~Idarken~I the room to meet your needs.  Of "
      "course, most customizations to your room expends magical resources, so we'll "
      "have to bill you at the time the change is made.  I can provide further details "
      "about our ~Ipricing~I system if you like."

   Decorator_pricing = \
      "The pricing structure has four levels of cost.  Changing the light level is "
      "a simple change and therefore costs nothing.  Moving the bed, changing the "
      "bedspread, moving the painting, or changing the painting are the least "
      "expensive options.  Changing the wallpaper or carpeting is more expensive due "
      "to the effort required.  Finally, placing objects in the room is the most "
      "expensive option, as the demand for decorations is very high and we only "
      "have a limited number of objects.  However, if you decide to remove objects "
      "from the room, you earn credits for shillings spent, which can be applied "
      "to future room modifications.  Feel free to ask me for your credit balance "
      "at any time."

   Decorator_cant_pay = \
      "I'm afraid you don't have enough resources to pay for that room modification."
   Decorator_credit_balance = "Your credit balance is currently %q shillings."
   Decorator_option_unavailable = \
      "I'm sorry, That's not possible right now.  Would you like a different option?"
   Decorator_graceful_exit = \
      "Ah, I understand.  If you need anything else, please ring the bell."

   Decorator_list_objects = "You may choose from the following decorative objects: %q."

   Decorator_takes_heartstones = \
      "You know, heartstones can be made into some interesting items."

   Decorator_impatient_1 = "Is there anything I can ~Ihelp~I you with?"
   Decorator_impatient_2 = \
      "Is there anything I can ~Ihelp~I you with?  If not, I must return to other duties."
   Decorator_impatient_3 = \
      "I'm afraid I must attend to the needs of other guests at this time.  "
      "Please ring the bell again if you have need of further assistance."

   % Command strings
   Decorator_command_help = "help"
   Decorator_command_pricing = "pricing"
   Decorator_command_price = "price"
   Decorator_command_credit = "credit"
   Decorator_command_balance = "balance"
   Decorator_command_list = "list"
   Decorator_command_object = "object"
   Decorator_command_item = "item"
   Decorator_command_decorator = "decorator"
   Decorator_command_consultant = "consultant"
   Decorator_command_leave = "leave"
   Decorator_command_change = "change"
   Decorator_command_move = "move"
   Decorator_command_remove = "remove"
   Decorator_command_location = "location"
   Decorator_command_place = "place"
   Decorator_command_put = "put"
   Decorator_command_floor = "floor"
   Decorator_command_carpet = "carpet"
   Decorator_command_bed = "bed"
   Decorator_command_wall = "wall"
   Decorator_command_painting = "painting"
   Decorator_command_picture = "picture"
   Decorator_command_lighten = "lighten"
   Decorator_command_darken = "darken"

classvars:

   vrName = Decorator_name_rsc
   vrIcon = Decorator_icon_rsc
   vrDesc = Decorator_desc_rsc
   viMerchant_markup = MERCHANT_EXPENSIVE
   viAttributes = MOB_NOFIGHT | MOB_RANDOM | MOB_NOMOVE | MOB_LISTEN | MOB_RECEIVE | MOB_SELLER
   viOccupation = MOB_ROLE_SCHOLAR
   viDefinite = ARTICLE_THE

properties:

   piDrawfx = BOUNCE_YES

   piDialogTopic = TOPIC_NONE
   ptDialogTopicTimeout = $
   poCurrentObject = $

   ptImpatient = $
   piImpatient = 0

messages:

   Constructor()
   {
       plWantedItems = [&HeartStone];
       
       propagate;
   }   

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE, 4,100, 2,3, 2,4);
      
      return;
   }

   SendAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE, 4,100, 2,1, 2,2);   
      
      return;
   }

   GetObjectFlags()
   {
      return BOUNCE_YES | OFFER_YES;
   }

   CanMorphTo()
   {
      return FALSE;
   }

   %  SomeoneSaid()::
   %     Here is where we provide the interface for room customization
   %
   %  The philosophy here is that there are two tiers of dialog:
   %        The first sets the 'topic' or state of the dialog
   %        The second defines the action.
   %  The routine is designed to allow
   %        A topic - prompt - answer structure
   %           (e.g. player: "please change the wallpaper"
   %                 npc: "would you like red, yellow, or chartreuse wallpaper?"
   %                 player: "chartreuse would be fabulous, thanks."
   %                 npc: "an excellent choice!")
   %        A single command which establishes all the info at once.
   %           (e.g. player: "please change the wallpaper to chartreuse, if you would."
   %                 npc: "an excellent choice!")
   %
   SomeoneSaid(what = $,type = $,string = $)
   {
      local bChange, bMove, bPlace, bFloor, bRemove, bBed, bWall, bPainting, oObject, bClarify, bSuccess, iPrice;
      
      if poOwner = $ OR NOT isClass(poOwner,&RentableRoom)
      {
         propagate;
      }
      
      if (NOT isClass(what,&User)) OR what <> Send(poOwner,@GetRenter)
      {
         propagate;
      }

      % First, respond to special commands.

      if StringContain(string, Decorator_command_help)
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_help);

         return;
      }
      
      if (StringContain(string, Decorator_command_pricing)
          OR StringContain(string, Decorator_command_price))
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_pricing);

         return;
      }
      
      if (StringContain(string, Decorator_command_credit)
          OR StringContain(string, Decorator_command_balance))
      {
         Post(self,@DecoratorSayCredit);

         return;
      }
      
      if (StringContain(string, Decorator_command_list)
          AND (StringContain(string, Decorator_command_object) OR StringContain(string,Decorator_command_item)))
      {
         Post(self,@DecoratorSayObjects,#what=what);

         return;
      }

      if ((StringContain(string, Decorator_command_decorator) OR StringContain(string,Decorator_command_consultant))
         AND StringContain(string,Decorator_command_leave))
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_graceful_exit);
         Post(self,@WaitDelete);

         return;
      }

      % Second, check for lighting changes

      if StringContain(string, Decorator_command_lighten)
      {
         % Positive change to light level
         Post(poOwner,@ChangeRoomLight,#iChange=1);
         
         return;
      }

      if StringContain(string, Decorator_command_darken)
      {
         % Negative change to light level
         Post(poOwner,@ChangeRoomLight,#iChange=-1);
         
         return;
      }

      % Next, extract the 'topic' keywords, check for multiples.

      bChange = StringContain(string, Decorator_command_change);
      bRemove = StringContain(string, Decorator_command_remove);
      bMove = ((StringContain(string, Decorator_command_move) AND NOT bRemove)
                OR StringContain(string, Decorator_command_location));
      bPlace = (StringContain(string, Decorator_command_place)
                OR StringContain(string, Decorator_command_put));
      bClarify = FALSE;
      
      if (bChange + bMove + bPlace + bRemove) > 1
      {
         % Ambiguous command, so ignore both keywords but proceed to give reminder
         %  messages, if any.
         bChange = FALSE;
         bMove = FALSE;
         bPlace = FALSE;
         bRemove = FALSE;
         poCurrentObject = $;
         bClarify = TRUE;
      }
      
      bFloor = (StringContain(string, Decorator_command_floor)
                OR StringContain(string,Decorator_command_carpet));
      bBed = StringContain(string, Decorator_command_bed);
      bWall = StringContain(string, Decorator_command_wall);
      bPainting = (StringContain(string, Decorator_command_painting)
                   OR StringContain(string, Decorator_command_picture));
      oObject = Send(poOwner,@ParseObject,#string=string,#who=what,#oDecorator=self);

      if (bFloor + bBed + bWall + bPainting + (oObject <> $)) > 1
      {
         % Ambiguous command, so ignore multiple keywords but proceed to give reminder
         %  messages, if any.
         bFloor = FALSE;
         bBed = FALSE;
         bWall = FALSE;
         bPainting = FALSE;
         oObject = $;
         poCurrentObject = $;
         bClarify = TRUE;
      }
      
      if bClarify
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_confused);
      }
      
      if bChange AND bFloor
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_FLOOR);
      }
      
      if bMove AND bBed
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_BED_LOCATION);
      }
      
      if bChange AND bBed
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_BEDSPREAD);
      }
      
      if bChange AND bWall
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_WALLPAPER);
      }
      
      if (not bMove) AND bPainting
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_PAINTING);
      }
      
      if bMove AND bPainting
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_PAINTING_LOCATION);
      }
      
      if bPlace AND (oObject <> $)
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_PLACE_OBJECT);
         poCurrentObject = oObject;
      }
      
      if bRemove AND (oObject <> $)
      {
         Send(self,@SetDialogTopic,#topic=TOPIC_REMOVE_OBJECT);
         poCurrentObject = oObject;
      }

      % A note on how the "TrySet*" fuctions work.
      % Return values:
      % TRUE means we could change it.
      % FALSE means that is not available
      % $ means we need more information
      % -> Exception is BedSector. 
      
      if piDialogTopic = TOPIC_FLOOR
      {
         iPrice = PRICE_TIER_2;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetCarpet,#string=string);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Send(poOwner,@GetCarpetOptions));
            }
            else
            {
               if bSuccess
               {
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }
      
      if piDialogTopic = TOPIC_BED_LOCATION
      {
         iPrice = PRICE_TIER_1;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetBedSector,#who=what,#string=string,
                            #oDecorator=self);
            if bSuccess 
            {
               Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
               Send(self,@BillRenter,#who=what,#price=iPrice);
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Decorator_room_changed);
            }
            else
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Decorator_bed_instructions);
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }
      
      if piDialogTopic = TOPIC_BEDSPREAD
      {
         iPrice = PRICE_TIER_1;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetBedSpread,#string=string);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Send(poOwner,@GetBedSpreadOptions));
            }
            else
            {
               if bSuccess
               {
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }
      
      if piDialogTopic = TOPIC_WALLPAPER
      {
         iPrice = PRICE_TIER_2;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetWallpaper,#string=string);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Send(poOwner,@GetWallpaperOptions));
            }
            else
            {
               if bSuccess
               {
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                     #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         return;
      }
      
      if piDialogTopic = TOPIC_PAINTING
      {
         iPrice = PRICE_TIER_1;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetPicture,#string=string,#bRemove=bRemove);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Send(poOwner,@GetPictureOptions));
            }
            else
            {
               if bSuccess
               {
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }

      if piDialogTopic = TOPIC_PAINTING_LOCATION
      {
         iPrice = PRICE_TIER_1;
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TrySetPictureLocation,#who=what,#string=string);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Decorator_painting_instructions);
            }
            else
            {
               if bSuccess
               {
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }
      
      if piDialogTopic = TOPIC_PLACE_OBJECT
      {
         iPrice = PRICE_TIER_3;
         if IsClass(poCurrentObject,&Box)
         {
            iPrice = iPrice + BOX_PREMIUM;
         }
         
         if Send(self,@RenterCanPay,#who=what,#price=iPrice)
         {
            bSuccess = Send(poOwner,@TryPlaceObject,#who=what,#string=string,
                            #template=poCurrentObject,#oDecorator=self);
            if bSuccess = $
            {
               Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                    #string=Decorator_object_placement);
            }
            else
            {
               if bSuccess
               {
                  Send(poOwner,@UpdateHeartStones,#oItem=poCurrentObject);
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
                  Send(self,@BillRenter,#who=what,#price=iPrice);
                  poCurrentObject = $;
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_room_changed);
               }
               else
               {
                  Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                       #string=Decorator_option_unavailable);
                  Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
               }
            }
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_cant_pay);
            Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         }
         
         return;
      }

      if piDialogTopic = TOPIC_REMOVE_OBJECT
      {
         iPrice = PRICE_TIER_3;
         
         if IsClass(poCurrentObject,&Box)
         {
            iPrice = iPrice + BOX_PREMIUM;
         }
         
         bSuccess = Send(poOwner,@TryRemoveObject,#who=what,#template=poCurrentObject);
         
         if bSuccess
         {
            Send(self,@CreditRenter,#price=iPrice);
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_room_changed);
         }
         else
         {
            Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_object_removal);
         }
         
         Send(self,@SetDialogTopic,#topic=TOPIC_NONE);
         poCurrentObject = $;
         
         return;
      }
      
      propagate;
   }

   % These next two messages are to prevent confusion in the temp string between what the designer says
   % and what the player says.  There was problem fighting for control of the temp string.
   DecoratorSayCredit()
   {
      Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
           #string=Decorator_credit_balance,#parm1=Send(SYS,@IntToString,
           #num=Send(poOwner,@GetCreditBalance)),#type1=STRING_RESOURCE);
           
      return;
   }

   DecoratorSayObjects(what=$)
   {
      Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
           #string=Decorator_list_objects,
           #parm1=Send(poOwner,@GetObjectList,#who=what,#oDecorator=self),
           #type1=STRING_RESOURCE);
           
      return;
   }   

   SetDialogTopic(topic=TOPIC_NONE)
   {
      piDialogTopic = topic;
      
      if ptDialogTopicTimeout <> $
      {
         DeleteTimer(ptDialogTopicTimeout);
         ptDialogTopicTimeout = $;
      }
      
      if topic <> TOPIC_NONE
      {
         ptDialogTopicTimeout = CreateTimer(self,@DialogTopicTimeout,TOPIC_TIMEOUT);
      }
      
      Send(self,@ResetImpatience);
      
      return;
   }

   DialogTopicTimeout()
   {
      ptDialogTopicTimeout = $;
      piDialogTopic = TOPIC_NONE;
      poCurrentObject = $;
      
      Send(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
           #string=Decorator_topic_timeout);
      
      return;
   }

   SendBedBlockedMessage(who=$)
   {
      if who <> $
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
              #string=Decorator_bed_blocked);
      }
      
      return;
   }

   SendNoObjectStacking(who=$)
   {
      if who <> $
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
              #string=Decorator_no_object_stacking);
      }
      
      return;
   }

   RenterCanPay(who=$,price=PRICE_TIER_3)
   {
      local iCredit, oMoney, iMoneyValue;
      
      if who = $
      {
         return FALSE;
      }
      
      iCredit = Send(poOwner,@GetCreditBalance);
      oMoney = Send(who,@GetMoneyObject);
      if oMoney <> $
      {
         iMoneyValue = Send(oMoney,@GetNumber);
      }
      else
      {
         iMoneyValue = 0;
      }
      
      if price <= (iCredit + iMoneyValue)
      {
         return TRUE;
      }
      
      return FALSE;
   }

   BillRenter(who=$,price=PRICE_TIER_3)
   {
      local iCredit, oMoney;

      iCredit = Send(poOwner,@GetCreditBalance);

      if iCredit > 0
      {
         if iCredit >= price
         {
            Send(poOwner,@DeductCredit,#amount=price);
            
            return;
         }
         
         Send(poOwner,@DeductCredit,#amount=iCredit);
         price = price - iCredit;
      }

      if who = $
      {
         DEBUG("BillRenter:: Billing no one!");

         return;
      }

      oMoney = Send(who,@GetMoneyObject);

      if Send(oMoney,@GetNumber) >= price
      {
         Send(oMoney,@SubtractNumber,#number=price);
      }
      else
      {
         DEBUG("BillRenter:: can't bill - not enough money - must not have called RenterCanPay");
      }
      
      return;
   }

   CreditRenter(price=PRICE_TIER_3)
   {
      Send(poOwner,@AddCredit,#amount=(price*8/10));
      
      return;
   }

   NewOwner(what = $)
   {
      Send(self,@ResetImpatience);
      
      if what <> $ AND IsClass(what,&RentableRoom)
      {
         Post(what,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_welcome);
      }
      
      propagate;
   }

   ResetImpatience()
   {
      if ptImpatient <> $
      {
         DeleteTimer(ptImpatient);
         ptImpatient = $;
      }
      
      ptImpatient = CreateTimer(self,@Impatient,IMPATIENT_TIME);
      piImpatient = 0;
      
      return;
   }

   Impatient()
   {
      ptImpatient = $;
      if piImpatient < 0
      {
         piImpatient = 0;
      }
      
      if (random(1,100) < 10) AND Send(Send(SYS,@GetNodeAttack),@GetAttacks)
      {
         % A chance to express an interest in heartstones.
         Send(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
              #string=Decorator_takes_heartstones);
      }
      else
      {
         piImpatient = (piImpatient + 1);
         
         if piImpatient = 1
         {
            Send(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_impatient_1);
         }
         
         if piImpatient = 2
         {
            Send(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_impatient_2);
         }
         
         if piImpatient >= 3
         {
            Send(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,
                 #string=Decorator_impatient_3);
            Post(self,@WaitDelete);
            
            return;
         }
      }
      
      ptImpatient = CreateTimer(self,@Impatient,IMPATIENT_TIME);
      
      return;
   }

   CanAcceptOffer()
   {
      return TRUE;
   }
   
   GotWantedItem(who=$, obj = 0)
   {
      local oPlayerObj, i, bGotAll;

      if not isClass(obj,&HeartStone)
      {
         return FALSE;
      }
      
      oPlayerObj = $;
      for i in Send(who,@GetHolderPassive)
      {
         if IsClass(i,GetClass(obj))
         {
            oPlayerObj = i;

            break;
         }
      }
      
      if oPlayerObj = $ 
      {
         debug("player offered unowned heartstone.");
         
         return FALSE;
      }

      If NOT Send(Send(SYS,@GetNodeAttack),@GetAttacks)
      {
         Post(poOwner,@SomeoneSaid,#type=SAY_RESOURCE,#what=self,#string=Decorator_takes_heartstones);
         
         return;
      }

      Send(poOwner,@AddHeartStone,#oStone=obj,#oDecorator=self);

      Send(obj,@Delete);
      
      return TRUE;
   }

   TryAddToQuestEngine()
   {
      return FALSE;
   }

   WaitDelete()
   {
      ptImpatient = CreateTimer(self,@WaitDeleteTimer,DELETE_WAIT);
      
      return;
   }

   WaitDeleteTimer()
   {
      ptImpatient = $;
      Post(self,@Delete);
      
      return;
   }

   Delete()
   {
      if ptDialogTopicTimeout <> $
      {
         DeleteTimer(ptDialogTopicTimeout);
         ptDialogTopicTimeout = $;
      }
      
      if ptImpatient <> $
      {
         DeleteTimer(ptImpatient);
         ptImpatient = $;
      }
      
      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

