% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ladypheonix is PassiveObject

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%This is a memorial statue of a meridian player    %%
%%who died.  Don't remove it, unless you want the   %%
%%players to get really, really pissed.             %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

constants:

   include blakston.khd
   include protocol.khd

   NORTH = 1
   SOUTH = 2
   POSE_PUNCH = 1
   POSE_NONE = 2
   POSE_CAST = 3   
   POSE_WEAPON_ATTACK = 4
   POSE_BOW_ATTACK = 5

   COLOR_BLUE = 1
   COLOR_GREEN = 2
   COLOR_YELLOW = 3


resources:
 
   ladypheonix_name_rsc = "LadyPhoenix"
   ladypheonix_desc_rsc = "A strange feeling comes over you as you "
                          "perceive that there is a force deep inside this statue.  "
                          "A soft, singing voice fills your senses. Her "
                          "eyes seem to follow you, taking careful notice of your "
                          "actions.   A feeling of well being and protection washes "
                          "over you, and you know that you can trust in her guidance."

   ladypheonix_Directions_rsc = "`kLadyPhoenix whispers,\"Now take %q"
   ladypheonix_not_in_range = "`kLadyPhoenix whispers something, but you are too far "
                              "away to hear it."

   ladypheonix_whispers = "~kLadyPhoenix whispers,\"The "
   ladypheonix_row_6 = "northernmost cloud "
   ladypheonix_row_7 = "second cloud from the north "
   ladypheonix_row_8 = "third cloud from the north "
   ladypheonix_row_9 = "center cloud "
   ladypheonix_row_10 = "third cloud from the south "
   ladypheonix_row_11 = "second cloud from the south "
   ladypheonix_row_12 = "southernmost cloud "
   ladyphoenix_no_further = "will not harm you, but go no further without my guidance.\""
   ladypheonix_step = "step "
   ladypheonix_steps = "steps "
   ladypheonix_south = "south "
   ladypheonix_north = "north "
   ladypheonix_step_forward = "then take a step forward.\""
   ladypheonix_protect_command = "protect"
   ladypheonix_wlll_protect = "~kLadyPhoenix whispers,\"I will protect you.\""
   ladypheonix_already_protecting = "~kLadyPhoenix whispers,\"I am already protecting another.\""

   ladyphoenix_leatherarmor_female_icon_rsc = bth.bgf
   ladyphoenix_barearm_rightarm_gauntlet_female =brj.bgf
   ladyphoenix_barearm_leftarm_gauntlet_female = blj.bgf
   ladyphoenix_pantsA_female_player_rsc = bfb.bgf

classvars:

   vrDirections = ladypheonix_Directions_rsc

properties:

   piDrawFX = DRAWFX_SECONDTRANS

   vrDesc = ladypheonix_desc_rsc
   vrName = ladypheonix_name_rsc
   vrIcon = ladyphoenix_leatherarmor_female_icon_rsc

   ptRepeatTimer =$

   poOriginal = $
   piPose = POSE_NONE
   piExpression = 1
   prToupee = charinfo_hair_dc_icon
   prEyes = charinfo_eyes_lx_icon
   prMouth = charinfo_mouth_lx_icon
   prNose = charinfo_nose_kx_icon
   prHead = charinfo_head_kx_icon
   prRight_arm = ladyphoenix_barearm_rightarm_gauntlet_female
   prLeft_arm = ladyphoenix_barearm_leftarm_gauntlet_female
   prLegs = ladyphoenix_pantsA_female_player_rsc

   prWeapon = $
   prShield = $
   prBowTop = $
   
   piIcon_frame = 1
   piLegs_frame = 1
   piLeft_frame = 1
   piRight_frame = 1
   piShield_frame = 1
   piWeapon_frame = 1

   piIcon_translation = 0
   piLegs_translation = 0
   piArms_translation = 0
   piWeapon_translation = 0
   piShield_translation = 0
   piSkin_translation = 3
   piHair_translation = PT_GRAY_TO_BGREEN

   piOverlays = 8
   piColor = 0
   piStartRow = $

messages:

   ReqNewOwner(what=$)
   {
      return isClass(what,&room);
   }

   StartRow(row=$)
   "Sets the initial safe row."
   {
      piStartRow = row;

      return;
   }
   
   NewSafeSpot(RunnerRow=$,SafeRow=$)
   "Tells the snitch where the runner should go."
   {
      local iSteps,iDirection; 

      if RunnerRow = SafeRow
      % Just stepping forward so no need to pass parameters to build directions.
      {
         send(self,@BuildDirections);
         send(self,@GiveDirections);

         return;
      }     

      iSteps = send(self,@GetSteps,#from=RunnerRow,#to=SafeRow);

      if ABS(iSteps) > iSteps
      {
         iDirection = SOUTH;
      }
      else
      {
         iDirection = NORTH;
      }

      send(self,@BuildDirections,#steps=ABS(iSteps),#Direction=iDirection);
      send(self,@GiveDirections);

      return;
   }

   GetSteps(from=$,to=$)
   "Calculate the number of steps for the runner.  If it's neg. we're going SOUTH, pos = NORTH"
   {
      local iSteps;

      iSteps = from - to;

      return iSteps;
   }

   BuildInitDirections()
   "Builds the direction for the first step into the maze."
   {
      cleartempstring();
      AppendTempString(ladypheonix_whispers);

      if piStartRow = 6
      {
         AppendTempString(ladypheonix_row_6);
      }

      if piStartRow = 7
      {
         AppendTempString(ladypheonix_row_7);
      }

      if piStartRow = 8
      {
         AppendTempString(ladypheonix_row_8);
      }

      if piStartRow = 9
      {
         AppendTempString(ladypheonix_row_9);
      }

      if piStartRow = 10
      {
         AppendTempString(ladypheonix_row_10);
      }

      if piStartRow = 11
      {
         AppendTempString(ladypheonix_row_11);
      } 

      if piStartRow = 12
      {
         AppendTempString(ladypheonix_row_12);
      } 

      AppendTempString(ladyphoenix_no_further);

      return;
   }

   BuildDirections(Steps=0,Direction=0)
   "Gives number of steps to travel."
   {
      Cleartempstring();

      send(SYS,@AppendCardinalToTempString,#number=steps);
      AppendTempString(" ");

      if Steps = 1
      {
         AppendTempString(ladypheonix_step);
      }
      else
      {
         AppendTempString(ladypheonix_steps);
      }

      if Direction = SOUTH
      {
         AppendTempString(ladypheonix_south);
      }

      if Direction = NORTH
      {
         AppendTempString(ladypheonix_north);
      }

      AppendTempString(ladypheonix_step_forward);

      return;
   }

   GiveDirections()
   {
      local i,lActive,oObject,oRoom;

      if poOwner = $  { return FALSE; }

      oRoom = send(self,@GetOwner);

      lActive = send(oRoom,@GetplActive);

      for i in lActive
      {  

         oObject = send(oRoom,@HolderExtractObject,#data=i);
         if isClass(oObject,&user)
         {
            if (abs((send(oObject,@getrow)-send(self,@getrow))) > 2
               or abs((send(oObject,@getcol)-send(self,@getcol))) > 2)
            {
               Send(oObject,@MsgSendUser,#message_rsc=ladypheonix_not_in_range);   
            }
            else
            {
               send(oObject,@MsgSendUser,#message_rsc=vrDirections,#parm1=getTempString(),#type1=0);
            }
         }
      }
            
      return;
   }

   SomeoneSaidLadyP(what = $,type = $,string = $)
   {
      if StringContain(string,ladypheonix_protect_command) AND StringContain(string,"LadyPhoenix")
      {
         if send(poOwner,@ReqSetRunner,#who=what)
         {
            clearTempString();
		      AppendTempString(ladypheonix_wlll_protect);
            send(what,@MsgSendUser,#message_rsc=send(SYS,@GetPercentQRsc),#parm1=getTempString(),#type1=0);
            send(self,@BuildInitDirections);
            send(what,@MsgSendUser,#message_rsc=send(SYS,@GetPercentQRsc),#parm1=getTempString(),#type1=0);
         }
         else
         {
            clearTempString();
		      AppendTempString(ladypheonix_already_protecting);
            send(what,@MsgSendUser,#message_rsc=send(SYS,@GetPercentQRsc),#parm1=getTempString(),#type1=0);
         }
      }

      return;
   }

   

   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   %%Stuff from statue for drawing %%
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   %%Straight cut and paste, could prolly be simplified at some point.

   ResetFrames(pose = $)
   {
      if Pose = POSE_PUNCH
      {	 
	      piIcon_frame = 4;
	      piLeft_frame = 6;
	      piRight_frame = 14;
	      piLegs_frame = 6; 
	      piOverlays = 8;
	      if prShield <> $
	      {
	         piShield_frame = 2;
	         piOverlays = piOverlays + 1;
	      }
      }

      if piPose = POSE_CAST
      {
	      piIcon_frame = 1;
	      piLeft_frame = 8;
	      piRight_frame = 11;
	      piLegs_frame = 1; 
	      piOverlays = 8;	 
      }

      if piPose = POSE_NONE
      {
	      piIcon_frame = 1;
	      piLeft_frame = 1;
	      piRight_frame = 1;
	      piLegs_frame = 1; 
	      piOverlays = 8;	 
	      if prShield <> $
	      {
	         piShield_frame = 2;
	         piLeft_frame = 7;
	         piOverlays = piOverlays + 1;
	      }
 	      if prWeapon <> $
	      {
	    
	         piWeapon_frame = 4;
	         if prBowTop <> $
	         {  
	            piWeapon_frame = 2;
	            piLeft_frame = 7;
	         }
	         else
	         {  piRight_frame = 17;  }
	      piOverlays = piOverlays + 1;
	      }
      }

      if piPose = POSE_WEAPON_ATTACK
      {

	      piIcon_frame = 3;
	      piLeft_frame = 5;
	      piRight_frame = 5;
	      piLegs_frame = 6; 
	      piOverlays = 9;	 
	      if prShield <> $
	      {
	         piShield_frame = 2;
	         piOverlays = piOverlays + 1;
	      }
	      piWeapon_frame = 2;
      }

      if piPose = POSE_BOW_ATTACK
      {
         piIcon_frame = 5;
         piLeft_frame = 9;
         piRight_frame = 16;
         piLegs_frame = 7; 
         piOverlays = 10;	 
         piWeapon_frame = 1;
      }

      return;
   }

   SendAnimation()
   {
      if (piIcon_translation) <> 0
      {
	      AddPacket(1,ANIMATE_TRANSLATION,1,piIcon_translation);
      }

      AddPacket(1,ANIMATE_NONE,2,piIcon_frame);

      return;
   }

   SendOverlays()
   {
      local iSkin_xlat;

      % Send overlay bitmap info to user.  

      % Player has 8 standard overlays: right arm, left arm, legs, head, eyes, 
      % mouth, nose, hair
      
      %% number of overlays
      AddPacket(1, piOverlays);

      %% left hand      
      AddPacket(4,prLeft_arm,1,HS_LEFT_HAND);
      if piArms_translation <> 0
      {  AddPacket(1,ANIMATE_TRANSLATION,1,piArms_translation);  }      
      AddPacket(1,ANIMATE_NONE,2,piLeft_frame);  

      %% right hand
      AddPacket(4,prRight_arm,1,HS_RIGHT_HAND);
      if piArms_translation <> 0
      {  AddPacket(1,ANIMATE_TRANSLATION,1,piArms_translation);  }      
      AddPacket(1,ANIMATE_NONE,2,piRight_frame);  

      %% legs
      AddPacket(4,prLegs,1,HS_LEGS);
      if piLegs_translation <> 0
      {  AddPacket(1,ANIMATE_TRANSLATION,1,piLegs_translation);  }      
      AddPacket(1,ANIMATE_NONE,2,piLegs_frame);  

      %% face
      iSkin_xlat = piSkin_translation;
      AddPacket(4,prHead,1,HS_HEAD,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,1);
      AddPacket(4,prMouth,1,HS_MOUTH,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,piExpression);
      AddPacket(4,prEyes,1,HS_EYES,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,piExpression);
      AddPacket(4,prNose,1,HS_NOSE,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,1);
      AddPacket(4,prToupee,1,HS_TOUPEE,1,ANIMATE_TRANSLATION,1,piHair_translation);
      AddPacket(1,ANIMATE_NONE,2,1); 

      if prShield <> $ and piPose <> POSE_CAST
      {
         AddPacket(4,prShield,1,HS_LEFT_WEAPON);
         if piShield_translation <> 0
         {  AddPacket(1,ANIMATE_TRANSLATION,1,piShield_translation); }      
         AddPacket(1,ANIMATE_NONE,2,piShield_frame);  
      }

      if prWeapon <> $ and (piPose <> POSE_CAST and piPose <> POSE_PUNCH)
      {
         if piPose=POSE_BOW_ATTACK
         {
            AddPacket(4,prWeapon,1,HS_BOTTOM_BOW);
            if piWeapon_translation <> 0
            {
               AddPacket(1,ANIMATE_TRANSLATION,1,piWeapon_translation);
            }      
            AddPacket(1,ANIMATE_NONE,2,piWeapon_frame);  
            AddPacket(4,prBowTop,1,HS_TOP_BOW);
            if piWeapon_translation <> 0
            {
               AddPacket(1,ANIMATE_TRANSLATION,1,piWeapon_translation);
            }      
            AddPacket(1,ANIMATE_NONE,2,PiWeapon_frame);              
            
         }
         else
         {
            AddPacket(4,prWeapon);
            if prBowTop <> $
            {  AddPacket(1,HS_BOTTOM_BOW);  }
            else
            {  AddPacket(1,HS_RIGHT_WEAPON);  }

            if piWeapon_translation <> 0
            {
               AddPacket(1,ANIMATE_TRANSLATION,1,piWeapon_translation);
            }
      
            AddPacket(1,ANIMATE_NONE,2,piWeapon_frame);  
         }
      }

      return;
   }

   GetObjectFlags()
   {
      local iFlags;
      iFlags = piDrawFX;
      
      if piColor = COLOR_BLUE
      { iFlags = iFlags | PLAYER_DM | FALSEPLAYER_YES | USER_YES ; }

      return iFlags;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
