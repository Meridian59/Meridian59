% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FactionTroop is Monster

constants:

   include blakston.khd

   ANIM_CAST = 3
   
   FACTIONTROOP_TRANSLATION_LEGS_MASK = 0xff
   FACTIONTROOP_TRANSLATION_LEGS_MUL = 1
   FACTIONTROOP_TRANSLATION_BODY_MASK = 0xff00
   FACTIONTROOP_TRANSLATION_BODY_MUL = 0x100
   FACTIONTROOP_TRANSLATION_Skin_MASK = 0xff0000
   FACTIONTROOP_TRANSLATION_Skin_MUL = 0x10000

   FACTIONTROOP_TRANSLATION2_HAIR_MASK = 0xff
   FACTIONTROOP_TRANSLATION2_HAIR_MUL = 1
   FACTIONTROOP_TRANSLATION2_ARMS_MASK = 0xff00
   FACTIONTROOP_TRANSLATION2_ARMS_MUL = 0x100

   NO_ACTION = 1  % Neutral action, our troops don't smile, etc.

   EQUIPMENT_DROP_PERCENT = 20

resources:

   FactionTroop_name_rsc = "faction troop"

   FactionTroop_male_icon_rsc = bta.bgf
   FactionTroop_female_icon_rsc = btb.bgf  

   % a is male, b is female
   FactionTroop_legs_a_rsc = bfa.bgf
   FactionTroop_legs_b_rsc = bfb.bgf
  
   FactionTroop_rightarm_a_rsc = bra.bgf
   FactionTroop_rightarm_b_rsc = brb.bgf
   
   FactionTroop_leftarm_a_rsc = bla.bgf
   FactionTroop_leftarm_b_rsc = blb.bgf

   FactionTroop_desc_rsc = \
   "This is a member of the local militia."

   FactionTroop_dead_male_icona_rsc = playerXa.bgf
   FactionTroop_dead_male_iconb_rsc = playerXb.bgf
   FactionTroop_dead_female_icona_rsc = heraXa.bgf
   FactionTroop_dead_female_iconb_rsc = heraXb.bgf
   FactionTroop_dead_name_rsc = "dead faction troop"

   FactionTroop_head_male_icon = phax.bgf  %male    
   FactionTroop_head_female_icon = phkx.bgf  %female 

   FactionTroop_eyes_ax_icon = peax.bgf  %male
   FactionTroop_eyes_bx_icon = pebx.bgf  %male
   FactionTroop_eyes_cx_icon = pecx.bgf  %male
   FactionTroop_eyes_dx_icon = pedx.bgf  %male

   FactionTroop_eyes_kx_icon = pekx.bgf  %female 
   FactionTroop_eyes_lx_icon = pelx.bgf  %female 
   FactionTroop_eyes_mx_icon = pemx.bgf  %female 

   FactionTroop_mouth_ax_icon = pmax.bgf  %male
   FactionTroop_mouth_bx_icon = pmbx.bgf  %male
   FactionTroop_mouth_cx_icon = pmcx.bgf  %male

   FactionTroop_mouth_kx_icon = pmkx.bgf  %female 
   FactionTroop_mouth_lx_icon = pmlx.bgf  %female 
   FactionTroop_mouth_mx_icon = pmmx.bgf  %female 

   FactionTroop_nose_ax_icon = pnax.bgf  %male
   FactionTroop_nose_bx_icon = pnbx.bgf  %male
   FactionTroop_nose_cx_icon = pncx.bgf  %male

   FactionTroop_nose_kx_icon = pnkx.bgf  %female 
   FactionTroop_nose_lx_icon = pnlx.bgf  %female 
   FactionTroop_nose_mx_icon = pnmx.bgf  %female 

   FactionTroop_hair_cd_icon = ptcd.bgf  %both
   FactionTroop_hair_bald_icon = blank.bgf %both

   FactionTroop_hair_ac_icon = ptac.bgf  %male 
   FactionTroop_hair_ba_icon = ptba.bgf  %male  
   FactionTroop_hair_ad_icon = ptad.bgf  %male  
   FactionTroop_hair_bb_icon = ptbb.bgf  %male  
   FactionTroop_hair_xa_icon = ptxa.bgf  %male  

   FactionTroop_hair_bc_icon = ptbc.bgf  %female
   FactionTroop_hair_ca_icon = ptca.bgf  %female   
   FactionTroop_hair_db_icon = ptdb.bgf  %female   
   FactionTroop_hair_bd_icon = ptbd.bgf  %female   
   FactionTroop_hair_cb_icon = ptcb.bgf  %female   
   FactionTroop_hair_dc_icon = ptdc.bgf  %female   
   FactionTroop_hair_dr_icon = ptdr.bgf  %female   
   FactionTroop_hair_xb_icon = ptxb.bgf  %female   

   FactionTroop_sound_swish1 = swswish1.wav             %no ouch
   FactionTroop_sound_swish2 = swswish2.wav             %no ouch
   FactionTroop_sound_swish3 = swswish3.wav             %no ouch

   FactionTroop_sound_sword1 = sword1.wav             %no ouch
   FactionTroop_sound_sword2 = sword2.wav             %no ouch
   FactionTroop_sound_sword3 = sword3.wav             %no ouch

   FactionTroop_sound_metal1 = swrdmtl1.wav             %no ouch
   FactionTroop_sound_metal2 = swrdmtl2.wav             %no ouch
   FactionTroop_sound_metal3 = swrdmtl3.wav             %no ouch

   FactionTroop_sound_hit_monster_flesh1 = fhit1b.wav             %no ouch
   FactionTroop_sound_hit_monster_flesh2 = fhit2b.wav             %no ouch
   FactionTroop_sound_hit_monster_flesh3 = fhit3b.wav             %no ouch

   FactionTroop_sound_hit_monster_leather1 = lhit1b.wav             %no ouch
   FactionTroop_sound_hit_monster_leather2 = lhit2b.wav             %no ouch
   FactionTroop_sound_hit_monster_leather3 = lhit3b.wav             %no ouch

   FactionTroop_sound_hit_monster_metal1 = mhit1b.wav             %no ouch
   FactionTroop_sound_hit_monster_metal2 = mhit2b.wav             %no ouch
   FactionTroop_sound_hit_monster_metal3 = mhit3b.wav             %no ouch

   FactionTroop_male_sound_ouch1 = ouchm1.wav     % in increasing order of agony
   FactionTroop_male_sound_ouch2 = ouchm2.wav
   FactionTroop_male_sound_ouch3 = ouchm3.wav
   FactionTroop_male_sound_ouch4 = ouchm4.wav

   FactionTroop_female_sound_ouch1 = ouchf1.wav
   FactionTroop_female_sound_ouch2 = ouchf2.wav
   FactionTroop_female_sound_ouch3 = ouchf3.wav
   FactionTroop_female_sound_ouch4 = ouchf4.wav

   FactionTroop_male_sound_death = pdeath.wav
   FactionTroop_female_sound_death = pdeathf.wav

   FactionTroop_sound_aware = trps1awr.wav
   FactionTroop_sound_attack = trpsatk.wav

   FactionTroop_rightarm_gauntlet_male = bre.bgf
   FactionTroop_rightarm_gauntlet_female = brf.bgf
   FactionTroop_leftarm_gauntlet_male = ble.bgf
   FactionTroop_leftarm_gauntlet_female = blf.bgf


classvars:

   vrName = FactionTroop_name_rsc
   vrDesc = FactionTroop_desc_rsc
   vrDead_name = FactionTroop_dead_name_rsc

   viTreasure_type = TID_NONE

   viSpeed = SPEED_AVERAGE
   viAttack_type = ATCK_WEAP_SLASH
   viAttributes = 0
   viDefault_behavior = AI_FIGHT_NEWBIESAFE | AI_MOVE_REGROUP

   viChanceFemale = 50  % percentage chance to be female

   viColorTranslate1 = XLAT_TO_RED     % Shirt
   viColorTranslate2 = XLAT_TO_BLACK   % Pants

   vcShieldClass = &GuildShield
   viShieldColor1 = XLAT_TO_RED
   viShieldColor2 = XLAT_TO_RED
   viShieldShape = SHIELDSHAPE_SLASH
   viInsignia = $

properties:

   piBaseLevel = 80
   piBaseDifficulty = 6

   %Here so they can be set
   vrIcon = FactionTroop_male_icon_rsc
   vrDead_Icon = FactionTroop_dead_male_icona_rsc
   vrDead_Legs = FactionTroop_dead_male_iconb_rsc
   viLevel = 80         % piBaseLevel
   viDifficulty = 4     % piBaseDifficulty
   viGender = GENDER_MALE
   viKarma = 0

   vrSound_hit = FactionTroop_sound_hit_monster_flesh2
   vrSound_miss = FactionTroop_sound_swish3
   vrSound_aware = FactionTroop_sound_aware
   vrSound_death = FactionTroop_male_sound_death

   piAnimation = ANIM_NONE

   prLegs = FactionTroop_legs_a_rsc
   prRight_arm = FactionTroop_rightarm_a_rsc
   prLeft_arm = FactionTroop_leftarm_a_rsc

   prHead = FactionTroop_head_male_icon
   prEyes = FactionTroop_eyes_ax_icon
   prMouth = FactionTroop_mouth_ax_icon
   prNose = FactionTroop_nose_ax_icon
   prToupee = FactionTroop_hair_ac_icon

   plUsing = $
   plOverlays = $
   piBody_translations = 0
   piBody_translations2 = 0
   poHair_Remove = $

messages:

   Constructor()
   {
      plOverlays = [ ];
      plUsing = [ ];
      plResistances = [ ];
      
      send(self,@SetGender);
      send(self,@SetHair);
      send(self,@SetFace);
      send(self,@SetSkinColor);
      send(self,@SetTroopShirt,#translation=viColorTranslate1);
      send(self,@SetTroopLegs,#translation=viColorTranslate2);
      send(self,@SetEquipment);
      send(self,@SetShield);

      propagate;
   }

   SetGender()
   {
      if random(1,100) < viChanceFemale
      {
         viGender = GENDER_FEMALE;
         vrIcon = FactionTroop_female_icon_rsc;
         prHead = FactionTroop_head_female_icon;
         prEyes = FactionTroop_eyes_kx_icon;
         prMouth = FactionTroop_mouth_kx_icon;
         prNose = FactionTroop_nose_kx_icon;
         prToupee = FactionTroop_hair_ca_icon;
         prLegs = FactionTroop_legs_b_rsc;
         prRight_arm = FactionTroop_rightarm_b_rsc;
         prLeft_arm = FactionTroop_leftarm_b_rsc;
         vrDead_Icon = FactionTroop_dead_female_icona_rsc;
         vrDead_Legs = FactionTroop_dead_female_iconb_rsc;
         vrSound_death = FactionTroop_female_sound_death;
      }

      return;
   }

   SetHair()
   % Sets the hairdo, color.  Has a chance of putting a helmet on instead.
   {
      local RandomNumber,Translation,HelmetHair;

      % Helmet?
      if random(1,100) < 30
      {
         HelmetHair = create(&SimpleHelm);
         send(self,@AddEquipmentObject,#what=HelmetHair);
         poHair_Remove = HelmetHair;
         return;
      }

      % Select a hairdo
      if viGender = GENDER_MALE
      {
         RandomNumber = random(0,6);
         % 0 keeps the "default"
         if RandomNumber = 1
         {
            prToupee = FactionTroop_hair_cd_icon;
         }
         else
         {
            if RandomNumber = 2
            {
               prToupee = FactionTroop_hair_bald_icon;
            }
            else
            {
               if RandomNumber = 3
               {
                  prToupee = FactionTroop_hair_ba_icon;
               }
               else
               {
                  if RandomNumber = 4
                  {
                     prToupee = FactionTroop_hair_ad_icon;
                  }
                  else
                  {
                     if RandomNumber = 5
                     {
                        prToupee = FactionTroop_hair_bb_icon;
                     }
                     else
                     {
                        prToupee = FactionTroop_hair_xa_icon;
                     }
                  }
               }
            }
         }
      } else {
      % female
         RandomNumber = random(0,8);
         % 0 keeps the "default"
         if RandomNumber = 1
         {
            prToupee = FactionTroop_hair_cd_icon;
         }
         else
         {
            if RandomNumber = 2
            {
               prToupee = FactionTroop_hair_bc_icon;
            }
            else
            {
               if RandomNumber = 3
               {
                  prToupee = FactionTroop_hair_db_icon;
               }
               else
               {
                  if RandomNumber = 4
                  {
                     prToupee = FactionTroop_hair_bd_icon;
                  }
                  else
                  {
                     if RandomNumber = 5
                     {
                        prToupee = FactionTroop_hair_cb_icon;
                     }
                     else
                     {
                        if RandomNumber = 6
                        {
                           prToupee = FactionTroop_hair_dc_icon;
                        }
                        else
                        {
                           if RandomNumber = 7
                           {
                              prToupee = FactionTroop_hair_dr_icon;
                           }
                           else
                           {
                              prToupee = FactionTroop_hair_xb_icon;
                           }
                        }
                     }
                  }
               }
            }
         }
      }

      % Select a Color
      RandomNumber = random(0,8);
      % 0 remains gray
      if RandomNumber = 1
      {
         Translation = PT_GRAY_TO_RED;
      }
      else
      {
         if RandomNumber = 2
         {
            Translation = PT_GRAY_TO_KGRAY;
         }
         else
         {
            if RandomNumber = 3
            {
               Translation = PT_GRAY_TO_BLACK;
            }
            else
            {
               if RandomNumber = 4
               {
                  Translation = PT_GRAY_TO_BLOND;
               }
               else
               {
                  if RandomNumber = 5
                  {
                     Translation = PT_GRAY_TO_SKIN4;
                  }
                  else
                  {
                     if RandomNumber = 6
                     {
                        Translation = PT_GRAY_TO_SKIN5;
                     }
                     else
                     {
                        if RandomNumber = 7
                        {
                           Translation = PT_GRAY_TO_PLATBLOND;
                        }
                        else
                        {
                           if RandomNumber = 8
                           {
                              Translation = PT_GRAY_TO_KRED;
                           }
                           else
                           {
                              Translation = 0;
                           }
                        }
                     }
                  }
               }
            }
         }
      }
       
      piBody_translations2 = piBody_translations2 & ~FACTIONTROOP_TRANSLATION2_HAIR_MASK;
      piBody_translations2 = piBody_translations2 | (Translation * FACTIONTROOP_TRANSLATION2_HAIR_MUL);

      return;
   }

   SetFace()
   % Randomly sets (gender-appropriate) face elements.
   {
      local RandomNumber;
      % NOTE: 0 always keeps the "default" (a) icon.

      if viGender = GENDER_MALE
      {
         RandomNumber = random(0,3);
         if RandomNumber = 1
         {
            prEyes = FactionTroop_eyes_bx_icon;
         }
         else
         {
            if RandomNumber = 2
            {
               prEyes = FactionTroop_eyes_cx_icon;
            }
            else
            {
               prEyes = FactionTroop_eyes_dx_icon;
            }
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prNose = FactionTroop_nose_bx_icon;
         }
         else
         {
            prNose = FactionTroop_nose_cx_icon;
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prMouth = FactionTroop_mouth_bx_icon;
         }
         else
         {
            prMouth = FactionTroop_mouth_cx_icon;
         }

      }
      else
      {
      % female

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prEyes = FactionTroop_eyes_lx_icon;
         }
         else
         {
            prEyes = FactionTroop_eyes_mx_icon;
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prNose = FactionTroop_nose_lx_icon;
         }
         else
         {
            prNose = FactionTroop_nose_mx_icon;
         }

         RandomNumber = random(0,2);
         if RandomNumber = 1
         {
            prMouth = FactionTroop_mouth_lx_icon;
         }
         else
         {
            prMouth = FactionTroop_mouth_mx_icon;
         }

      }

      return;
   }

   SetSkinColor()
   % Sets skin to one of the four skin colors.
   {
      local skin_color;
      skin_color = random(PT_BLUE_TO_SKIN1,PT_BLUE_TO_SKIN4);

      piBody_translations = piBody_translations & ~FACTIONTROOP_TRANSLATION_SKIN_MASK;
      piBody_translations = piBody_translations | (skin_color * FACTIONTROOP_TRANSLATION_SKIN_MUL);

      return;
   }

   SetEquipment()
   {
      local oEquipmentItem, iRandomNumber, iBonusModifier;

      iRandomNumber = random(1,100);
      if iRandomNumber <= 35
      {
         oEquipmentItem = create(&Longsword);
         iBonusModifier = 3;
      }
      else
      {
         if iRandomNumber <= 55
         {
            oEquipmentItem = create(&Axe);
            iBonusModifier = 2;
         }
         else
         {
            if iRandomNumber <= 65
            {
               oEquipmentItem = create(&Hammer);
               iBonusModifier = 2;
            }
            else
            {
               if iRandomNumber <= 75
               {
                  oEquipmentItem = create(&Mace);
                  iBonusModifier = 1;
               }
               else
               {
                  if iRandomNumber <= 90
                  {
                     oEquipmentItem = create(&ShortSword);
                     iBonusModifier = 1;
                  }
                  else
                  {
                     oEquipmentItem = create(&Scimitar);
                     iBonusModifier = 4;
                  }
               }
            }
         }
      }
                  
      viDifficulty = piBaseDifficulty + iBonusModifier;
      send(self,@AddEquipmentObject,#what=oEquipmentItem);

      iRandomNumber = random(1,100);

      if iRandomNumber <= 35
      {
         oEquipmentItem = create(&LeatherArmor);
         iBonusModifier = 20;
      }
      else
      {
         if iRandomNumber <= 70
         {
            oEquipmentItem = create(&ChainArmor);
            iBonusModifier = 50;
         }
         else
         {
            oEquipmentItem = create(&ScaleArmor);
            iBonusModifier = 75;
         }
      }

      viLevel = piBaseLevel + iBonusModifier;
      send(self,@SetTroopArmor,#NewArmor=oEquipmentItem);

      % Gauntlets?
      iRandomNumber = random(1,100);
      if iRandomNumber < 20
      {
         oEquipmentItem = create(&Gauntlet);
         plUsing = Cons(oEquipmentItem,plUsing);
         viDifficulty = viDifficulty +1;
         viLevel = viLevel + 20;
         if viGender = GENDER_MALE
         {
            prRight_arm = FactionTroop_rightarm_gauntlet_male;
            prLeft_arm = FactionTroop_leftarm_gauntlet_male;
         }
         else
         {
            prRight_arm = FactionTroop_rightarm_gauntlet_female;
            prLeft_arm = FactionTroop_leftarm_gauntlet_female;
         }
      }

      return;
   }

   SetShield()
   {
      local oEquipmentItem;

      oEquipmentItem = create(vcShieldClass,#color1=viShieldColor1,#color2=viShieldColor2,
                              #shape=viShieldShape);
      if viInsignia <> $
      {
         send(oEquipmentItem,@ChangeGuildInsignia,#insignia=viInsignia);
      }

      send(self,@AddEquipmentObject,#what=oEquipmentItem);
      
      return;
   }

   % Next two messages affect the defense messages.
   GetParryAbility(stroke_obj=$)
   {
      if (stroke_obj <> $) and not Send(stroke_obj,@CanParry)
      {
         return 0;
      }
      
      return (viDifficulty*10)/2;
   }

   GetBlockAbility(stroke_obj=$)
   {
      if (stroke_obj <> $) and not Send(stroke_obj,@CanBlock)
      {
         return 0;
      }
      
      return (viDifficulty*10);
   }
   
   MonsterAttack(what = $)
   {
      % add in any attack animation calls
      Send(self,@DoSlash);
      
      return;
   }

   DoSlash()
   {
      piAnimation = PANM_WEAPON_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   SendMoveAnimation()
   {
      local iBody_xlat;
      iBody_xlat = (piBody_translations & FACTIONTROOP_TRANSLATION_BODY_MASK)/FACTIONTROOP_TRANSLATION_BODY_MUL;
      if iBody_xlat <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,iBody_xlat);
      }

      % use standing torso
      AddPacket(1, ANIMATE_NONE,2,1);
      
      return;
   }

   SendAnimation()
   {
      local iBody_xlat;
      
      iBody_xlat = (piBody_translations & FACTIONTROOP_TRANSLATION_BODY_MASK)/FACTIONTROOP_TRANSLATION_BODY_MUL;
      if (piBody_translations & FACTIONTROOP_TRANSLATION_BODY_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,iBody_xlat);
      }

      %% all new data
      if piAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,300,2,2,2,4,2,1);
         
         return;
      }
      
      propagate;
   }

   SendMoveOverlays()
   {
      local i,iOverlays,hotspot,iLeft_group,iRight_group,iSkin_xlat,iArms_xlat,iLegs_xlat;

      % Player has 7 standard overlays: right arm, left arm, legs, head, eyes, 
      % mouth, nose      
      iOverlays = 7;
      
      if poHair_remove = $
      {
         iOverlays = iOverlays + 1;
      }

      iLeft_group = 1;
      iRight_group = 1;

      for i in plOverlays
      {
         iOverlays = iOverlays + send(i,@GetNumberOverlays);  %bows can have more than 1.
         hotspot = Send(i,@GetOverlayHotspot);
         if hotspot = HS_RIGHT_WEAPON
         {
            iRight_group = 17;
         }
         else
         {
            if hotspot = HS_LEFT_WEAPON or hotspot = HS_BOTTOM_BOW
            % it's really a shield, not weapon
            {
               iLeft_group = 7;
            }
         }
      }
      
      AddPacket(1,iOverlays);
      AddPacket(4,prLeft_arm,1,HS_LEFT_HAND);
      
      iArms_xlat = (piBody_translations2 & FACTIONTROOP_TRANSLATION2_ARMS_MASK)/FACTIONTROOP_TRANSLATION2_ARMS_MUL;
      if iArms_xlat <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,iArms_xlat);
      }
      
      if iLeft_group = 1
      {
         AddPacket(1,ANIMATE_CYCLE,4,200,2,2,2,3);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,iLeft_group); 
      }

      AddPacket(4,prRight_arm,1,HS_RIGHT_HAND);
      if iArms_xlat <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,iArms_xlat);       
      }
      
      if iRight_group = 1
      {
         Addpacket(1,ANIMATE_CYCLE,4,200,2,2,2,3);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,iRight_group); 
      }

      AddPacket(4,prLegs,1,HS_LEGS);
      iLegs_xlat = (piBody_translations & FACTIONTROOP_TRANSLATION_LEGS_MASK)/FACTIONTROOP_TRANSLATION_LEGS_MUL;
      if iLegs_xlat <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,iLegs_xlat);
      }
      
      AddPacket(1,ANIMATE_CYCLE,4,100,2,2,2,5);

      iSkin_xlat = (piBody_translations & FACTIONTROOP_TRANSLATION_Skin_MASK)/FACTIONTROOP_TRANSLATION_SKIN_MUL;

      AddPacket(4,prHead,1,HS_HEAD,1,ANIMATE_TRANSLATION,1,iSkin_xlat);
      Addpacket(1,ANIMATE_NONE,2,1);        
      
      AddPacket(4,prMouth,1,HS_MOUTH,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,NO_ACTION);
      AddPacket(4,prEyes,1,HS_EYES,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,NO_ACTION);
      AddPacket(4,prNose,1,HS_NOSE,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,1);

      if poHair_remove = $
      {  
         AddPacket(4,prToupee,1,HS_TOUPEE,1,ANIMATE_TRANSLATION,1,
                   (piBody_translations2 & FACTIONTROOP_TRANSLATION2_HAIR_MASK)/FACTIONTROOP_TRANSLATION2_HAIR_MUL);         
         AddPacket(1,ANIMATE_NONE,2,1); 
      }

      for i in plOverlays
      {
         send(i,@SendOverlayInformation,#iAnimation = $);
      }
      return;
   }

   SendOverlays()
   {
      local i,iOverlays,hotspot,iLeft_group,iRight_group,iSkin_xlat, iArms_xlat, iLegs_xlat;

      % Send overlay bitmap info to user.  

      % Player has 7 standard overlays: right arm, left arm, legs, head, eyes, mouth, nose
      iOverlays = 7;
      
      if poHair_remove = $
      {
         iOverlays = iOverlays + 1;
      }
      
      % Overlay info -- display correct group for animation & action

      iLeft_group = 1;
      iRight_group = 1;

      for i in plOverlays
      {
         iOverlays = iOverlays + send(i,@GetNumberOverlays,#iAnimation=piAnimation);  %bows can have more than 1.
         hotspot = Send(i,@GetOverlayHotspot);
         if hotspot = HS_RIGHT_WEAPON
         {
            iRight_group = 17;
         }
         else
         {
            if hotspot = HS_LEFT_WEAPON or hotspot = HS_BOTTOM_BOW
            % it's really a shield, not weapon 
            {
               iLeft_group = 7;
            }
         }
      }

      AddPacket(1, iOverlays);
      iArms_xlat = (piBody_translations2 & FACTIONTROOP_TRANSLATION2_ARMS_MASK)/FACTIONTROOP_TRANSLATION2_ARMS_MUL;

      AddPacket(4,prLeft_arm,1,HS_LEFT_HAND);
      if iArms_Xlat <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,iArms_xlat);
      }
      
      if piAnimation = ANIM_CAST
      {
         AddPacket(1,ANIMATE_ONCE,4,300,2,8,2,8,2,iLeft_group);
      }
      else
      {
         if piAnimation = PANM_WEAPON_ATTACK
         {
            AddPacket(1,ANIMATE_ONCE,4,300,2,4,2,6,2,iLeft_group);
         }
         else
         {
            AddPacket(1,ANIMATE_NONE,2,iLeft_group);
         }
      }

      AddPacket(4,prRight_arm,1,HS_RIGHT_HAND);
      if iArms_xlat <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,iArms_xlat);
      }

      if piAnimation = ANIM_NONE
      {    
         AddPacket(1,ANIMATE_NONE,2,iRight_group); 
      }

      if piAnimation = ANIM_CAST
      {
         AddPacket(1,ANIMATE_ONCE,4,300,2,11,2,11,2,iRight_group);
      }

      if piAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,300,2,4,2,6,2,17);
      }

      AddPacket(4,prLegs,1,HS_LEGS);
      iLegs_xlat = (piBody_translations & FACTIONTROOP_TRANSLATION_LEGS_MASK)/FACTIONTROOP_TRANSLATION_LEGS_MUL;
      if iLegs_xlat <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,iLegs_xlat);
      }
      
      if piAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,900,2,6,2,6,2,1);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,1);
      }
  
      iSkin_xlat = (piBody_translations & FACTIONTROOP_TRANSLATION_Skin_MASK)/FACTIONTROOP_TRANSLATION_Skin_MUL;
      AddPacket(4,prHead,1,HS_HEAD,1,ANIMATE_TRANSLATION,1,iSkin_xlat);
      Addpacket(1,ANIMATE_NONE,2,1); 
      
      AddPacket(4,prMouth,1,HS_MOUTH,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,NO_ACTION);
      AddPacket(4,prEyes,1,HS_EYES,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,NO_ACTION);
      AddPacket(4,prNose,1,HS_NOSE,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,1);
      
      if poHair_remove = $
      {  
         AddPacket(4,prToupee,1,HS_TOUPEE,1,ANIMATE_TRANSLATION,
                   1,(piBody_translations2 & FACTIONTROOP_TRANSLATION2_HAIR_MASK)/FACTIONTROOP_TRANSLATION2_HAIR_MUL);
         AddPacket(1,ANIMATE_NONE,2,1); 
      }
      
      for i in plOverlays
      {
         Send(i,@SendOverlayInformation,#iAnimation=piAnimation);
      }
      
      return;
   }

   SetTroopArmor(NewArmor = $)
   % Sets the troop's armor icon.
   {
      vrIcon = send(NewArmor,@GetShirtIcon,#who=self);
      plUsing = cons(NewArmor, plUsing);

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   SetTroopShirt(translation = 0)
   % Sets troop shirt color.  Send the xlat value for color, this procedure calculates skin color and figures
   %  the two color xlat for you.
   {
      local iShirtXlat, iSkinColor;
      
      iSkinColor = (piBody_translations & FACTIONTROOP_TRANSLATION_SKIN_MASK)/FACTIONTROOP_TRANSLATION_SKIN_MUL;
      iSkinColor = send(self,@ConvertSkinColorToXLAT,#Skin_color=iSkinColor);
      iShirtXlat = send(SYS,@EncodeTwoColorXLAT,#color1=translation,#color2=iSkinColor);

      piBody_translations2 = piBody_translations2 & ~FACTIONTROOP_TRANSLATION2_ARMS_MASK;
      piBody_translations2 = piBody_translations2 | (iShirtXlat * FACTIONTROOP_TRANSLATION2_ARMS_MUL);

      piBody_translations = piBody_translations & ~FACTIONTROOP_TRANSLATION_BODY_MASK;
      piBody_translations = piBody_translations | (iShirtXlat * FACTIONTROOP_TRANSLATION_BODY_MUL);

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   SetTroopLegs(translation = 0)
   % Sets troop leg color.  Send the xlat value for color, this procedure calculates skin color and figures
   %  the two color xlat for you.
   {
      local iPantsXlat, iSkinColor;
      
      iSkinColor = (piBody_translations & FACTIONTROOP_TRANSLATION_SKIN_MASK)/FACTIONTROOP_TRANSLATION_SKIN_MUL;
      iSkinColor = send(self,@ConvertSkinColorToXLAT,#Skin_color=iSkinColor);

      % A hack for non-standard skin colors with the "special" pants colors.
      if translation >= XLAT_TO_DGREEN
         AND (iSkinColor < XLAT_TO_SKIN1
              OR iSkinColor > XLAT_TO_SKIN4)
      {
         iSkinColor = XLAT_TO_SKIN4;
      }
      
      iPantsXlat = send(SYS,@EncodeTwoColorXLAT,#color1=translation,#color2=iSkinColor);

      piBody_translations = piBody_translations & ~FACTIONTROOP_TRANSLATION_LEGS_MASK;
      piBody_translations = piBody_translations | (iPantsXlat * FACTIONTROOP_TRANSLATION_LEGS_MUL);

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   AddEquipmentObject(what = $)
   % Adds Overlay to list if not duplicated.
   {
      local i;

      for i in plOverlays
      {
         if i = what
         {
            return;
         }
      }

      plUsing = Cons(what,plUsing);
      plOverlays = Cons(what,plOverlays);

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   % Override from monster superclass
   % We drop some of our carried items when we die.
   CreateTreasure(who = $, corpse = $)
   {
      local oUsedItem, oItemAtt;

      oItemAtt = send(SYS,@FindItemAttByNum,#num=IA_CORPSEPOINTER);

      for oUsedItem in plUsing
      {
         % Only a percentage chance to drop each item.  Too much stuff otherwise.
         % Don't drop the shield!  It's a quest/special item!
         if (random(1,100) <= EQUIPMENT_DROP_PERCENT) AND (NOT IsClass(oUsedItem,vcShieldClass))
         {
            if (oItemAtt <> $) AND send(oItemAtt,@ReqAddToItem,#oItem=oUsedItem)
            {
               Send(oItemAtt,@AddToItem,#oItem=oUsedItem,#state1=corpse);
            }       

            Send(poOwner,@NewHold,#what=oUsedItem,#new_row=piRow,#new_col=piCol,
                 #new_angle=Send(self,@GetAngle));
         }
         else
         {
            send(oUsedItem,@Delete);
         }
      }
      
      plUsing = $;

      % Don't propagate.  We do everything here.
      return;
   }

   % Override from monster superclass
   CreateDeadBody(killer=$)
   {
      return Create(&DeadBody,
         #icon=vrDead_Icon,
         #name=vrDead_Name,
         #playername=send(killer,@GetTrueName),
         #mob=TRUE,
         #monstername=FactionTroop_name_rsc,
         #PlayerBodyOverlay=vrDead_Legs,
         #BodyTranslation=(piBody_translations & FACTIONTROOP_TRANSLATION_BODY_MASK)/FACTIONTROOP_TRANSLATION_BODY_MUL,
         #LegsTranslation=(piBody_translations & FACTIONTROOP_TRANSLATION_LEGS_MASK)/FACTIONTROOP_TRANSLATION_LEGS_MUL);
   }

   ConvertskincolortoXLAT(Skin_color = 0)
   % Calculates the hand xlat from the blue to skin color translate.
   {
      % since the face translates use a single translate and the body uses
      %     a double translate which has less color values available,
      %     here we map the face translate to a similar body translate.
      if skin_color = PT_BLUE_TO_SKIN1  { return XLAT_TO_SKIN1; }
      if skin_color = PT_BLUE_TO_SKIN2  { return XLAT_TO_SKIN1; }
      if skin_color = PT_BLUE_TO_SKIN3  { return XLAT_TO_SKIN2; }
      if skin_color = PT_BLUE_TO_SKIN4  { return XLAT_TO_SKIN4; }

      if skin_color = PT_BLUE_TO_GREEN  { return XLAT_TO_SKIN1; }
      if skin_color = PT_BLUE_TO_YELLOW  { return XLAT_TO_SKIN1; }
      if skin_color = PT_BLUE_TO_GRAY  { return XLAT_TO_GRAY; }
      if skin_color = PT_BLUE_TO_ASHEN  { return XLAT_TO_GRAY; }
      if skin_color = PT_BLEND25YELLOW  { return XLAT_TO_SKY; }      
      if skin_color = PT_BLEND25RED  { return XLAT_TO_BLUE; }
      if skin_color = PT_BLUE_TO_LBLUE  { return XLAT_TO_SKY; }

      if send(SYS,@IsTwoColorXLAT,#Xlat=skin_color)
      {
         return send(SYS,@DecodeSecondaryColor,#Xlat=skin_color);
      }

      return XLAT_TO_SKIN1;   %% Skin color 3 uses 2nd xlat too.
   }

   IsAlly(target = $, regroup = FALSE)
   {
      local iFaction;
      if isClass(target,getClass(self))
      {
         return TRUE;
      }
      
      if isClass(target,&Player)
      {
         iFaction = send(target,@GetFaction);
         if (not regroup) and (iFaction = FACTION_NEUTRAL)
         {
            return TRUE;
         }
         
         if iFaction = viFaction
         {
            return TRUE;
         }
         else
         {
            return FALSE;
         }
      }
      
      propagate;
   }

   SpecialHatredBehavior(what=$)
   {
      local iFaction;
      
      if isClass(what,&User) or isClass(what,&FactionTroop)
      {
         iFaction=send(what,@GetFaction);
         if iFaction = viFaction
         {
            return -30;
         }
         
         if (iFaction <> FACTION_NEUTRAL) and (iFaction <> viFaction)
         {
            return 30;
         }
      }
      
      return 0;
   }

   Delete()
   {
      local oUsedItem;
      
      for oUsedItem in plUsing
      {
         send(oUsedItem,@delete);
      }
      
      plUsing = $;
      plOverlays = $;
      
      propagate;
   }

   CanMorphTo() 
   {
      return FALSE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
