% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Xeochicatl is Monster 

constants:

   include blakston.khd

   % Percent chance to drain mana with an attack.
   DRAIN_CHANCE = 50
   % Percent chance to resist a spell
   MAGIC_RESIST = 30

   % Cast spell animation.
   ANIM_CAST = 2     

   FRAME_STAND = 1
   FRAME_FLY = 2
   FRAME_ATTACK_START = 3
   FRAME_ATTACK_END = 6
   FRAME_CAST_START = 7
   FRAME_CAST_END = 10

   % Chance (1 in this number) to cast a spell
   SPELL_CHANCE = 1

   % What's the maximum number of walls allowed?
   MAX_WALLS = 2

resources:

   Xeochicatl_name_rsc = "Xeochicatl"
   Xeochicatl_koc_name_rsc = "Xeo'chicatl"
   Xeochicatl_icon_rsc = Xeo.bgf
   Xeochicatl_desc_rsc = \
      "Before you is a Xeochicatl, a fearsome monster given life by the "
      "chaotic magic of the Meridian.  The Xeochicatl is the embodiment of "
      "destruction, a violent monster that seems uncontrollable.  These "
      "monsters feed off of the magic of the lands which makes them very "
      "powerful.  Rumors abound about the origin of these monsters, but you "
      "have little time to contemplate these rumors in the presence of such "
      "destructive power!"

   Xeochicatl_dead_icon_rsc = XeoX.bgf
   Xeochicatl_dead_name_rsc = "slain xeochicatl"

   Xeochicatl_sound_attack = xeoatk.wav  
   Xeochicatl_sound_death = xeodie.wav  
   Xeochicatl_sound_aware = xeo1awr.wav

   Xeochicatl_drain_rsc = "The %s drains your mana!"

classvars:

   vrName = Xeochicatl_name_rsc
   vrDesc = Xeochicatl_desc_rsc
   vrKocName = Xeochicatl_koc_name_rsc
   vrIcon = Xeochicatl_icon_rsc
   vrDead_icon = Xeochicatl_dead_icon_rsc
   vrDead_name = Xeochicatl_dead_name_rsc
   
   viTreasure_type = TID_NONE
   viDefault_behavior = AI_FIGHT_AGGRESSIVE | AI_FIGHT_SWITCHALOT \
                        | AI_MOVE_REGROUP | AI_MOVE_WALKTHROUGH_WALLS
   viAttack_type = ATCK_WEAP_MAGIC
   viLevel = 150
   viDifficulty = 8
   viSpeed = SPEED_AVERAGE
   viKarma = 0

   vrSound_hit = Xeochicatl_sound_attack
   vrSound_miss = Xeochicatl_sound_attack
   vrSound_aware = Xeochicatl_sound_aware
   vrSound_death = Xeochicatl_sound_death

properties:

   piAnimation = ANIM_NONE
   piMana = 20

   % is this Xeochicatl part of a node attack?
   pbNodeAttack = FALSE  

   piColor_Translation = 0

   % percent of victim's max mana it will try to drain.
   piDrainAmount = 5    
   % What do we drop on death?  Silly default item here.
   pcTreasureItem = &CheapOreChunk  
  
messages:

   Constructor(InAttack=FALSE)
   {
      pbNodeAttack = InAttack;
      % This makes the Xeos not affect Karma if set to true.
      pbDontDispose = InAttack;

      propagate;
   }

   MonsterAttack(what = $)
   {
      local iAmount;
   
      piAnimation = ANIM_ATTACK;      
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      if IsClass(what,&Player)
      {
         if Random(1,100) < DRAIN_CHANCE
         {
            % No mana draining if they're mana bombed.
            if NOT (piEnch_flags & ENCH_MANA_BOMB)
            {
               iAmount = Send(what,@GetMaxMana);
               iAmount = ((iAmount * piDrainAmount)/100) + 1;
               iAmount = bound(iAmount,0,Send(what,@GetMana));

               Send(what,@LoseMana,#amount=iAmount);
               piMana = piMana + iAmount;
               Send(what,@MsgSendUser,#message_rsc=Xeochicatl_drain_rsc,#parm1=vrName);
            }
         }
         else
         {
            Send(self,@MonsterCastSpell);
         }
      }
      
      return;
   }

   SendMoveAnimation()
   {
      if (piColor_Translation <> 0)
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piColor_Translation);
      }
      
      AddPacket(1,ANIMATE_NONE,2,FRAME_FLY);

      return;
   }

   SendAnimation()
   {
      if (piColor_Translation <> 0)
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piColor_Translation);
      }
      
      if piAnimation = ANIM_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE, 4,150, 2,FRAME_ATTACK_START,
                   2,FRAME_ATTACK_END, 2,FRAME_FLY);
                   
         return;
      }
      
      if piAnimation = ANIM_CAST
      {
         AddPacket(1,ANIMATE_ONCE, 4,150, 2,FRAME_CAST_START,
                   2,FRAME_CAST_END, 2,FRAME_FLY);
                   
         return;
      }

      % if no body animation
      AddPacket(1,ANIMATE_NONE, 2,FRAME_FLY);
      
      return;
   }

   EndAttack()
   {
      pbNodeAttack = FALSE;
      
      return;
   }

   IsAlly(target = $)
   {
      if IsClass(target,&Xeochicatl)
      {
         return TRUE;
      }

      % charm checks up higher.
      propagate;
   }

   Killed()
   {
      if pbNodeAttack
      {
         Post(Send(SYS,@GetNodeAttack),@XeoKilled);
      }

      % Create heartstone for it to drop when it dies.
      Send(self,@NewHold,#what=create(pcTreasureItem));

      propagate;
   }

   MonsterCastSpell()
   {
      local iRandom, iSpell, iBase, oSpell, iManaCost, lInfo, lTargets;

      % See if we actually cast a spell, 100% base lowered if we're demented,
      %  mana bombed, etc.
      iRandom = Send(self,@AdjustedChanceBase,#base=SPELL_CHANCE);
      if Random(1,iRandom) <> 1
      {
         return FALSE;
      }

      % Let each individual Xeo choose their spell.
      %   Returns information list in the form of: [ SID, mana cost ]
      lInfo = Send(self,@ChooseSpell);

      % Maybe no spell was returned
      if lInfo = $
      {
         return FALSE;
      }

      iSpell = First(lInfo);
      iManaCost = Nth(lInfo,2);

      if piMana < iManaCost
      {
         return FALSE;
      }

      piMana = piMana - iManaCost;

      piAnimation = ANIM_CAST;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;             
 
      oSpell = Send(SYS,@FindSpellByNum,#num=iSpell);

      if (Send(oSpell,@GetNumSpellTargets) > 0
          AND NOT Send(poOwner,@LineOfSight,#obj1=self,#obj2=poTarget))
         OR NOT Send(poOwner,@ReqSomethingAttack,#what=self,#victim=poTarget)
      {
         return FALSE;
      }

      lTargets = Send(oSpell,@GetTargets,#who=self,#lTargets=[poTarget]);

      if Send(oSpell,@CanPayMonsterCosts,#who=self,#lTargets=lTargets,
              #iSpellPower=SPELLPOWER_MAXIMUM)
         AND Send(poOwner,@ReqSpellCast,#who=self,#oSpell=oSpell,
                  #litems=lTargets)
      {
         Send(oSpell,@CastSpell,#who=self,#ltargets=lTargets,
              #iSpellPower=SPELLPOWER_MAXIMUM);
      }

      return TRUE;
   }

   ChooseSpell()
   {
      return $;
   }

   CanCastWallSpell()
   {
      if (Send(poOwner,@CountHoldingSummoned) + 6) > (MAX_WALLS * 6)
      {
         return FALSE;
      }
      
      return TRUE;
   }

   CanMorphTo()
   {
      return FALSE;
   }

   StartManaBomb()
   "Called when affected by Mana Bomb spell."
   {
      % Halve the mana
      piMana = piMana / 2;

      return;
   }

   CanBeSilenced()
   "Xeochicatl cannot be silenced by the room enchantment."
   {
      return FALSE;
   }

   SpellResist(oSpell=$,who=$,iSpellpower=$)
   {
      local iResistChance;

      if IsClass(who,&DM)
      {
         return FALSE;
      }
 
      if Send(oSpell,@IsHarmful)
      {
         iResistChance = MAGIC_RESIST;
         if IsClass(oSpell,&Dazzle)
            OR IsClass(oSpell,&Blind)
            OR IsClass(oSpell,&Hold)
         {
            % 3 times the chance to resist.  Brings 30% up to 90%
            iResistChance = (iResistChance * 3);
         }

         if iSpellPower < 40
            OR Random(0,100) < iResistChance
         {
            return TRUE;
         }
      }
      
      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
