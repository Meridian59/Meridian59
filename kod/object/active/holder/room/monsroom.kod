% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
MonsterRoom is Room

constants:

   include blakston.khd

resources:

classvars:

   % If true, reduce monster spawn rate when there are few players in the room
   vbScaleSpawnRateWithPlayers = FALSE
   
properties:

   piGen_Time = 20000
   ptGen = $

   ptOkay_To_Load = $
   pbOkay_To_Load = TRUE
   
   % Timer makes 'em wait before new batch loads.
   
   % This is how long they have to wait before room resets, in ms.
   piReload_Wait_Time = 180000
   
   % Only loads the first monster in list plMonsters if set to true.
   pbLoad_first_monster_only = FALSE

   % Minimum # of monsters loaded by first_user_enters.
   piInit_count_min = 1

   % Maximum # of monsters loaded by initial load.
   %  Must never be greater than # of available coordinates!
   piInit_count_max = 5

   % percentage chance that you'll get a new monster when timer expires
   piGen_percent = 100

   % maximum number of total monsters a room can hold       
   piMonster_count_max = 10

   % Number of monsters currently in room
   piMonster_count = 0

   % List of monsters we spawn, if for: [monster class, chance to spawn]
   plMonsters = $

   % List of 2 elem lists with row & col to make monsters
   plGenerators = $ 

   % Should we generate monsters?
   pbGenerateMonsters = TRUE

messages:

   Delete()
   {
      if ptGen <> $
      {
         DeleteTimer(ptGen);
         ptGen = $;
      }
      
      if ptOkay_To_Load <> $
      {
         DeleteTimer(ptOkay_To_Load);
         ptOkay_To_Load = $;
         pbOkay_To_Load = TRUE;
      }
      
      propagate;
   }

   GetMonsterList()
   {
      return plMonsters;
   }

   GetMonsterGenTime()
   {
      local iWaitTime, iNumberOfPlayers, iMaxPlayers;
      
      iWaitTime = (piGen_Time * Send(Send(SYS, @GetSettings), @GetSpawnRate)) / 100;

      % Reduce spawn time for up to 5 people.
      iNumberOfPlayers = Send(self,@CountHoldingHowMany,#class=&Player);

      iMaxPlayers = 5;
      if vbScaleSpawnRateWithPlayers
      {
        iNumberOfPlayers = Bound(iNumberOfPlayers,1,iMaxPlayers);
      }
      else
      {
        % Always have max spawn rate
        iNumberOfPlayers = iMaxPlayers;
      }
      iWaitTime = iWaitTime / iNumberOfPlayers;

      return iWaitTime;
   }

   MonsterGenTimer()
   {
      ptGen = $;

      Send(self,@TryCreateMonster);
      
      ptGen = CreateTimer(self,@MonsterGenTimer,send(self,@GetMonsterGenTime));

      return;
   }

   SetMonsterGeneration(bValue=TRUE)
   {
      pbGenerateMonsters = bValue;
      
      return;
   }

   TryCreateMonster(initroom = FALSE,loadfirst = FALSE)
   "Will try to create a monster in the room.  Initroom=TRUE means it's"
   "being called when first player enters."
   {
      local oMonster,iRoll,iTotal,lMonster_info;

      if NOT send(self,@IsMonsterCountBelowMax)
         OR NOT pbGenerateMonsters
      {
         return;
      }

      iRoll = Random(1,100);
      if (iRoll > piGen_percent) and (initroom=FALSE) {	 return; }
      
      if NOT loadfirst
      {
         iRoll = Random(1,100);
      }
      else
      {
         iRoll = 1;
      }

      iTotal = 0;
      for lMonster_info in plMonsters
      {
         iTotal = iTotal + Nth(lMonster_info,2);

         if iRoll <= iTotal
         {
            oMonster = Create(First(lMonster_info));
 
            if not Send(self,@GenerateMonster,#oMonster=oMonster)
            {
               return 0;
            }
            
	         break;
	      }
      }
      
      return 1;
   }

   GenerateMonster(oMonster=$, iRow=0, iCol=0, bStack=FALSE)
   "Pulled outside the function to be callable outside of the function"
   "Can generate a monster at a specific location, or you can let it be put at a gen point"
   {
      local oOldOwner, iMRow, iMCol, lPos, iRoll;
      
      iMRow = iRow;
      iMCol = iCol;

      if oMonster = $
      {
         return;
      }

      oOldOwner = send(oMonster,@GetOwner);
      if oOldOwner <> $
      {
         % Remove it from it's previous location.  This also stops the "warping" effect if
         %  we try to "respawn" a monster in the same room.
         if send(oOldOwner,@ReqLeaveHold,#what=oMonster)
         {
            send(oOldOwner,@LeaveHold,#what=oMonster);
         }
         else
         {
            % Won't go?  Can't do anything, then.
            return;
         }
      }
      
      if (iMRow=0 and iMCol=0)
      {
         if plGenerators = $
         {	    
            iMRow = Random(1,piRows);
            iMCol = Random(1,piCols);
         }
         else
         {
            iRoll = Random(1,Length(plGenerators));
            lPos = Nth(plGenerators,iRoll);
            iMRow = First(lPos);
            iMCol = Nth(lPos,2);
         }
      }
      
      if Send(self,@ReqNewHold,#what=oMonster,#new_row=iMRow,#new_col=iMCol)
         AND (Send(self,@ReqSomethingMoved,#what=oMonster,#new_row=iMRow,#new_col=iMCol)
              OR bStack)
      {
         Send(self,@NewHold,#what=oMonster,#new_row=iMRow,#new_col=iMCol,
              #fine_row=FINENESS/2,#fine_col=FINENESS/2);
      }
      else
      {
         Send(oMonster,@Delete);
         
         return FALSE;
      }
      
      return TRUE;
   }

   IsMonsterCountBelowMax()
   {
      return (piMonster_count < piMonster_count_max); 
   }

   NewHold(what = $)
   {
      if IsClass(what,&Monster)
      {
         piMonster_count = piMonster_count + 1;
      }
      
      propagate;
   }

   LeaveHold(what = $)
   {
      if IsClass(what,&Monster)
      {
         piMonster_count = piMonster_count - 1;
      }
      
      propagate;
   }

   FirstUserEntered(what = $)
   "This is run when a player first enters the room.  Loads a random #"
   "of critters to keep things lively.  Loads no monsters if there"
   "are already monsters here or if area cleaned out recently"
   {
      local iHowMany, oMonster, iLength, i, bFound;

      iLength = Length(plGenerators);

      if NOT pbGenerateMonsters
      {
         propagate;
      }

      if ptGen <> $
      {
         debug("Monster room got firstuserentered when apparently that wasn't true");
         
         propagate;
      }

      % Find a monster in the room, and update our count of monsters in the
      %  in the room.  Sometimes this becomes inaccurate.
      bFound = FALSE;
      piMonster_Count = 0;
      for i in plActive
      {
         oMonster = Send(self,@HolderExtractObject,#data=i);
         % Count monsters, but not NPCs.
         if IsClass(oMonster,&Monster)
            AND NOT Send(oMonster,@HasAttribute,#mask=MOB_NOFIGHT)
         {
            bFound = TRUE;

            % Increment our monster count.
            piMonster_Count = piMonster_Count + 1;
         }
      }
      
      if bFound OR NOT pbOkay_To_Load
      {
         ptGen = CreateTimer(self,@MonsterGenTimer,send(self,@GetMonsterGenTime));
         
         propagate;                  
      }

      iHowMany = random(piInit_count_min,piInit_count_max); 
			
      if iHowMany > iLength
      {
         iHowMany = iLength;
      }

      while iHowMany > 0 AND piMonster_Count < piMonster_count_max
      {
         Send(self,@TryCreateMonster,#initroom=TRUE,#loadfirst=pbLoad_First_Monster_Only);
         iHowMany = iHowMany - 1;
      }
      
      ptGen = CreateTimer(self,@MonsterGenTimer,send(self,@GetMonsterGenTime));
      
      propagate;
   }
   
   OkayToLoadTimer()
   "When a player leaves a room with no monsters in it, this timer starts"
   "to be sure a player doesn't return immediately and trigger a reset."
   {
      ptOkay_To_Load = $;  
      pbOkay_To_Load = TRUE;

      return;
   }

   LastUserLeft(what = $)
   "OkaytoloadTimer started if no monsters are left alive, to prevent"
   "Endless exp boosting."
   {
      local iWaitTime;
   
      if ptGen <> $
      {
         DeleteTimer(ptGen);
         ptGen = $;
      }
      else
      {
         debug("Monster room got lastuserleft when apparently that wasn't true");
      } 

      if (ptOkay_To_Load = $) AND (piMonster_count = 0)
      {
         iWaitTime = (piReload_Wait_Time * Send(Send(SYS, @GetSettings), @GetSpawnRate)) / 100;
         ptOkay_To_Load = CreateTimer(self,@OkaytoLoadTimer,iWaitTime);
         pbOkay_To_Load = FALSE;     
      }
      
      propagate;
   }

   ActivateAllGenerators(cClass =$)
   "A command to test the room--makes all generators create a monster, so"
   "that one can easily see where the generators are."
   {
      local lPos, iRow, iCol, oMonster, bReqNewHold, bReqSomethingMoved, iCount, iLength;
      
      iCount = 1;  %initialize iCount
      
      if plGenerators = $
      {
         debug("There are no generators in this room!");
         
         return 0;
      }
      
      iLength = Length(plGenerators);
      
      while iCount <= iLength
      {
         if cClass = $
         {
            oMonster = Create(&apple);
         }
         else
         {
            oMonster = Create(cClass);
         }
         
         lPos = Nth(plGenerators, iCount);
         iRow = First(lPos);
         iCol = Nth(lPos, 2);
         
         bReqNewHold = Send(self,@ReqNewHold,#what=oMonster,#new_row=iRow,#new_col=iCol);
         bReqSomethingMoved = Send(self,@ReqSomethingMoved,#what=oMonster,#new_row=iRow,#new_col=iCol);
         
         if bReqNewHold and bReqSomethingMoved
         {
            Send(self, @NewHold, #what = oMonster, #new_row = iRow, #new_col = iCol);	    
         }
         
         iCount = iCount + 1;
      }
      
      return iCount - 1;
   }
	 
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

