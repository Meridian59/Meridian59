% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
OutdoorsC2 is FeyForest

constants:

   include blakston.khd

resources:

   room_name_OutdoorsC2 = "The Vale of Sorrows"
   room_OutdoorsC2 = c2.roo
   OutdoorsC2_music = walk7.mid

   c2_elhai_win = \
      "~IVictorious, the elhai invite all of those pure of heart to drink "
      "deeply from their mana node."
   c2_dirhai_win = \
      "~ITriumphant in their dark victory, the dirhai invite any of similiar "
      "scruples to meld with the node."
   waterfall_sound_outdoorsc2 = wfall2.wav

classvars:

   vrName = room_name_OutdoorsC2

   % This is where this section of the faerie forest will 'aim' for on the
   %  karmic scale.
   viEquilibrium = 50              

   viTeleport_row = 15
   viTeleport_col = 13

properties:

   prRoom = room_OutdoorsC2
   prMusic = OutdoorsC2_music
   piRoom_num = RID_C2
   
   piGen_time = 50000
   
   plFey_Forest = $

   ptFeyNode = $      %% Faerie node appears for 30 seconds.

messages:

   Constructor()
   {
      plFey_Forest = [RID_A1, RID_B1, RID_B2, RID_C1, RID_C2, RID_C3,RID_D2, RID_D1];
      plGenerators = [ [24, 17], [21, 39], [26, 22], [28, 39], [24, 18], [21, 40],
                       [26, 23], [28, 40], [23, 17], [20, 39], [25, 22], [27, 39],
                       [23, 16], [20, 38], [25, 21], [27, 38]
                     ];

      % Create the node now.
      Create(&FeyNode,#node_num=NODE_FAERIE,#karma=0,#iRoomNum=piRoom_num);

      propagate;
   }

   Constructed()
   {
      %  each sound is [wave_file, row, col, cutoff radius, maximum volume]
      plLooping_sounds = [[ waterfall_sound_outdoorsc2, 42, 28, 100, 100 ]];

      propagate;
   }

   KarmaChanged(karma = $)
   {
      local i, oRoom;

      if karma > KVERY_GOOD AND karma < KVERY_EVIL
      {
         % Node should be gone, if it isn't
         Send(self,@KillNode);

         return;
      }
	
      karma = Send(self,@GetKarma);
      for i in plFey_Forest
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=i);

         if oRoom = $
         {
            continue;
         }

         if karma <> Send(oRoom,@Getkarma)
         {
            Send(self,@KillNode);

            return;
         }
      }

      % All rooms have the same karma, which is either 1 or 5.  Node appears.
      Send(self,@AppearNode);

      return;						
   }

   FeyNodeTimer()
   {
      ptFeyNode = $;
      Send(self,@KarmaChanged,#karma=Send(self,@GetKarma));

      return;
   }

   AppearNode()
   {
      local oNode;

      oNode = Send(self,@FindHolding,#class=&ManaNode);
      if oNode <> $
      {
         % A node is already here.  Do nothing.
         return;
      }

      if Send(self,@GetKarma) = KVERY_GOOD
      {
         Send(self,@SomeoneSaid,#type=SAY_MESSAGE,#what=self,#string=c2_elhai_win);
         oNode = Send(SYS,@FindNodeByNum,#num=NODE_FAERIE);
         Send(oNode,@NodeAppear,#where=self,#karma=1,#row=23,#col=30,
              #fine_row=0,#fine_col=0);
      }

      if Send(self,@GetKarma) = KVERY_EVIL
      {
         Send(self,@SomeoneSaid,#type=SAY_MESSAGE,#what=self,#string=c2_dirhai_win);
         oNode = Send(SYS,@FindNodeByNum,#num=NODE_FAERIE);
         Send(oNode,@NodeAppear,#where=self,#karma=2,#row=23,#col=30,
              #fine_row=0,#fine_col=0);
      }
      
      if ptFeyNode = $
      {
         ptFeyNode = CreateTimer(self,@FeyNodeTimer,30000);
      }

      Send(self,@SetSectorLight,#sector=40,#light_effect=FLICKER_ON);
      Send(self,@SetSectorLight,#sector=41,#light_effect=FLICKER_ON);

      return;
   }

   KillNode()
   {
      local i;

      % Don't kill the node until time has elapsed.
      if ptFeyNode <> $
      {
         return;
      }          
				          
      for i in plPassive
      {
         if IsClass(First(i),&ManaNode)
         {
            Send(First(i),@NodeDisappear);
         }
      }

      Send(self,@SetSectorLight,#sector=40,#light_effect=FLICKER_OFF);
      Send(self,@SetSectorLight,#sector=41,#light_effect=FLICKER_OFF);

      return;
   }

   SetRoomKarma(karma = $)
   {  
      % Change waterfall level.
      if (karma = KVERY_EVIL)
      {       
         Send(self,@SetSector,#sector=15,#animation=ANIMATE_FLOOR_LIFT,
              #height=120,#speed=0);
         Send(self,@SetSector,#sector=16,#animation=ANIMATE_FLOOR_LIFT,
              #height=120,#speed=0);
         Send(self,@SetSector,#sector=17,#animation=ANIMATE_FLOOR_LIFT,
              #height=120,#speed=0);
         Send(self,@SetSector,#sector=18,#animation=ANIMATE_FLOOR_LIFT,
              #height=128,#speed=0);
         Send(self,@SetSector,#sector=9,#animation=ANIMATE_FLOOR_LIFT,
              #height=364,#speed=0);
         Send(self,@SetSector,#sector=10,#animation=ANIMATE_FLOOR_LIFT,
              #height=464,#speed=0);
      }
      else
      {       
         Send(self,@SetSector,#sector=15,#animation=ANIMATE_FLOOR_LIFT,
              #height=288,#speed=0);
         Send(self,@SetSector,#sector=16,#animation=ANIMATE_FLOOR_LIFT,
              #height=208,#speed=0);
         Send(self,@SetSector,#sector=17,#animation=ANIMATE_FLOOR_LIFT,
              #height=464,#speed=0);
         Send(self,@SetSector,#sector=18,#animation=ANIMATE_FLOOR_LIFT,
              #height=364,#speed=0);
         Send(self,@SetSector,#sector=9,#animation=ANIMATE_FLOOR_LIFT,
              #height=444,#speed=0);
         Send(self,@SetSector,#sector=10,#animation=ANIMATE_FLOOR_LIFT,
              #height=544,#speed=0);
      }

      % Lower to a trickle when slightly evil.
      if (karma > NEUTRAL)            
      {       
         Send(self,@SetSector,#sector=5,#animation=ANIMATE_FLOOR_LIFT,
              #height=120,#speed = 0);
         Send(self,@SetSector,#sector=6,#animation=ANIMATE_FLOOR_LIFT,
              #height=120,#speed = 0);
         Send(self,@SetSector,#sector=7,#animation=ANIMATE_FLOOR_LIFT,
              #height=120,#speed = 0);
         Send(self,@SetSector,#sector=8,#animation=ANIMATE_FLOOR_LIFT,
              #height=128,#speed = 0);         
      }
      else
      {       
         Send(self,@SetSector,#sector=5,#animation=ANIMATE_FLOOR_LIFT,
              #height=288,#speed=0);
         Send(self,@SetSector,#sector=6,#animation=ANIMATE_FLOOR_LIFT,
              #height=208,#speed=0);
         Send(self,@SetSector,#sector=7,#animation=ANIMATE_FLOOR_LIFT,
              #height=464,#speed=0);
         Send(self,@SetSector,#sector=8,#animation=ANIMATE_FLOOR_LIFT,
              #height=364,#speed=0);         
      }

      propagate;
   }

   CreateStandardExits()
   {
      plEdge_Exits = $;
      plEdge_Exits = Cons([LEAVE_NORTH, RID_C1, 29, 39, ROTATE_NONE], plEdge_exits);

      propagate;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=22,#new_col=44);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=25,#new_col=45);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=25,#new_col=36);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=21,#new_col=37);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=16,#new_col=35);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=16,#new_col=37);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=28,#new_col=28);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=30,#new_col=19);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=32,#new_col=22);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=29,#new_col=22);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=32,#new_col=26);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=34,#new_col=20);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=23,#new_col=21);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=19,#new_col=24);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=40,#new_col=35);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=19,#new_col=20);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=41,#new_col=26);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=17,#new_col=16);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=22,#new_col=11);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=26,#new_col=16);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=14,#new_col=26);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=10,#new_col=26);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=05,#new_col=31);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=13,#new_col=35);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=31,#new_col=41);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=50,#new_col=23);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=48,#new_col=28);
      Send(self,@NewHold,#what=Create(&FeyTree),#new_row=51,#new_col=32);

      propagate;
   }

   GetFeyForest()
   {
      return plFey_Forest;
   }
   
   Delete()
   {
      local oNode;

      % Delete 'our' node.  It's our responsibility even if it's not in
      %  the room at the time.
      oNode = Send(SYS,@FindNodeByNum,#num=NODE_FAERIE);
      if oNode <> $
      {
         Send(oNode,@Delete);        
      }

      if ptFeyNode <> $
      {
         DeleteTimer(ptFeyNode);
         ptFeyNode = $;
      }      		             

      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
