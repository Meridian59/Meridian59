% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
OutdoorsI9 is MonsterRoom

constants:

   SECTOR_DOOR = 1  

   % 10 seconds
   DOORWAY_DELAY = 10000   

   include blakston.khd

resources:

   room_name_i9 = "Ukgoth, Holy Land of Trolls"
   room_i9 = i9.roo
   i9_music = walk4.mp3

   i9_qor="Qor the Vile"

   i9_sound_rsc = down2.wav

   i9_node_name = "the Heart of Zjiria"
   i9_node_desc = \
      "You realize you've found one of the rarest mana nodes, named after "
      "Qor's most trusted lieutenant.\n\n%s"

   i9_portal_icon_rsc = teleport.bgf

classvars:

   vrName = room_name_i9

   viTeleport_row = 42  
   viTeleport_col = 14

   viTerrain_type = TERRAIN_MOUNTAIN | TERRAIN_MYSTICAL

properties:

   prRoom = room_i9
   piRoom_num = RID_I9

   prMusic = i9_music

   piBaseLight = LIGHT_DARK

   piDirectional_percent = DIRECTIONAL_PERCENT_OUTDOORS

   ptDoorway = $
   
   piGen_time = 70000
   piGen_percent = 85

   piInit_count_min = 9
   piInit_count_max = 12

   piMonster_count_max = 15

   poNode = $
   piPortal_counter = 0
   pbPuzzle = TRUE

messages:

   Constructed()
   {
      plMonsters = [ [&Troll, 100] ];

      plGenerators = [ [9, 50], [11, 30], [6, 22], [24, 31], [25, 50],
                       [30, 53], [52, 53], [36, 59], [50, 36], [42, 15], 
                       [52, 8], [60, 37], [62, 43], [32, 12], [10,10]
                     ];

      % Just construct the Node.  We can find and place it later.
      Create(&ManaNode,#node_num=NODE_i9,#name_rsc=i9_node_name,
             #desc_rsc=i9_node_desc,#iRoomNum=piRoom_num);

      propagate;
   }

   CreateStandardExits()
   {
      plEdge_exits = $;

      plEdge_Exits = Cons([LEAVE_NORTH, RID_CASTLE1C, 21, 3, ANGLE_EAST], plEdge_exits);
      plEdge_Exits = Cons([LEAVE_EAST, RID_I8, 60, 23, ROTATE_NONE], plEdge_exits);
      plEdge_Exits = Cons([LEAVE_SOUTH, RID_H9, 21, 43, ROTATE_NONE], plEdge_exits);

      propagate;
   }

   SomeoneSaid(what=$,string=$)
   {
      local lPassive, i, each_obj;

      if StringEqual(string,i9_qor)
      {
         lPassive = Send(what,@GetHolderPassive);
         for i in lPassive
         {
            each_obj = Send(what,@HolderExtractObject,#data=i);                
            if IsClass(each_obj,&Scepter)
            {
               for i in plActive
               {
                  Send(First(i),@WaveSendUser,#wave_rsc=i9_sound_rsc);
               }

               Send(self,@SetSector,#sector=SECTOR_DOOR,
                    #animation=ANIMATE_FLOOR_LIFT,
                    #height=340,#speed=16);
               ptDoorway = CreateTimer(self,@DoorCloseTimer,DOORWAY_DELAY);
               Send(each_obj,@Delete);

               break;
            }
         }
      }

      propagate;
   }

   DoorCloseTimer()
   {
      ptDoorway = $;
      Send(self,@SetSector,#sector=SECTOR_DOOR,#animation=ANIMATE_FLOOR_LIFT,
           #height=440,#speed=16);

      return;
   }

   Delete()
   {
      local oNode;

      oNode = Send(SYS,@FindNodeByNum,#num=NODE_I9);
      if oNode <> $
      {
         % delete 'our' node
         Send(oNode,@Delete);  
      }

      poNode = $;
      
      if ptDoorway <> $
      {
         deletetimer(ptDoorway);
         ptDoorway = $;
      }

      propagate;
   }

   RecalcLightAndWeather()
   {
      local ihour,iLight_effect, i, bFound;

      ihour = Send(SYS,@GetHour);

      if iHour = 0
      {
         iLight_effect = FLICKER_ON;
      }
      else
      {
         iLight_effect = FLICKER_OFF;
      }

      Send(self,@SetSectorLight,#sector=2,#light_effect=iLight_effect);
      
      if ihour = 0 AND poNode = $
      {
         poNode = Send(SYS,@findnodebynum,#num=NODE_I9);
         Send(poNode,@NodeAppear,#where=self,#row=27,#col=61,
              #fine_row=48,#fine_col=40);   

         for i in plActive
         {
            if IsClass(First(i),&StoneTroll)
            {
               propagate;
            }
         }

         Send(self,@Newhold,#what=Create(&StoneTroll),#new_row=28,#new_col=63,
              #fine_row=40,#fine_col=32,#new_angle=ANGLE_NORTH_WEST);
         Send(self,@Newhold,#what=Create(&StoneTroll),#new_row=28,#new_col=59,
              #fine_row=40,#fine_col=48,#new_angle=ANGLE_NORTH_EAST);
         Send(self,@Newhold,#what=Create(&StoneTroll),#new_row=25,#new_col=61,
              #fine_row=48,#fine_col=48,#new_angle=ANGLE_SOUTH);         
                                           
         propagate;
      }

      if ihour = 1
      {
         if poNode <> $
         {
            Send(poNode,@NodeDisappear);
            poNode = $;
         }
      }

      piPortal_counter = piPortal_counter - 1;
      if (piPortal_counter <= 0)
      {
         Send(self,@ClosePortalToTemple);
      }

      propagate;
   }

   % Added because our players are too smart for their own good.
   %  player casts Martyr's Battleground (or Truce on Sacred Haven)
   %  while the tokens are on the ground, and a portal to the Martyr's
   %  Battleground area (and node) appears.

   SpellCast(who = $, oSpell = $, lItems = $)
   {
      local i, bOne, bTwo, bThree, bFour, bFive;

      if not pbPuzzle
      {
         return;
      }

      if oSpell <> $
         AND (Send(oSpell,@GetSpellNum) = SID_MARTYRS_BATTLEGROUND
              OR ((NOT Send(SYS,@IsPKAllowed))
                  AND Send(oSpell,@GetSpellNum) = SID_TRUCE))
      {      
         bOne = FALSE;
         bTwo = FALSE;
         bThree = FALSE;
         bFour = FALSE;
         bFive = FALSE;

         for i in plPassive
         {
            if IsClass(First(i),&OneToken)
               AND Send(self,@IsInStoneHenge,#what=First(i))
            {
               bOne = TRUE;
            }

            if IsClass(First(i),&TwoToken)
               AND Send(self,@IsInStoneHenge,#what=First(i))
            {
               bTwo = TRUE;
            }
            
            if IsClass(First(i),&ThreeToken)
               AND Send(self,@IsInStoneHenge,#what=First(i))
            {
               bThree = TRUE;
            }
            
            if IsClass(First(i),&FourToken)
               AND Send(self,@IsInStoneHenge,#what=First(i))
            {
               bFour = TRUE;
            }
            
            if IsClass(First(i),&FiveToken)
               AND Send(self,@IsInStoneHenge,#what=First(i))
            {
               bFive = TRUE;
            }
         }

         if NOT bOne
            OR NOT bTwo
            OR NOT bThree
            OR NOT bFour
            OR NOT bFive
         {
            propagate;
         }

         % Okay, all the tokens should be here and in stonehenge.
         %  Open the portals
         Send(self,@OpenPortalToTemple);   
      }
      
      propagate;
   }

   IsInStonehenge(what=$)
   {
      local iRow, iCol;

      if what= $  
      {
         debug("what = $!  That ain't right!");

         return FALSE;
      }

      iRow = Send(what,@GetRow);
      iCol = Send(what,@GetCol);
      
      if ((iRow >= 25 ) AND (iRow <= 29)
         AND (iCol >= 59) AND (iCol <= 63))
      {
         return TRUE;
      }

      return FALSE;
   }

   OpenPortalToTemple()
   {
      local i, oPortal, oRoom;

      for i in plActive
      {
         if IsClass(First(i),&Portal) 
         { 
            % Refresh the portal counter, then return
            piPortal_counter = 10;

            return;
         }
      }

      for i in plPassive
      {
         if First(i) <> $ AND IsClass(First(i),&token)
         {
            Send(First(i),@RandomTeleport);
         }         
      }

      oPortal = Create(&Portal,#dest_room_num=RID_CANYON2,
                       #dest_row=27,#dest_col=61,#icon=i9_portal_icon_rsc);
      Send(self,@Newhold,#what=oPortal,#new_row=25,#new_col=61,
           #fine_row=48,#fine_col=48,#new_angle=ANGLE_NORTH);

      oRoom = Send(SYS,@FindRoomByNum,#num=RID_CANYON2);
      Send(oRoom,@ActivatePortal);
      piPortal_Counter = 10;

      return;
   }

   ClosePortalToTemple()
   {
      local i, oRoom;

      for i in plActive
      {
         if IsClass(First(i),&Portal)
         {  
            Send(First(i),@Delete);
            oRoom = Send(SYS,@FindRoomByNum,#num=RID_CANYON2);
            Send(oRoom,@DeactivatePortal);
         }
      }      

      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
