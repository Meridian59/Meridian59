% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
OutdoorsKC2 is KCForest

constants:

   include blakston.khd

resources:

   room_name_OutdoorsKC2 ="Turf of the Warrior Avars"
   room_OutdoorsKC2 = KC2.roo
   OutdoorsKC2_music = avarwar.mid

classvars:

   vrName = room_name_OutdoorsKC2

   viTeleport_row = 9
   viTeleport_col = 33
   viTerrain_type = TERRAIN_JUNGLE

   viAvar_clan = AVARCLAN_ANTIMAGIC

properties:

   prRoom = room_OutdoorsKC2
   prMusic = OutdoorsKC2_music
   piRoom_num = RID_KC2

   piBaseLight = LIGHT_NICE
   piOutside_factor = 8

   piDirectional_percent = DIRECTIONAL_PERCENT_OUTDOORS

   piGen_time = 90000
   piGen_percent = 70

   piInit_count_min = 5
   piInit_count_max = 9

   piMonster_count_max = 12

messages:

   Constructed()
   {
      plMonsters = [ [&Avar,50], [&AvarShaman,10], [&Kriipa, 40] ];
      plGenerators = [ [5,14], [37,7], [25,12], [22,41], [44,38],
                       [44,38], [4,42], [18,27]
                     ];

      propagate;
   }

   CreateJungleItemCoords()
   {      
      plItem_coords = [ [&RainbowFern,25,20], [&RainbowFern,37,20], [&RainbowFern,10,48] ];

      % Do not propagate
      return;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=5,#new_col=31,#fine_row=0,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=11,#new_col=51,#fine_row=0,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=18,#new_col=46,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=31,#new_col=45,#fine_row=0,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=45,#new_col=40,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=43,#new_col=29,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE3),
           #new_row=24,#new_col=36,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE3),
           #new_row=10,#new_col=15,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE3),
           #new_row=10,#new_col=30,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=23,#new_col=18,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=3,#new_col=13,#fine_row=0,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=9,#new_col=6,#fine_row=0,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=16,#new_col=12,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE3),
           #new_row=36,#new_col=36,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=33,#new_col=15,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_TREE2),
           #new_row=36,#new_col=18,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);      

      propagate;
   }

   CreateStandardExits()
   {
      plEdge_Exits = $;
      plEdge_Exits = Cons([LEAVE_WEST, RID_KB2, 37, 56, ROTATE_NONE, ROW_IS_LESS_THAN, 35], plEdge_exits);      
      plEdge_Exits = Cons([LEAVE_WEST, RID_KB3, 8, 49, ROTATE_NONE, ROW_IS_GREATER_THAN, 35], plEdge_exits);
      plEdge_Exits = Cons([LEAVE_SOUTH, RID_KC3, 1, 36, ROTATE_NONE, NO_OTHER_CONDITIONS], plEdge_exits);

      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
