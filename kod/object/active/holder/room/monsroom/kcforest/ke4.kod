% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
OutdoorsKE4 is KCForest

% The new home of the Avar node!  2 ways to get this node:
%  The good way: Give offerings of food to the statue.  Good node appears.
%  The evil way: Slaughter enough avars in the village.  Evil node appears.

constants:

   include blakston.khd

   % This is the absolute value needed before we give the node.
   NODE_VALUE_NEEDED = 2000

   % The appropriate values for slaughting Avars.
   AVAR_VALUE = -150
   AVAR_CHIEFTAIN_VALUE = -200
   AVAR_SHAMAN_VALUE = -250

   % Time node is around, 30 seconds.
   NODE_APPEAR_TIME = 60000

   % Node appear location
   NODE_ROW = 34
   NODE_COL = 52
   NODE_FINE_ROW = 48
   NODE_FINE_COL = 0

   % We use this value when the node has already appeared.
   NODE_ALREADY_APPEARED = -100000

   % Offering Acceptance locations
   OFFERING_NORTH = 32
   OFFERING_SOUTH = 36
   OFFERING_WEST = 48
   OFFERING_EAST = 53

   % Must be synchronized with avarnode.kod
   AVARNODE_GOOD = 1
   AVARNODE_EVIL = 2

resources:

   room_name_OutdoorsKE4 = "Avar Village"
   room_OutdoorsKE4 = KE4.roo
   OutdoorsKE4_music = avarwar.mid

   KE4_good = \
      "~IThe ground shakes and the air seems a bit sweeter.  You have pleased "
      "the avar gods."
   KE4_evil = \
      "~IThe ground shakes and the air seems a bit fouler.  You have "
      "displeased the avar gods."
   KE4_good_final = \
      "~kA deep voice booms, \"~B~bYour offering is accepted.  Partake of my "
      "power, kindred spirits.~n~k\""
   KE4_evil_final = \
      "~kA deep voice bellows, \"~B~rDestroyers!  You kill my people and "
      "steal my power.  Yet, I will still get my revenge upon you!~n~k\""

   ke4_drown1 = "You'll drown, you idiot!  Stop it, already!"
   ke4_drown2 = \
      "The ocean seems boundless and the currents are strong - you dare not "
      "swim further."

classvars:

   vrName = room_name_OutdoorsKE4

   viTeleport_row = 38
   viTeleport_col = 44
   viTerrain_type = TERRAIN_JUNGLE

properties:

   prRoom = room_OutdoorsKE4
   prMusic = OutdoorsKE4_music
   piRoom_num = RID_KE4

   piBaseLight = LIGHT_NICE
   piOutside_factor = 8

   piDirectional_percent = 70

   piGen_time = 60000
   piGen_percent = 80

   piInit_count_min = 7
   piInit_count_max = 10

   piMonster_count_max = 12

   % Used to give cute message for people trying to drown themselves.
   piCount = 0

   % The new Avar node.
   poNode = $

   % This keeps trac of how long the Avar node sticks around.
   ptNodeDisappear = $

   % This is the tally of the value of the food offered to the idol.
   piNodeValue = 0

messages:

   Constructed()
   {
      plMonsters = [ [&Avar, 40], [&AvarChieftain, 35], [&Avarshaman,25] ];  
      plGenerators = [ [13,54], [20,39], [34,39], [44,37], [53,46],
                       [53,56], [46,66], [33,71], [22,67] ];

      % Create the node.
      poNode = Create(&AvarNode,#node_num=NODE_AVAR,#iRoomNum=piRoom_num);

      propagate;
   }

   Delete()
   {
      % Delete the node.
      if poNode <> $
      {
         Send(poNode,@Delete);
      }

      if ptNodeDisappear <> $
      {
         DeleteTimer(ptNodeDisappear);

         ptNodeDisappear = $;
      }      			     

      propagate;
   }

   CreateStandardExits()
   {
      plEdge_Exits = $;
      plEdge_Exits = Cons([LEAVE_WEST, RID_KD4, 33, 65, ROTATE_NONE], plEdge_exits);

      propagate;
   }
   
   StandardLeaveDir(what = $,dir = $,pos = $,new_room_num = $)
   {      
      if dir = LEAVE_NORTH
         OR dir = LEAVE_SOUTH
         OR dir = LEAVE_EAST
      {
         if isClass(what,&user)
         {
            if piCount > 20
            {
               Send(what,@MsgSendUser,#message_rsc=ke4_drown1);
               piCount = 0;
            }
            else
            {
               Send(what,@MsgSendUser,#message_rsc=ke4_drown2);
               piCount = piCount + 1;
            }
         }
      }
      
      propagate;
   }

   FirstUserEntered()
   {
      % Reset the node value.
      piNodeValue = 0;

      propagate;
   }

   NewHold(what=$)
   {
      % Get an offering of food if node isn't currently visible.
      if IsClass(what,&Food)
      {
         Post(self,@OfferingCheck,#what=what);
      }
      
      propagate;
   }

   OfferingCheck(what=$)
   {
      local iRow, iCol;

      iRow = Send(what,@GetRow);
      iCol = Send(what,@GetCol);

      if iRow = $ OR iCol = $
      {
         return;
      }

      if iRow >= OFFERING_NORTH
         AND iRow <= OFFERING_SOUTH
         AND iCol >= OFFERING_WEST
         AND iCol <= OFFERING_EAST
      {
         Send(self,@NodeChange,#amount=Send(what,@GetValue));
         Post(what,@Delete);
      }

      return;
   }

   SomethingKilled(what = $,victim = $)
   {
      % Killing avars is EVIL, mmmkay?
      if what <> $
         AND IsClass(what,&Player)
      {
         if IsClass(victim,&Avar)
         {
            Send(self,@NodeChange,#amount=AVAR_VALUE);
         }

         if IsClass(victim,&AvarChieftain)
         {
            Send(self,@NodeChange,#amount=AVAR_CHIEFTAIN_VALUE);
         }

         if IsClass(victim,&AvarShaman)
         {
            Send(self,@NodeChange,#amount=AVAR_SHAMAN_VALUE);
         }
      }

      propagate;
   }

   NodeChange(amount = 0)
   "Changes the god's favor based on actions in the room."
   {
      % No change if the node is still around.
      if piNodeValue = NODE_ALREADY_APPEARED
      {
         return;
      }
      
      piNodeValue = piNodeValue + amount;

      % Did we swing it far enough to be valuable?
      if piNodeValue >= NODE_VALUE_NEEDED
      {
         Post(self,@SomeoneSaid,#type=SAY_MESSAGE,#what=self,
              #string=KE4_good_final);
         Send(poNode,@NodeAppear,#karma=AVARNODE_GOOD,#where=self,
              #row=NODE_ROW,#col=NODE_COL,#fine_row=NODE_FINE_ROW,
              #fine_col=NODE_FINE_COL);
         ptNodeDisappear = CreateTimer(self,@NodeDisappear,NODE_APPEAR_TIME);
         piNodeValue = NODE_ALREADY_APPEARED;

         return;
      }
      else
      {
         if piNodeValue <= -NODE_VALUE_NEEDED
         {
            Post(self,@SomeoneSaid,#type=SAY_MESSAGE,#what=self,
                 #string=KE4_evil_final);
            Send(poNode,@NodeAppear,#karma=AVARNODE_EVIL,#where=self,
                 #row=NODE_ROW,#col=NODE_COL,#fine_row=NODE_FINE_ROW,
                 #fine_col=NODE_FINE_COL);
            ptNodeDisappear = CreateTimer(self,@NodeDisappear,
                                          NODE_APPEAR_TIME);
            piNodeValue = NODE_ALREADY_APPEARED;

            return;
         }
      }

      if amount > 0
      {
         % Always give the good message.
         Send(self,@Rumble);
         Post(self,@SomeoneSaid,#type=SAY_MESSAGE,#what=self,#string=KE4_good);
      }
      else
      {
         % Only post the evil message if they're onto something.
         %  Disrupting good or killed enough to be blatantly evil.
         if amount < 0
            AND (piNodeValue > 0
                 OR piNodeValue < -(NODE_VALUE_NEEDED/4))
         {
            Send(self,@Rumble);
            Post(self,@SomeoneSaid,#type=SAY_MESSAGE,#what=self,
                 #string=KE4_evil);
         }
      }

      return;
   }

   NodeDisappear()
   {
      ptNodeDisappear = $;
      Send(poNode,@NodeDisappear);

      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
