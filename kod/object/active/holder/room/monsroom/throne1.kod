% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Throne1 is MonsterRoom

constants:

   include blakston.khd

   % Delay before ghost pops again automatically.  About two hours (in seconds).
   GHOST_CYCLE = 7200 

resources:

   name_throne1 = "The Throne Room of Victoria Castle" 
   room_throne1 = throne1.roo

   throne1_music = castle2.mid

   throne1_ghost_spawn = \
      "~kA raspy voice moans, \"~r~IWitness my revenge, tresspasser!~I~k\""
   ghost_spawn_wav_rsc = ghost_respawn.wav

classvars:

   vrName = name_throne1

   viTeleport_row = 10
   viTeleport_col = 5

   viTerrain_type = TERRAIN_LAIR | TERRAIN_CASTLE

properties:

   piBaseLight = LIGHT_VERY_DARK / 2
   prRoom = room_throne1
   piRoom_num = RID_THRONE1

   prMusic = throne1_music

   piOutside_factor = OUTDOORS_NONE

   % two minutes (in ms)
   piDispose_delay = 2 * 60 * 1000

   ptGhost = $

messages:

   Constructed()
   {
      plMonsters = [ [&Zombie,20], [&TuskedSkeleton, 80] ];

      plGenerators = [ [5, 3], [9, 2], [13, 3],
                       [5, 9], [9, 10], [13, 9]];
      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 23, 4, RID_CASTLE1, 7, 18, ROTATE_NONE ],plExits);
      plExits = Cons([ 23, 5, RID_CASTLE1, 7, 19, ROTATE_NONE ],plExits);

      propagate;
   }

   FirstUserEntered()
   {
      % This is set in superclass, is set when it's okay to spawn monsters again.
      if pbOkay_To_Load
      {
         Send(self,@SpawnGhost);
      }

      propagate;
   }
   
   GhostTimer()
   {
      ptGhost = $;
      Send(self,@SpawnGhost);

      return;
   }

   SpawnGhost()
   {
      local iTime, i, oGhost;

      if ptGhost = $
      {
         % Randomize the time by 10%
         iTime = (GHOST_CYCLE * random(90,110)) / 100;
         % Convert to ms (numbers get too big if you do it above)
         iTime = iTime * 1000;
         ptGhost = CreateTimer(self,@GhostTimer,iTime);
      }

      if NOT pbGenerateMonsters
      {
         return;
      }

      for i in plActive
      {
         if IsClass(Send(self,@HolderExtractObject,#data=i),&Ghost)
         {
            return FALSE;
         }
		}       
		
      oGhost = Create(&Ghost);
      Send(self,@NewHold,#what=oGhost,#new_row=2,#new_col=5,#new_angle=ANGLE_SOUTH);

      if pbUser_in_room
      {
         Send(self,@SomeoneSaid,#type=SAY_MESSAGE,#string=throne1_ghost_spawn,
              #what=self);
         Send(self, @SomethingWaveRoom, #what=oGhost, 
              #wave_rsc=ghost_spawn_wav_rsc);
      }

      return TRUE;
   }

   CreateStandardObjects()
   {
      % throne
      Send(self,@NewHold,#what=Create(&Throne),
	   #new_row=1,#new_col=5,#new_angle=ANGLE_SOUTH);

      % left row of pillars 
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=16,#new_col=3,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=13,#new_col=3,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=10,#new_col=3,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=7,#new_col=3,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=4,#new_col=3,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=1,#new_col=3,#fine_col=56);

      % right row of pillars
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=16,#new_col=7,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=13,#new_col=7,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=10,#new_col=7,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=7,#new_col=7,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=4,#new_col=7,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=1,#new_col=7,#fine_col=8);

      % left row of braziers
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=11,#new_col=3,
           #fine_row=56,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=5,#new_col=3,
           #fine_row=56,#fine_col=56);

      % right row of braziers
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=11,#new_col=7,
           #fine_row=56,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=5,#new_col=7,
           #fine_row=56,#fine_col=8);

      return;
   }

   Delete()
   {
      if ptGhost <> $
      {
         DeleteTimer(ptGhost);
         ptGhost = $;
      }

      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
