% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
TosGraveyard is MonsterRoom

constants:

   include blakston.khd

resources:

   room_TosGraveyard = tosgrave.roo
   room_name_TosGraveyard = "The Graveyard of Tos"

   tosgraveyard_music = marion.mid
   wind_sound_tosgrave = ambcntry.wav
   wind1_sound_tosgrave = rs_wind.wav

classvars:

   vrName = room_name_TosGraveyard

   viTeleport_row = 14
   viTeleport_col = 18

properties:

   prRoom = room_TosGraveyard
   piRoom_num = RID_TOS_GRAVEYARD

   prMusic = tosgraveyard_music

   piBaseLight = LIGHT_DARK
   piOutside_factor = OUTDOORS_8

   plTombstones = $
   viTerrain_type = TERRAIN_CITY | TERRAIN_MYSTICAL

   % Minimum HP required for player combat in this room
   piMinHpPK = 76

messages:

   Constructed()
   {
%      include tosgrave.kmn ;
      plMonsters = [ [&Zombie, 85], [&Skeleton, 15] ];

      plGenerators = [ [9, 31], [7, 24], [6, 7], [12, 6], [20, 27],
                       [23, 16], [23, 7], [16, 14] ];
   %  each sound is [wave_file, row, col, cutoff radius, maximum volume]
      plLooping_sounds = [[ wind_sound_tosgrave, 1, 1, 200, 100 ]];
      propagate;
   }

   TryCreateMonster(initroom = FALSE,loadfirst = FALSE)
   {
      local iHour;
   
      iHour = Send(SYS,@GetHour);
      if iHour < 5 or iHour > 21 { propagate; }
      return;
   }

   AvailableTombstone(what = $)
   "When tombstones are created in here, they tell us they want to know about "
   "player deaths."
   {
      plTombstones = Cons(what,plTombstones);
      return;
   }

   LeaveHold(what = $)
   {
      local i;

      for i in plTombstones
      {
	 if i = what
	 {
	    plTombstones = DelListElem(plTombstones,what);
	    break;
	 }
      }

      propagate;
   }

   PlayerKilled(who = $,killer = $)
   "System calls this when a player is killed, in this room only."
   {
      local oTombstone;

      if plTombstones = $
      {  return; }

      % move tombstone at end of list to the beginning
      oTombstone = Nth(plTombstones,Length(plTombstones));
      plTombstones = DelListElem(plTombstones,oTombstone);
      plTombstones = Cons(oTombstone,plTombstones);

      Send(oTombstone,@SetPlayerTombstone,#who=who,#killer=killer);

      return;
   }

   CreateStandardExits()
   {
      plEdge_Exits = $;
      plEdge_Exits = Cons([LEAVE_EAST, RID_TOS, 50, 3, ROTATE_NONE], plEdge_exits);

      plExits = $;

      %% CRYPTS
      plExits = Cons([ 6, 29, RID_TOS_CRYPT, 23, 8, ROTATE_NONE ],plExits);         

%      plExits = Cons([ 27, 33, RID_TOS, 50, 4, ROTATE_NONE ],plExits);         
%      plExits = Cons([ 28, 33, RID_TOS, 50, 4, ROTATE_NONE ],plExits);         
%      plExits = Cons([ 29, 33, RID_TOS, 50, 4, ROTATE_NONE ],plExits);         

      propagate;
   }

   CreateYellZoneList()
   {
      plYell_Zone = [ RID_TOS ];
      propagate;
   }

   SomethingMoved(what = $,new_row = $,new_col = $)
   "Special teleports to connect to other rooms for the graveyard"
   {
%      local iAngle;
%      if (new_row > 26) and (new_col > 24)
%       {
%          if IsClass(what,&monster)
%          { return; }
%	  else
%          {
%             Send(SYS,@UtilGoNearSquare,#what=what,
%		  #where=Send(SYS,@FindRoomByNum,#num=RID_TOS),
%		  #new_row=41,#new_col=11,#new_angle=ANGLE_SOUTH);
%             return;
%	  }
%        }
      propagate;
   }


   CreateStandardObjects()
   {

%      include tosgrave.ktm ;
      
      % some haphazard tombstones

      Send(self,@NewHold,#what=Create(&Tombstone,
				      #tombstone_type=TOMBSTONE_NORMAL),
           #new_row=19,#new_col=25,#new_angle=ANGLE_SOUTH);

      Send(self,@NewHold,#what=Create(&Tombstone,
				      #tombstone_type=TOMBSTONE_CROSS),
           #new_row=25,#new_col=6,#new_angle=ANGLE_SOUTH_EAST);

      Send(self,@NewHold,#what=Create(&Tombstone,
				      #tombstone_type=TOMBSTONE_NORMAL),
	   #new_row=7,#new_col=22,#new_angle=ANGLE_SOUTH);

      Send(self,@NewHold,#what=Create(&Tombstone,
				      #tombstone_type=TOMBSTONE_CROSS),
	   #new_row=10,#new_col=6,#new_angle=ANGLE_NORTH_WEST);

      Send(self,@NewHold,#what=Create(&Tombstone,
				      #tombstone_type=TOMBSTONE_CROSS),
           #new_row=10,#new_col=14,#new_angle=ANGLE_NORTH_EAST);

      Send(self,@NewHold,#what=Create(&Tombstone,
				      #tombstone_type=TOMBSTONE_CROSS),
	   #new_row=12,#new_col=17,#new_angle=ANGLE_WEST);

      Send(self,@NewHold,#what=Create(&Tombstone,
				      #tombstone_type=TOMBSTONE_NORMAL),
           #new_row=14,#new_col=7,#new_angle=ANGLE_SOUTH_EAST);

      Send(self,@NewHold,#what=Create(&Tombstone,
				      #tombstone_type=TOMBSTONE_NORMAL),
	   #new_row=14,#new_col=25,#new_angle=ANGLE_WEST);

      Send(self,@NewHold,#what=Create(&Tombstone,
				      #tombstone_type=TOMBSTONE_NORMAL),
           #new_row=17,#new_col=26,#new_angle=ANGLE_NORTH);

      Send(self,@NewHold,#what=Create(&Tombstone,
				      #tombstone_type=TOMBSTONE_NORMAL),
	   #new_row=18,#new_col=12,#new_angle=ANGLE_SOUTH_EAST);

      Send(self,@NewHold,#what=Create(&Tombstone,
				      #tombstone_type=TOMBSTONE_CROSS),
	   #new_row=17,#new_col=19,#new_angle=ANGLE_NORTH);



      propagate;
   }

   CreatePeriodicSounds()
   {
      plPeriodic_sounds = [ wind1_sound_tosgrave ];
      pbPeriodic_sound_random_location = True;

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

