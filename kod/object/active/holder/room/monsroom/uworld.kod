% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Underworld is MonsterRoom

constants:

   include blakston.khd

   MAINTENANCE_DELAY = 600000  %% (10 minutes)
   DELETE_PORTAL_DELAY = 60000 %% (60 Seconds)

resources:

   room_name_underworld = "The Underworld"
   room_underworld = uworld.roo
   underworld_music = undrwrld.mid

   hell_projectile_icon_rsc = lightnin.bgf
   portal_zap_sound = fbolt.wav

   underworld_assgame = "Something forces you to stay your hand."

   portal_tos = "Looking in the portal, you see the bustling bar of Familiars."
   portal_marion = "Through the portal, you see the laid-back atmosphere of the Limping Toad."
   portal_jasper = "The quiet Yonder Inn of Jasper lies through this portal."
   portal_cornoth = "A lazy inn next to a quiet creek rests on the other side of this portal."
   portal_barloque = "Gazing into the portal, you see an expensive inn in a bustling city."

   zap_to_corpse = "Entering the portal you wander about the netherworld, but find yourself drawn out..."
   zap_to_home   = "You enter the portal, and find yourself lost, confusion starts to take over when you find yourself home."

   try_light_unlit = "Waving your hand past the cold brazier, a warm flame ignites."
   try_light_lit = "You wave your hand over the lit brazier, and flames lick at your fingertips."

   burning_wading_sound = frying.wav

classvars:

   vrIcon = hell_projectile_icon_rsc

   vrName = room_name_underworld

   viTeleport_row = 23
   viTeleport_col = 19

   viPermanent_flags = ROOM_NO_COMBAT | ROOM_SAFELOGOFF

   vrWading_Sound = burning_wading_sound

   viTerrain_type = TERRAIN_MYSTICAL | TERRAIN_LAVA

properties:

   ptMaintenance = $
   ptReset = $

   pbLitA = TRUE
   pbLitB = TRUE
   pbLitC = TRUE
   pbLitD = TRUE
   pblite = TRUE

   poBrazier1 = $
   poBrazier2 = $
   poBrazier3 = $
   poBrazier4 = $
   poBrazier5 = $

   poPortal1 = $
   poPortal2 = $
   poPortal3 = $
   poPortal4 = $
   poPortal5 = $

   plCorpses = $

   prRoom = room_underworld
   piRoom_num = RID_UNDERWORLD

   piBaseLight = 128
   piOutside_factor = OUTDOORS_NONE

   prMusic = underworld_music

messages:
   
   Constructor()
   {
      ptMaintenance = CreateTimer(self,@MaintenanceTimer,MAINTENANCE_DELAY);
      Create(&CorpseNode,#node_num=NODE_CORPSENODE);

      propagate;
   }

   MaintenanceTimer()
   {
      if NOT pbuser_in_room
      {
         send(self,@ResetPuzzle);
      }

      ptMaintenance = CreateTimer(self,@MaintenanceTimer,MAINTENANCE_DELAY);

      return;
   }

   Delete()
   {
      local oNode;

      oNode = send(SYS,@FindNodeByNum,#num=NODE_CORPSENODE);     
      if oNode <> $
      {
         % Even if the node is not in the room, we must delete it to be sure
         %  it's not in the system list.
         send(oNode,@Delete);
      }

      if ptMaintenance <> $
      {
         DeleteTimer(ptMaintenance);
         ptMaintenance = $;
      }

      if ptReset <> $
      {
         DeleteTimer(ptReset);
         ptReset = $;
      }

      poBrazier1 = $;
      poBrazier2 = $;
      poBrazier3 = $;
      poBrazier4 = $;
      poBrazier5 = $;
      
      poPortal1 = $;
      poPortal2 = $;
      poPortal3 = $;
      poPortal4 = $;
      poPortal5 = $;
      
      plCorpses = $; 
      
      propagate;
   }

   TogglePortal(What = $)
   {
      if What = 1
      {
         if pbLitA
         {
            pbLitA = FALSE;
            Send(poPortal1,@SetAnimation,#what=FALSE);
            Send(poBrazier1,@SetFlame,#has_flame=FALSE);
         }
         else
         {
            pbLitA = TRUE;
            Send(poPortal1,@SetAnimation,#what=TRUE);
            Send(poBrazier1,@SetFlame,#has_flame=TRUE);
         }
      }

      if What = 2
      {
         if pbLitB
         {
            pbLitB = FALSE;
            Send(poPortal2,@SetAnimation,#what=FALSE);
            Send(poBrazier2,@SetFlame,#has_flame=FALSE);
         }
         else
         {
            pbLitB = TRUE;
            Send(poPortal2,@SetAnimation,#what=TRUE);
            Send(poBrazier2,@SetFlame,#has_flame=TRUE);
         }
      }

      if What = 3
      {
         if pbLitC
         {
            pbLitC = FALSE;
            Send(poPortal3,@SetAnimation,#what=FALSE);
            Send(poBrazier3,@SetFlame,#has_flame=FALSE);
         }
         else
         {
            pbLitC = TRUE;
            Send(poPortal3,@SetAnimation,#what=TRUE);
            Send(poBrazier3,@SetFlame,#has_flame=TRUE);
         }
      }

      if What = 4
      {
         if pbLitD
         {
            pbLitD = FALSE;
            Send(poPortal4,@SetAnimation,#what=FALSE);
            Send(poBrazier4,@SetFlame,#has_flame=FALSE);
         }
         else
         {
            pbLitD = TRUE;
            Send(poPortal4,@SetAnimation,#what=TRUE);
            Send(poBrazier4,@SetFlame,#has_flame=TRUE);
         }
      }

      if What = 5
      {
         if pblite
         {
            pblite = FALSE;
            Send(poPortal5,@SetAnimation,#what=FALSE);
            Send(poBrazier5,@SetFlame,#has_flame=FALSE);
         }
         else
         {
            pblite = TRUE;
            Send(poPortal5,@SetAnimation,#what=TRUE);
            Send(poBrazier5,@SetFlame,#has_flame=TRUE);
         }
      }

      return;
   }
   
   BrazierLit(Brazier_obj = $,Who = $)
   {
      Local what, lit;
      
      lit = TRUE;
      what = brazier_obj;
      if what = poBrazier1 AND NOT pbLitA
      {
         Send(self,@Toggleportal,#what=1);
         Send(self,@Toggleportal,#what=3);
         Send(self,@Toggleportal,#what=4);
         lit = FALSE;
      }

      if what = poBrazier2 AND NOT pbLitB
      {
         Send(self,@Toggleportal,#what=2);
         Send(self,@Toggleportal,#what=4);
         Send(self,@Toggleportal,#what=5);
         lit = FALSE;
      }

      if what = poBrazier3 AND NOT pbLitC
      {
         Send(self,@Toggleportal,#what=3);
         Send(self,@Toggleportal,#what=5);
         Send(self,@Toggleportal,#what=1);
         lit = FALSE;
      }

      if what = poBrazier4 AND NOT pbLitD
      {
         Send(self,@Toggleportal,#what=4);
         Send(self,@Toggleportal,#what=1);
         Send(self,@Toggleportal,#what=2);
         lit = FALSE;
      }

      if what = poBrazier5 AND NOT pblite
      {
         Send(self,@Toggleportal,#what=5);
         Send(self,@Toggleportal,#what=2);
         Send(self,@Toggleportal,#what=3);
         lit = FALSE;
      }

      if lit
      {
         send(who,@MsgSendUser,#message_rsc=try_light_lit);
      }
      else
      {
         send(who,@MsgSendUser,#message_rsc=try_light_unlit);
      }
      
      
      if pbLitA AND pbLitB AND pbLitC AND pbLitD AND pbLitE
      {
         send(self,@PuzzleSolved);
      }

      return;
   }


   CreateStandardExits()
   {
      plExits = $;

      propagate;
   }


   LeaveHold(what=$)
   {
      local i;

      if isClass(what,&Player)
      {
         for i in plCorpses
         {
            if StringEqual(Send(what,@GetTrueName),send(i,@GetCorpseName))
            {
               plCorpses = DelListElem(plCorpses,i);
            }
         }

         %% Now we take losses from our death.
         send(what,@ApplyDeathPenalties);
      }

      propagate;
   }


   ZaptoCorpse(who = $)
   {
      local i, iRow, iCol, iFineRow, iFineCol, oRoom, rUsername;

      rUsername = Send(who,@GetTrueName);
      oRoom = $;

      % Paralyze them so they can't move around
      send(who,@SetPlayerFlag,#flag=PFLAG_NO_MOVE,#value=TRUE);
      send(who,@EffectSendUser,#what=self,#effect=EFFECT_PARALYZE_ON);

      for i in plCorpses
      {
         if StringEqual(rUserName,send(i,@GetCorpseName))
         {
            oRoom = send(i,@GetOwner);
            iRow = send(i,@GetRow);
            iCol = send(i,@GetCol);
            iFineRow = send(i,@GetFineRow);
            iFineCol = send(i,@GetFineCol);
         }
      }

      if oRoom = $
      {
         send(who,@AdminGoToSafety);
         send(who,@GainHealthNormal,#amount=100);
         send(who,@MsgSendUser,#message_rsc=zap_to_home);
      }
      else
      {
         if NOT Send(SYS,@UtilGoNearSquare,#what=who,
                     #where=oRoom,#new_row=irow,#new_col=icol,#max_distance=3,
                     #fine_row=ifinerow,#fine_col=ifinecol)
         {
            send(who,@AdminGoToSafety);
            send(who,@GainHealth,#amount=100);
            send(who,@MsgSendUser,#message_rsc=zap_to_home);
         }
         else
         {
            send(who,@MsgSendUser,#message_rsc=zap_to_corpse);
         }
      }

      % Post this so they're in the room completely before being able to move.
      post(who,@SetPlayerFlag,#flag=PFLAG_NO_MOVE,#value=FALSE);
      post(who,@EffectSendUser,#what=self,#effect=EFFECT_PARALYZE_OFF);

      return;
   }

   PuzzleSolved()
   {
      local  i, potarget, oNode;
      
      % if puzzle is solved already, we're in a timer waiting for corpse to go away,
      % so shouldn't get here, but sometimes it happens
      if ptReset <> $
      {
         return;
      }

      Send(self,@SomethingWaveRoom,#wave_rsc=portal_zap_sound);
      
      for i in plPassive
      {
         if isClass(First(i),&skull)
         {
            poTarget = First(i);
         }
      }
      
      for i in plActive
      {
         if isClass(First(i),&Portal)
         {
            Send(self,@SomethingShot,#who=First(i),#target=poTarget,#projectile=self,
                 #flags=PROJ_FLAG_LIGHT_SOURCE);
         }
      }

      oNode = send(SYS,@FindNodeByNum,#num=NODE_CORPSENODE);
      if oNode = $
      {
         DEBUG("Uworld node gone from system!");
         oNode = Create(&CorpseNode,#node_num=NODE_CORPSENODE);
      }
         
      Send(oNode,@NodeAppear,#where=self,#row=16,#col=16,#fine_row=32,#fine_col=32);
                 
      if ptMaintenance <> $
      {
         DeleteTimer(ptMaintenance);
         ptMaintenance = $;
      }
      
      ptReset = CreateTimer(self,@DeletePortalTimer,DELETE_PORTAL_DELAY);

      return;
   }

   DeletePortalTimer()
   {
      Local i;

      ptReset = $;
      ptMaintenance = CreateTimer(self,@MaintenanceTimer,MAINTENANCE_DELAY);
      
      for i in plActive
      {
         if IsClass(first(i),&CorpseNode)
         {
            send(first(i),@NodeDisappear);
         }
      }

      send(self,@ResetPuzzle);
      
      return;
   }
   

   ResetPuzzle()
   {
      local Unlit1, Randnum, Unlit2;

      pbLitA = TRUE;
      pbLitB = TRUE;
      pbLitC = TRUE;
      pbLitD = TRUE;
      pbLitE = TRUE;
   
      Unlit1 = Random(1,5);
      Randnum = Random(0,2);

      if Unlit1 = 1
      {
         pbLitA = FALSE;
      }

      if Unlit1 = 2
      {
         pbLitB = FALSE;
      }

      if Unlit1 = 3
      {
         pbLitC = FALSE;
      }

      if Unlit1 = 4
      {
         pbLitD = FALSE;
      }

      if Unlit1 = 5
      {
         pblite = FALSE;
      }

      if Randnum <> 0
      {
         unlit2=random(1,5);

         while unlit2 = unlit1
         {
            unlit2 = random(1,5);
         }  

         if Unlit2 = 1
         {
            pbLitA = FALSE;
         }

         if Unlit2 = 2
         {
            pbLitB = FALSE;
         }

         if Unlit2 = 3
         {
            pbLitC = FALSE;
         }

         if Unlit2 = 4
         {
            pbLitD = FALSE;
         }

         if Unlit2 = 5
         {
            pblite = FALSE;
         }
      }

      Send(self,@SetPortals);

      return;
   }

   SetPortals()
   {
      if pbLitA
      {
         send(poPortal1,@SetAnimation,#what=TRUE);
         send(poBrazier1,@SetFlame,#has_flame=TRUE);
      }
      else
      {
         send(poPortal1,@SetAnimation,#what=FALSE);
         send(poBrazier1,@SetFlame,#has_flame=FALSE);
      }

      if pbLitB
      {
         send(poPortal2,@SetAnimation,#what=TRUE);
         send(poBrazier2,@SetFlame,#has_flame=TRUE);
      }
      else
      {
         send(poPortal2,@SetAnimation,#what=FALSE);
         send(poBrazier2,@SetFlame,#has_flame=FALSE);
      }

      if pbLitC
      {
         send(poPortal3,@SetAnimation,#what=TRUE);
         send(poBrazier3,@SetFlame,#has_flame=TRUE);
      }
      else
      {
         send(poPortal3,@SetAnimation,#what=FALSE);
         send(poBrazier3,@SetFlame,#has_flame=FALSE);
      }

      if pbLitD
      {
         send(poPortal4,@SetAnimation,#what=TRUE);
         send(poBrazier4,@SetFlame,#has_flame=TRUE);
      }
      else
      {
         send(poPortal4,@SetAnimation,#what=FALSE);
         send(poBrazier4,@SetFlame,#has_flame=FALSE);
      }

      if pbLitE
      {
         send(poPortal5,@SetAnimation,#what=TRUE);
         send(poBrazier5,@SetFlame,#has_flame=TRUE);
      }
      else
      {
         send(poPortal5,@SetAnimation,#what=FALSE);
         send(poBrazier5,@SetFlame,#has_flame=FALSE);
      }

      return;
   }

   NewDeath(what = $, inKocatan = FALSE)
   {
      local oDeadPlayer;

      plCorpses = Cons(what,plCorpses);
      if inKocatan
      {
         oDeadPlayer = send(SYS,@FindUserByString,#string=send(what,@GetCorpseName));
         send(oDeadPlayer,@SetPlayerFlag,#flag=PFLAG2_KOCATAN_DEATH,#value=TRUE,#flagset=2);
      }

      return;
   }

   CorpseDecomposed(what = $)
   {
      local i, oDeadPlayer;

      for i in plCorpses
      {  
         if i = what
         {
            plCorpses = DelListElem(plCorpses,i);
            oDeadPlayer = send(SYS,@FindUserByString,#string=send(what,@GetCorpseName));
            send(oDeadPlayer,@SetPlayerFlag,#flag=PFLAG2_KOCATAN_DEATH,#value=FALSE,#flagset=2);
         }
      }

      return;
   }

   CreateStandardObjects()                            
   {
      Send(self,@NewHold,#what=Create(&HellPortal),#new_row=10,#new_col=6);

      pobrazier1 = Create(&BrazierSwitch);
      Send(self,@NewHold,#what=pobrazier1,#new_row=4,#new_col=7,#fine_row=32,#fine_col=8);

      pobrazier2 = Create(&BrazierSwitch);
      Send(self,@NewHold,#what=pobrazier2,#new_row=2,#new_col=23,#fine_row=8,#fine_col=24);

      pobrazier3 = Create(&BrazierSwitch);
      Send(self,@NewHold,#what=pobrazier3,#new_row=20,#new_col=29,#fine_row=16,#fine_col=40);

      pobrazier4 = Create(&BrazierSwitch);
      Send(self,@NewHold,#what=pobrazier4,#new_row=31,#new_col=15,#fine_row=43,#fine_col=28);

      pobrazier5 = Create(&BrazierSwitch);
      Send(self,@NewHold,#what=pobrazier5,#new_row=20,#new_col=2,#fine_row=32,#fine_col=8);
      
      
      poPortal1 = Create(&Portal,#desc=portal_tos,#dest_room_num=RID_TOS_INN,#dest_col=7  ,#dest_row=8);
      Send(self,@NewHold,#what=poPortal1,#new_row=3,#new_col=7,#fine_row=0,#fine_col=32,#new_angle=ANGLE_SOUTH_EAST);
      
      poPortal2 = Create(&Portal,#desc=portal_cornoth,#dest_room_num=RID_COR_INN,#dest_col=5  ,#dest_row=5);  
      Send(self,@NewHold,#what=poPortal2,#new_row=2,#new_col=25,#fine_row=40,#fine_col=24,#new_angle=ANGLE_SOUTH_WEST);
      
      poPortal3 = Create(&Portal,#desc=portal_barloque,#dest_room_num=RID_BAR_INN,#dest_col=6  ,#dest_row=5);
      Send(self,@NewHold,#what=poPortal3,#new_row=21,#new_col=30,#fine_row=44,#fine_col=20,#new_angle=ANGLE_NORTH_WEST);
      
      poPortal4 = Create(&Portal,#desc=portal_marion,#dest_room_num=RID_MAR_INN,#dest_col=6,#dest_row=12);
      Send(self,@NewHold,#what=poPortal4,#new_row=32,#new_col=16,#fine_row=32,#fine_col=32,#new_angle=ANGLE_NORTH);
      
      poPortal5 = Create(&Portal,#desc=portal_jasper,#dest_room_num=RID_JAS_INN,#dest_col=10 ,#dest_row=4);
      Send(self,@NewHold,#what= poPortal5,#new_row=21,#new_col=2,#fine_row=48,#fine_col=0,#new_angle=ANGLE_NORTH_EAST);
      
      Send(self,@NewHold,#what=Create(&Skull),#new_row=16,#new_col=16,#fine_row=32,#fine_col=32);
      
      send(self,@ResetPuzzle);

      propagate;
   }

   % For paralyzation effect
   SendEffectData()
   {
      return;
   }

   GetProjectileIcon()
   {
      return vrIcon;
   }

   GetProjectileSpeed()
   {
      return 12;
   }

   SendProjectileAnimation()
   {
      AddPacket(1, ANIMATE_CYCLE, 4, 40, 2, 2, 2, 3);   % 40ms between animations

      return;
   }

   GetProjectileLightFlags()
   {
      % General lighting information.
      return LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC;
   }

   GetProjectileLightIntensity()
   {
      % Medium light radius for projectiles.  Out of 255 levels.
      return 125;
   }

   GetProjectileLightColor()
   {
      % Color is the same as lightning.
      return LIGHT_LIGHTNING;
   }

   StartChaosNight()
   "The underworld is unaffected by chaos night.  Otherwise, the bodies would "
   "just stack up."
   {
      return;
   }

   EndChaosNight()
   "No chaos night in the underworld, so lets save a little room."
   {
      return;
   }

   ReqAssassinGameAttack(what=$)
   {
      send(what,@MsgSendUser,#message_rsc=underworld_assgame);

      return FALSE;
   }

   SeanceCheck()
   {
      return FALSE;
   }
   
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                                                           
