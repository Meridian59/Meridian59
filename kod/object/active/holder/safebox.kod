% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SafetyDepositBox is Holder

%% these are used by storage.kod to store stuff in.  These items are never to 
%% be placed in the world

constants:

   include blakston.khd
 
resources:

classvars:

   viObject_flags = CONTAINER_YES

   viBulk_hold_max = 2500
   viWeight_hold_max = $

properties:
   
   piVault_num = $
   poPlayer = $

messages:

   Constructor(vid=$, who=$)
   {
      if vid = $ or who = $  { debug("vault not constructed correctly."); return; }

      piVault_num = vid;
      poPlayer = who;
      propagate;
   }

   GetBulkMax()
   {
      local oVault;
      oVault = send(SYS,@FindVaultByNum,#num=piVault_num);
      return send(oVault,@GetCapacity);
   }
   
   GetSafeBoxOwner()
   {
      return poPlayer;
   }

   ReqNewOwner(what = $)
   {
      return False;
   }

   ReqNewHold(what=$)
   {
      return isClass(what,&PassiveItem);      
   }

   NewHold(what=$)
   {
      % debug(send(what,@GetName));
      propagate;
   }

   HolderDoAddNode(node = $, lNodes = $)
   "Adds a node to a list of nodes. If a node with the same class already exists, the node is added before that node, otherwise at the first position."
   {
      local oCurrentNode, index, inserted;
      index = 1;
      inserted = FALSE;

      for oCurrentNode in lNodes
      {
         if GetClass(oCurrentNode) = GetClass(node)
         {
            InsertListElem(lNodes,index,node);
            inserted = TRUE;
            break;
         }
         index = index + 1;
      }

      if inserted = FALSE
      {
         lNodes = Cons(node, lNodes);
      }

      return lNodes;
   }

   SortItems(owner = $, vaultman = $, item_list = $, number_list = $)
   "Sort the items corresponding to the given item list. The number list has an entry for every NumberItem in the item list."
   "All items in the list must be present in the vault with the correct quantity, otherwise the vault will stay unchanged."
   "Returns $ if all items were equal and the operation succeeded. Otherwise returns a list of items that were different."
   {
      local lDifferences;

      lDifferences = $;
      lDifferences = Send(self,@CompareHoldToItemList,#item_list=item_list,#number_list=number_list);

      if lDifferences = $
      {
         plPassive = item_list;
      }

      return lDifferences;
   }

   Delete()
   {      
      poPlayer = $;

      propagate;
   }
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
