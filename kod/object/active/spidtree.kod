% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SpiderTree is ActiveObject

constants:

   include blakston.khd

resources:

   SpiderTree_name_rsc = "Web Covered Tree"
   SpiderTree_icon_rsc = spdrtree.bgf
   SpiderTree_desc_rsc = "Elegant and sinister-looking webbing smothers what was once a proud and ancient oak.  There is a foreboding hole carved into the base of the tree, large enough to enter."

   SpiderTree_move_req_no = "For some reason, you can't seem to enter the hole."

   Spidertree_enter = "You stumble down the hole at the base of the tree."

classvars:

   vrName = SpiderTree_name_rsc
   vrIcon = SpiderTree_icon_rsc
   vrDesc = SpiderTree_desc_rsc

   viObject_flags = MOVEON_TELEPORTER

properties:
   

   piDest_room = RID_DEFAULT
   piDest_angle
   piDest_row 
   piDest_col 
   piDest_fine_row = FINENESS_HALF
   piDest_fine_col = FINENESS_HALF

messages:

   constructor(dest_room_num = RID_NEST1,dest_row = 4,dest_col = 17,
	       dest_angle = $,dest_fine_row = FINENESS_HALF,dest_fine_col = FINENESS_HALF)
   {
      piDest_room = dest_room_num;
      piDest_row = dest_row;
      piDest_col = dest_col;
      piDest_angle = dest_angle;
      piDest_fine_row = dest_fine_row;
      piDest_fine_col = dest_fine_col;
      
      propagate;
   }

   ReqSomethingMoved(what = $,new_row = $,new_col = $)
   "When something tries to move in a room with a portal, it checks "
   "to see whether, if the thing moves into the portal, it will be able "
   "to be teleported to the destination.  In this way, you cannot move "
   "something onto a teleporter without it being teleported."
   {
      local iRow,iCol;
      
      iRow = Send(self,@GetRow);
      iCol = Send(self,@GetCol);

      if new_row = iRow and new_col = iCol
      {
	 if not Send(SYS,@UtilGoNearSquare,#what=what,
		     #where=Send(SYS,@FindRoomByNum,#num=piDest_room),
		     #new_row=piDest_row,#new_col=piDest_col,#max_distance=0,
		     #do_move=False,#new_angle=piDest_angle,
		     #fine_row=piDest_fine_row,#fine_col=piDest_fine_col)
	 {
            Send(what,@MsgSendUser,#message_rsc=SpiderTree_move_req_no);
	    return False;
	 }
      }

      return True;
   }

   SomethingMoved(what = $,new_row = $,new_col = $)
   {
      local iRow,iCol;
      
      iRow = Send(self,@GetRow);
      iCol = Send(self,@GetCol);

      if new_row = iRow and new_col = iCol
      {
	 if what = self
	 {
	    return;
	 }

	 if not Send(SYS,@UtilGoNearSquare,#what=what,
		     #where=Send(SYS,@FindRoomByNum,#num=piDest_room),
		     #new_row=piDest_row,#new_col=piDest_col,#max_distance=3,
		     #new_angle=piDest_angle,		     
		     #fine_row=piDest_fine_row,#fine_col=piDest_fine_col)
	 {
            debug("SpiderTree",self,"unable to move",what);
	 }
         else
           {
             send(what,@msgsenduser,#message_rsc=spidertree_enter);
           }
      }

      return;
   }

   ReqNewOwner(what = $)
   {
      return IsClass(what,&Room);
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
