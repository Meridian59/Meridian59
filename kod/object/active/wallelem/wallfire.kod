% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
WallofFire is ActiveWallElement

constants:

   include blakston.khd

resources:

   WallofFire_name_rsc = "wall of fire"
   WallofFire_icon_rsc = woflame.bgf
   WallofFire_desc_rsc = \
      "The wall of fire flickers dangerously, threatening to make the day "
      "of anyone passing through a bad one."

   firewall_damage0 = "You withstand the fire unscathed."
   firewall_damage5 = "You feel a bit toasted from the flames."
   firewall_damage10 = "Something smells like burnt hair.  Wait, it's you!"
   firewall_damage15 = "You are on fire!  Put it out!"
   firewall_damage20 = "Ouch, that really burned!"

   firewall_burn_snd = frying.wav

   firewall_dissipates = "A bit of the firewall fades into coldness."

classvars:

   vrName = WallofFire_name_rsc
   vrIcon = WallofFire_icon_rsc
   vrdesc = WallofFire_desc_rsc

   viObject_flags = LOOK_NO | DRAWFX_TRANSLUCENT_50 | MOVEON_NOTIFY | FLICKERING_YES

   vrDissipateMessage = firewall_dissipates
   vrUnaffectedMessage = firewall_damage0

   viLightBonus = 15

properties:

   viIllusion = FALSE
   piMaxDamage = 0

messages:

   Constructor(caster = $, duration = 75, MaxDamage = 0, illusionary = FALSE)
   {
      piMaxDamage = MaxDamage;

      % Note, if illusionary, piMaxDamage is spellpower, not the true max damage.
      viIllusion = illusionary;

      propagate;
   }

   GetDuration(duration = 0)
   {
      local iDuration;

      iDuration = Random(duration-20,duration+20);
      iDuration = iDuration * 1000;
      iDuration = bound(iDuration,30000,200000);

      return iDuration;
   }

   DoEffect(what = $)
   {
      local iDamage, oIllusWounds, iDuration, rMessage;

      iDamage = 0;
      
      if viIllusion
      {
         if (piMaxDamage < 35)
         {
            return;
         }

         oIllusWounds = Send(SYS,@FindSpellByNum,#num=SID_ILLUSIONARY_WOUNDS);
         iDuration = Send(oIllusWounds,@GetDuration,#iSpellPower=piMaxDamage);
         iDamage = Send(oIllusWounds,@GetHPLoss,#who=poCaster,#victim=what,#iSpellPower=piMaxDamage);

         if iDamage > 0
         {
            % We technically don't have a damage type, but we count as spell damage.
            %  Also, don't lower damage based on resistances.
            iDamage = Send(what,@AssessDamage,#what=poCaster,#damage=Random(0,iDamage),
                           #aspell=ATCK_SPELL_ALL,#absolute=TRUE,#report=FALSE,
                           #report_resistance=FALSE);
            Send(what,@StartEnchantment,#what=oIllusWounds,#time=iDuration,#lastcall=TRUE,
                 #state=iDamage,#addicon=FALSE);
         }
      }
      else
      {
         iDamage = Send(what,@AssessDamage,#what=poCaster,#damage=Random(0,piMaxDamage),
                        #aspell=ATCK_SPELL_FIRE,#report=FALSE,#report_resistance=FALSE);
      }

      if iDamage = $
      {
         Send(poCaster,@KilledSomething,#what=what);
      }

      if IsClass(poCaster,&Player)
      {
         if iDamage = $
         {
            Send(poCaster,@SetPlayerFlag,#flag=PFLAG_DID_DAMAGE,#value=TRUE);
            
            return;
         }
         else
         {
            if piMaxDamage > 0
            {
               Send(poCaster,@SetPlayerFlag,#flag=PFLAG_DID_DAMAGE,#value=TRUE);
            }
         }
      }

      if IsClass(what,&Player)
      {
         if iDamage = 0
         {
            rMessage = firewall_damage0;
         }
         else
         {
            % Damage is greater than 0
            Send(what,@WaveSendUser,#wave_rsc=firewall_burn_snd);

            if iDamage < 5
            {
               rMessage = firewall_damage5;
            }
            else
            {
               if iDamage < 10
               {
                  rMessage = firewall_damage10;
               }
               else
               {
                  if iDamage < 15
                  {
                     rMessage = firewall_damage15;
                  }
                  else
                  {
                     rMessage = firewall_damage20;
                  }
               }
            }
         }

         Send(what,@MsgSendUser,#message_rsc=rMessage);
      }
      
      propagate;
   }

   SendAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE, 4,random(100,140), 2,1, 2,5);
      
      return;
   }

   NewOwner(what = $)
   {
      % Add a bit of light if this isn't an illusion.  Firewalls should add some light.
      if NOT viIllusion
      {
         % new room
         if what <> $
         {
            Send(what,@AddBaseLight,#amount=viLightBonus);
         }
   
         % old room
         if poOwner <> $
         {
            Send(poOwner,@AddBaseLight,#amount=-viLightBonus);
         }
      }
      
      propagate;
   }

   Delete()
   {
      % Take away the light we added if we weren't an illusion.
      if NOT viIllusion
      {
         if poOwner <> $
         {
            Send(poOwner,@AddBaseLight,#amount=-viLightBonus);
         }
      }
      
      propagate;
   }

   SendLightingInformation()
   {
      AddPacket(2,(LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC));
      % Intensity
      if viIllusion
      {
         % Send less light if we're illusionary.
         AddPacket(1,0);
      }
      else
      {
         % 5 out of 255 intensity of light
         AddPacket(1,5);
      }

      % Red color
      AddPacket(2,LIGHT_RED);

      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
