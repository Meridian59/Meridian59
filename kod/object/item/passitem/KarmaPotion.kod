% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
KarmaPotion is PassiveItem

constants:

   include blakston.khd
   
resources:

   KarmaPotion_icon_rsc = potion01.bgf
   
   KarmaPotion_name_rsc = "Karma Potion"
   KarmaPotion_desc_rsc = "Drinking this potion during a frenzy will change your karma."

   KarmaPotion_pos_name_rsc = "Positive Karma Potion"
   KarmaPotion_pos_desc_rsc = "Drinking this potion during a Frenzy will change your karma to +100."
   
   KarmaPotion_neg_name_rsc = "Negative Karma Potion"
   KarmaPotion_neg_desc_rsc = "Drinking this potion during a Frenzy will change your karma to -100."
   
   KarmaPotion_drink = "You quaff the contents of the Karma Potion in a single gulp."
   KarmaPotion_no_drink = "You can't use this potion when it is not a frenzy."

classvars:

   vrIcon = KarmaPotion_icon_rsc

   viBulk = 20
   viWeight = 5000          % weighs more than a mortal can normally hold - ensures can only be given out via admin globally
   viValue_average = 60

   viItem_type = ITEMTYPE_POTION | ITEMTYPE_SUNDRY
   viUse_type = ITEM_SINGLE_USE

   viPoisonPercent = 0
   viGoBadDamage = 0

properties:

   vrDesc = KarmaPotion_desc_rsc
   vrName = KarmaPotion_name_rsc

   piItem_flags = XLAT_TO_SKY
   piKarma = 0


messages:

   Constructor(Karma=$)
   {
      if karma > 0
      {
        vrName = KarmaPotion_pos_name_rsc;
        VrDesc = KarmaPotion_pos_desc_rsc;
        piItem_Flags = PT_MET_GREEN;
        piKarma = 10000;
      }
		
     if karma < 0
     {
        vrName = KarmaPotion_neg_name_rsc;
        vrDesc = KarmaPotion_neg_desc_rsc;
        piItem_Flags = PT_MET_RED;
        piKarma = -10000;
     }
		
     propagate;
   }
   
   ApplyPotionEffects(apply_on = $)
   {
      if Send(SYS, @GetChaosNight)				
      {	
        Send(apply_on,@SetKarma,#value=piKarma);
      }    
	  else
      {
        Send(apply_on,@MsgSendUser,#message_rsc=KarmaPotion_no_drink);
        Send(self,@Delete);								% deletes it self if someone tries to use it outside frenzy.	
      }

     return;
   }
   
   ReqNewApply(what = $,apply_on = $)
   {
     if what = apply_on
     {
       return TRUE;
     }
      
     return FALSE;
   }
   
   NewApplied(what = $,apply_on = $)
   {
      if isClass(apply_on,&Player) 
      {
         Send(apply_on,@waveSenduser,#wave_rsc=BetaPotion_gulp_sound);
      }

     Send(apply_on,@MsgSendUser,#message_rsc=KarmaPotion_drink);
     Send(self,@ApplyPotionEffects,#apply_on=apply_on);

     Send(self,@Delete);

     return;
   }

   IsBeverage()
   {
     return TRUE;
   }

   CanIdentify()
   {
     return TRUE;
   }

   RevealHiddenAttributes()
   {
     return FALSE;
   }
   
   GetKarma()
   {
     return piKarma;
   }
   

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%