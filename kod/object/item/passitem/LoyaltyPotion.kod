% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% Code written for this item by Phillip H.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
LoyaltyPotion is PassiveItem

constants:

   include blakston.khd

resources:

   LoyaltyPotion_icon_rsc = potion01.bgf

   LoyaltyPotion_name_rsc = "Loyalty Potion"
   LoyaltyPotion_desc_rsc = "This potion is a reward for your dedication and loyalty to the Quest."


   LoyaltyPotion_worked = "You quaff down the potion in a single gulp and feel a rush of energy throughout your body.\n"						  
						  "`B`IYou suddenly feel a little tougher."
   
   LoyaltyPotion_NOdrink = "You quaff down the potion in a single gulp and feel `B`Iabsolutely nothing.\n"
						   "`n`rAdvanced, Outlaws or Murderers may not use this potion."
						   
classvars:
   
   vrDesc = LoyaltyPotion_desc_rsc
   vrName = LoyaltyPotion_name_rsc
   vrIcon = LoyaltyPotion_icon_rsc
   
   viBulk = 20
   viWeight = 20
   viValue_average = 0

   viItem_type = ITEMTYPE_POTION | ITEMTYPE_SUNDRY
   viUse_type = ITEM_SINGLE_USE
   
   PotionHPBoost = 1

   viPoisonPercent = 0
   viGoBadDamage = 0

properties:

   
   piGoBadTime = 0
   piItem_flags = PT_GRAY_TO_RED
   
   

messages:

   Constructor()
   {
      propagate;
   }


   ApplyPotionEffects(apply_on = $)
   {
      
	  
	  
		if Send(apply_on,@GetBaseMaxHealth) < 40								% check to make sure they are over 40 HP.
		AND NOT Send(apply_on,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)				% check to make sure they are not an outlaw
	    AND NOT Send(apply_on,@CheckPlayerFlag,#flag=PFLAG_MURDERER)			% check to make sure they are not a murderer
			{		
				Send(apply_on,@GainBaseMaxHealth,#amount=PotionHPBoost);
				Send(apply_on,@MsgSendUser,#message_rsc=LoyaltyPotion_worked);
				Send(self,@Delete);
			}				
					
		else 
			{
						Send(apply_on,@MsgSendUser,#message_rsc=LoyaltyPotion_NOdrink);
						Send(self,@Delete);												% deletes itslef if someone tries to use potion that is ineligble..
			}					
			
      return;
    }
  
  

   %%% Old Potion stuff

   ReqNewApply(what = $,apply_on = $)
   {
      if what = apply_on
      {
         return TRUE;
      }
      
      return FALSE;
   }
   
   NewApplied(what = $,apply_on = $)
   {
      local oSpell;
      if isClass(apply_on,&User) 
      {
         Send(apply_on,@waveSenduser,#wave_rsc=BetaPotion_gulp_sound);
      }

      Send(self,@ApplyPotionEffects,#apply_on=apply_on);      

      return;
   }

   IsBeverage()
   {
      return TRUE;
   }

   CanIdentify()
   {
      return TRUE;
   }

   RevealHiddenAttributes()
   {
      return FALSE;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
