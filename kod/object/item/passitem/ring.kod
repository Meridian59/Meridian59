% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Ring is PassiveItem

constants:
   
   include blakston.khd

resources:

   ring_unidentified_name_rsc = "magical ring"
   ring_unidentified_description_rsc = "The ring pulses with magical energy."

   ring_identified_name_rsc = "generic magical ring"
   ring_identified_description_rsc = "The has some magical effect."

   ring_condition_exc = " is in pristine condition."
   ring_condition_exc_mended = " is in pristine condition, although it appears to have been weakened somehow."
   ring_condition_good = " has a minor scratch or two."
   ring_condition_med = " is fairly tarnished from use."
   ring_condition_poor = " is dull, cracked, and ready to break."
   ring_condition_broken = " is broken and beyond repair."

classvars:

   viUse_type = ITEM_USE_FINGER
   viUse_Amount = 1

   viItem_type = ITEMTYPE_RING

   vrRealName = ring_identified_name_rsc
   vrRealDesc = ring_identified_name_rsc

   vbShow_condition = TRUE
   vrCondition_exc = ring_condition_exc
   vrCondition_exc_mended = ring_condition_exc_mended
   vrCondition_good = ring_condition_good
   vrCondition_med = ring_condition_med
   vrCondition_poor = ring_condition_poor
   vrCondition_broken = ring_condition_broken

properties:

   vrName = ring_unidentified_name_rsc
   vrDesc = ring_unidentified_description_rsc

messages:

   ReqUseSomething(what = $)
   {
      if IsClass(what, &Ring)
      {
         if Send(poOwner, @TryUnuseItem, #what = self)
         {
            propagate;
         }
         
         return FALSE;
      }
      
      propagate;
   }

   %%% Infrastructure for identification

   CanIdentify()
   {
      return TRUE;
   }

   RevealHiddenAttributes()
   {
      local i, bDone;

      bDone = FALSE;
      % Iterate through the item's properties and reveal any that are
      % currently unrevealed.
      for i in plItem_Attributes
      {
         if NOT Send(self, @GetIDStatusFromCompound, #compound=First(i))
         {
            SetNth(i, 1, (First(i) + 1));
            bDone = TRUE;
         }
      }
      % Reveal the true name and description of the item.
      if vrName <> vrRealName
      {
         vrName = vrRealName;
         vrDesc = vrRealDesc;
         bDone = TRUE;
      }
      
      return bDone;
   }

   GetTrueName()
   {
      return vrRealName;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
