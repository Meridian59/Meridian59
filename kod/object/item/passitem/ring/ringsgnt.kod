% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SignetRing is Ring

constants:

   include blakston.khd
   LAZY_RESET_TIME=180000

resources:

   ringsignet_name_rsc = "signet ring"
   ringsignet_icon_rsc = signet.bgf
   ringsignet_desc_rsc = "This ring is worn and dirty, but you make out the family crest of "
   ringsignet_desc_rsc2 =". Surely, its return would be appreciated."
   
   ringsignet_reward1 = "You receive %q."
   ringsignet_reward2 = "You receive %q and %s."

classvars:

   vrRealName = ringsignet_name_rsc
   vrIcon = ringsignet_icon_rsc
   vrRealDesc = ringsignet_desc_rsc

   viHits_init_min = 30
   viHits_init_max = 70

   viBulk = 2
   viWeight = 2
   
   viValue_average = 150

properties:

   vrName = ringsignet_name_rsc
   vrDesc = ringsignet_desc_rsc

   poRingOwner = $
   ptLazyTimer = $

messages:

   Constructor(mob=$)
   "This item should never be directly created. It should be created through"
   "A call to library's CreateSignetRing."
   {
      if mob=$
      {
         debug("SignetRing created without a defined mob as goal.");
         Post(self,@Delete);
      }
      
      poRingOwner = mob;
      Send(poRingOwner,@SetWantedItem,#class=&SignetRing);
      Send(Send(SYS,@GetLibrary),@RegisterSignet,#newring=self);
      
      propagate;
   }

   Delete()
   {
      % This needs to take the ring out of the wanted item of the owner.
      % Also, take it out of the master list of signets
      % It also needs to send a message to the owner if its a logged in player.
      if poRingOwner<>$
      {
        Send(poRingOwner,@CutWantedItem,#class=&SignetRing);
      }
      
      send(send(SYS,@GetLibrary),@UnregisterSignet,#newring=self);

      if ptLazyTimer <> $
      {
         DeleteTimer(ptLazyTimer);
         ptLazyTimer = $;
      }
      
      propagate;
   }

   GetRingOwner()
   {
      return poRingOwner;
   }

   RewardReturner(who = $)
   {
      local iChance1, iChance2, iMoney, oItem1, oItem2;
      
      iChance1 = Random (1,1000);
      
      Debug("iChance1 = ",iChance1);
      
      if iChance1 <= 400
      {
         iMoney = (Random(20,40)*1000);
         Debug("iMoney = ",iMoney);
         
         oItem1 = Send(who,@GetMoneyObject);
         
         if oItem1 = $
         {
            oItem1 = Create(&Money,#number=iMoney);
            Send(who,@NewHold,#what=oItem1);
         }
         else
         {
            Send(oItem1,@AddNumber,#number=iMoney);
         }
         
         return;
      }
      
      if iChance1 <= 550
          AND iChance1 > 400
      {
         oItem1 = Create(&RingInvisibility);
         Send(who,@NewHold,#what=oItem1);
         
         iMoney = (Random(5,10)*1000);
         Debug("iMoney = ",iMoney);
         
         oItem2 = Send(who,@GetMoneyObject);
         
         if oItem2 = $
         {
            oItem2 = Create(&Money,#number=iMoney);
            Send(who,@NewHold,#what=oItem2);
         }
         else
         {
            Send(oItem2,@AddNumber,#number=iMoney);
         }        
        
         return;
      }   
         
      if iChance1 <= 700
          AND iChance1 >550
      {
         iChance2 = Random(1,2);
         
         if iChance2 = 1
         {
            oItem1 = Create(&PurpleMushroom,#number=25);
         }
         if iChance2 = 2
         {
            oItem1 = Create(&EntrootBerry,#number=25);
         }
         
         Send(who,@NewHold,#what=oItem1);
         
         iMoney = (Random(5,10)*1000);
         Debug("iMoney = ",iMoney);
         oItem2 = Send(who,@GetMoneyObject);
         
         if oItem2 = $
         {
            oItem2 = Create(&Money,#number=iMoney);
            Send(who,@NewHold,#what=oItem2);
         }
         else
         {
            Send(oItem2,@AddNumber,#number=iMoney);
         }

         return;
      }
      
      if iChance1 <= 800
          AND iChance1 > 700
      {
         oItem1 = Create(&Rose);
         Send(who,@NewHold,#what=oItem1);
         
         Send(who,@MsgSendUser,#message_rsc=ringsignet_reward1,
                       #parm1=Send(oItem1,@GetName));

         return;
      }
      
      if iChance1 <= 900
          AND iChance1 >800
      {
         iChance2 = Random(1,2);
         
         if iChance2 = 1
         {
            oItem1 = Create(&InkyCap,#number=25);            
         }
         if iChance2 = 2
         {
            oItem1 = Create(&Mint,#number=25);            
         }
         
         Send(who,@NewHold,#what=oItem1);
         
         iMoney = (Random(5,10)*1000);
         Debug("iMoney = ",iMoney);
         oItem2 = Send(who,@GetMoneyObject);
         
         if oItem2 = $
         {
            oItem2 = Create(&Money,#number=iMoney);
            Send(who,@NewHold,#what=oItem2);
         }
         else
         {
            Send(oItem2,@AddNumber,#number=iMoney);
         }

         return;
      }

      if iChance1 <= 950
          AND iChance1 > 900
      {
         oItem1 = Create(&Prism);
         Send(who,@NewHold,#what=oItem1);

         return;
      }
      
      if iChance1 <= 1000
          AND iChance1 > 950
      {
         oItem1 = Create(&SpecialGift);
         Send(who,@NewHold,#what=oItem1);

         return;
      }
      
      else
      {
         Debug("Signet Ring Reward did not meet criteria for ",who);
         return;
      }

      return;
   }

   DestroyDisposable()
   {
      return FALSE;
   }

   NewOwner(what=$)
   {
      if ptLazyTimer <> $
      {
         DeleteTimer(ptLazyTimer);
         ptLazyTimer=$;
      }
      
      if what = $
      {
         propagate;
      }
      
      if (IsClass(what,&Room))
      {
         ptLazyTimer=CreateTimer(self,@LazySignetTimer,LAZY_RESET_TIME);
      }
      
      propagate;
   }

   LazySignetTimer()
   {
      ptLazyTimer=$;
      if IsClass(poOwner,&Room)
      {
         Send(poOwner,@Teleport,#what=self);
      }
     
      return;
   }

   DoBaseDesc()
   {
      AppendTempString(ringsignet_desc_rsc);
      AppendTempString(Send(poRingOwner,@GetName));
      AppendTempString(ringsignet_desc_rsc2);
     
      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

