% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
BonkStick is SpecialWand

constants:

   include blakston.khd

resources:

   bonkstick_proj = lightnin.bgf

   BonkStick_name_rsc = "bonkstick"
   BonkStick_icon_rsc = hammer.bgf
   BonkStick_desc_rsc = \
      "This wand just drips of ludicrocity."

   bonkstick_bad_target = "You cannot use the bonkstick on %s%s."
   bonkstick_not_self = "You wouldn't feel right hitting yourself on the head with the bonkstick!"

   allinroom_bonkstick_msg1 = "~b%s%s's eyes cross momentarily as %s%s pounds %s on the noggin with %s bonkstick."
   allinroom_bonkstick_msg2 = "~bYou wince as %s%s viciously bonks %s%s with %s bonkstick, which collapses."

   caster_bonkstick_msg = "~bYou viciously slam your bonkstick on %s%s's noggin."
   bonked_bonkstick_msg = "~r~B>OUCH<~n~b  %s%s ruthlessly beats on your head with %s bonkstick!!"

classvars:

   vrName = BonkStick_name_rsc
   vrIcon = BonkStick_icon_rsc

   viBulk = 25
   viWeight = 25
   viValue_average = 150

   viHits_init_min = 20000
   viHits_init_max = 20000

   viGround_group = 2

   viDamage_min = 0
   viDamage_max = 0

properties:
   
   vrDesc = BonkStick_desc_rsc

messages:

   ReqNewApply(what = $,apply_on = $)
   {
      % Using it on yourself is a cheap way to eliminate blindness
      if apply_on = poOwner
      {
         send(poOwner,@MsgSendUser,#message_rsc=bonkstick_not_self);

         return FALSE;
      }

      if (NOT IsClass(apply_on,&Battler))
         OR IsClass(apply_on,&Admin)
      {
         send(poOwner,@MsgSendUser,#message_rsc=bonkstick_bad_target,
              #parm1=send(apply_on,@GetDef),#parm2=send(apply_on,@GetName));
              
         return FALSE;
      }
   
      if send(apply_on,@GetOwner) <> send(poOwner,@GetOwner)
      {
         send(poOwner,@MsgSendUser,#message_rsc=wand_target_gone,
              #parm1=send(apply_on,@GetDef),#parm2=send(apply_on,@GetName));
              
         return FALSE;
      }
      
      propagate;
   }

   CastSpell(apply_on = $)
   {
      local  i, oRoom, lActive, each_obj;

      oRoom = Send(apply_on,@GetOwner);
      lActive = Send(oRoom,@GetHolderActive);

      send(poOwner,@DoAttackSwing);

      % Show lightning flying through the air
      Send(oRoom,@SomethingShot,#who=poOwner,#target=apply_on,#projectile=self,#flags=PROJ_FLAG_LIGHT_SOURCE);

      Send(poOwner,@MsgSendUser,#message_rsc=caster_bonkstick_msg,
           #parm1=Send(apply_on,@GetDef),#parm2=Send(apply_on,@GetName));

      Send(apply_on,@EffectSendUser,#what=self,#effect=EFFECT_INVERT);
      Send(apply_on,@MsgSendUser,#message_rsc=bonked_bonkstick_msg,
           #parm1=Send(poOwner,@GetDef),#parm2=Send(poOwner,@GetName),
           #parm3=Send(poOwner,@GetHisHer));

      for i in lActive
      {
         each_obj = Send(oRoom,@HolderExtractObject,#data=i);
         
         if (IsClass(each_obj,&Player) AND (each_obj <> poOwner) AND (each_obj <> apply_on))
         {
            if (IsClass(apply_on,&Battler))
            {
               send(each_obj,@MsgSendUser,#message_rsc=allinroom_bonkstick_msg1,
                    #parm1=Send(apply_on,@GetDef,#cap=TRUE),#parm2=Send(apply_on,@GetName),
                    #parm3=Send(poOwner,@GetDef),#parm4=Send(poOwner,@GetName),
                    #parm5=Send(apply_on,@GetHimHer),#parm6=Send(poOwner,@GetHisHer));
            }
            else
            {
               send(each_obj,@MsgSendUser,#message_rsc=allinroom_bonkstick_msg2,
                    #parm1=Send(poOwner,@GetDef),#parm2=Send(poOwner,@GetName),
                    #parm3=Send(apply_on,@GetDef),#parm4=Send(apply_on,@GetName),
                    #parm5=Send(poOwner,@GetHisHer));
            }
         }
      }
      
      propagate;
   }

   SendEffectData()
   {
      % for EFFECT_INVERT, 4 bytes of time to be inverted
      AddPacket(4,10000);
      
      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,1);
      
      return;
   }

   GetProjectileIcon()
   {
      return bonkstick_proj;
   }

   GetProjectileSpeed()
   {
      return 12;
   }

   SendProjectileAnimation()
   {
      % 40ms between animations, frames 2-3
      AddPacket(1,ANIMATE_CYCLE, 4,40, 2,2, 2,3);   
      
      return;
   }

   GetProjectileLightFlags()
   {
      % General lighting information.
      return LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC;
   }

   GetProjectileLightIntensity()
   {
      % Fairly small light radius for projectile.  Out of 255 levels.
      return 25;
   }

   GetProjectileLightColor()
   {
      % Color is same as lightning.
      return LIGHT_LIGHTNING;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

