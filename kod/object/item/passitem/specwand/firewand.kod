% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FireWand is SpecialWand

constants:

   include blakston.khd

resources:

   fireWand_name_rsc = "wand of fire"
   fireWand_icon_rsc = wand2.bgf
   fireWand_fire_rsc = fireball.bgf
   fireWand_desc_rsc = \
   "Waves of heat seem to radiate from this wand."

   firewand_target_hit_rsc = \
   "Pain rips through your body as %s%s's magical flames sear your flesh!"

   firewand_hit_target_rsc = "You watch with satisfaction as a ball of fire engulfs %s%s!"
   firewand_used_self_rsc = "After a moment's deliberation, you decide not to set yourself aflame."

   firewand_safety_on = "Silly you!  You almost fried %s!  Good thing your safety was on!"
   firewand_fail_rsc = "It would be foolish to waste the mystical energy on an inanimate object!"

   firewand_missed_target = "%s%s narrowly dodges your mystical ball of flame."
   firewand_missed_you = "%s%s's mystical ball of flame narrowly misses you."

   firewand_sound = ffirebal.wav

classvars:

   vrName = fireWand_name_rsc
   vrIcon = fireWand_icon_rsc

   viBulk = 20
   viWeight = 25
   viValue_average = 150

   viHits_init_min = 4
   viHits_init_max = 12

   viGround_group = 2

   vrFireball = fireWand_fire_rsc

   viDamage_min = 4
   viDamage_max = 10

   viAttack_spell_type = ATCK_SPELL_ALL | ATCK_SPELL_FIRE

properties:
   
   vrDesc = fireWand_desc_rsc

messages:

   ReqNewApply(what = $,apply_on = $)
   {
      if NOT Send(Send(what,@GetOwner),@ReqSomethingAttack,#what=what,
                  #victim=apply_on,#use_weapon=self)
      {
         return FALSE;
      }

      % Target must be in the same room as you.  Possibility, someone else
      %  just killed the monster, or target just logged off and is ahead of
      %  you in the thread.
      if send(apply_on,@GetOwner) <> send(poOwner,@GetOwner)
      {
         send(poOwner,@MsgSendUser,#message_rsc=wand_target_gone,
              #parm1=send(apply_on,@GetDef),#parm2=send(apply_on,@GetName));

         return FALSE;
      }

      % The wand of fire can only be applied to a battler.
      if IsClass(apply_on,&Battler)
      {
         % We need to keep morons from flaming themselves.
         if poOwner = apply_on
         {
            Send(poOwner, @MsgSendUser, #message_rsc = firewand_used_self_rsc);

            return FALSE;
         }
      
         % We also don't want the user to waste a charge by trying to attack 
         % when he can't for whatever reason, so test that here.
         if NOT Send(poOwner, @AllowPlayerAttack, #victim = apply_on)
         {
            Send(poOwner,@WaveSendUser,#wave_rsc=wand_fail_snd);

            return FALSE;
         }

         if IsClass(apply_on,&Monster)
            AND NOT Send(apply_on,@CanMonsterFight,#who=poOwner,#oStroke=self)
         {
            return FALSE;
         }

         return TRUE;
      }

      % else not a battler (player tried to firewand a tree or something).
      
      Send(poOwner,@MsgSendUser,#message_rsc=firewand_fail_rsc);
      Send(poOwner,@WaveSendUser,#wave_rsc=wand_fail_snd);

      return FALSE;
   }

   CastSpell(apply_on = $)
   "Casts fireball on single target--target already checked to be valid"
   {
      local iDamage, oRoom;

      oRoom = Send(apply_on,@GetOwner);
      send(oRoom,@SomethingWaveRoom,#what=poOwner,#wave_rsc=firewand_sound);

      % Show the ball of fire fly through the air
      send(oRoom,@SomethingShot,#who=poOwner,#target=apply_on,#projectile=self);

      % formalities that go with any combat - including advancement possibility.
      send(poOwner,@SetKillTarget,#target=apply_on);
      send(poOwner,@SetPlayerFlag,#flag=PFLAG_DID_DAMAGE,#value=TRUE);
      send(poOwner,@MsgSendUser,#message_rsc=wand_used_rsc);

      % Percent chance the user doesn't hit with wand.  Currently, chance
      %  is equal to Mysticism + Aim, bounded at 10 & 90.
      if random(1,100) < bound(send(poOwner,@GetMysticism) + send(poOwner,@GetAim),10,90)
      {
         % Assign the damage, and all that goes with it
         iDamage = Random(viDamage_min,viDamage_max);
         Send(apply_on,@MsgSendUser,#message_rsc=firewand_target_hit_rsc,
              #parm1=send(poOwner,@GetDef),#parm2=send(poOwner,@GetName));

         if Send(apply_on,@AssessDamage,#report=FALSE,#what=poOwner,
                 #damage=iDamage,#aspell=viAttack_spell_type) = $
         {
            send(poOwner, @KilledSomething, #what = apply_on, #use_weapon = self);
         }
         else
         {
            Send(poOwner,@MsgSendUser,#message_rsc=firewand_hit_target_rsc,
                 #parm1=send(apply_on,@GetDef),#parm2=send(apply_on,@GetName));
         }
      }
      else
      {
         send(poOwner,@MsgSendUser,#message_rsc=firewand_missed_target,
              #parm1=send(apply_on,@GetCapDef),#parm2=send(apply_on,@GetName));

         if isClass(apply_on,&user)
         {
            send(apply_on,@MsgSendUser,#message_rsc=firewand_missed_you,
               #parm1=send(poOwner,@GetCapDef),#parm2=send(poOwner,@GetName));
         }
      }

      send(send(poOwner,@GetOwner),@SomethingAttacked,#what=poOwner,
           #victim=apply_on,#use_weapon=self);

      return;
   }

   % the remaining procedures are for the @SomethingShot procedure
   GetProjectileIcon()
   {
      return vrFireball;
   }

   GetProjectileSpeed()
   {
      return 8;
   }

   SendProjectileAnimation()
   {
      % 40 ms between animations, frames 1-2
      Addpacket(1,ANIMATE_CYCLE, 4,40, 2,1, 2,2);

      return;
   }

   GetProjectileLightFlags()
   {
      % General lighting information.
      return LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC;
   }

   GetProjectileLightIntensity()
   {
      % Moderate light radius for projectiles.  Out of 255 levels.
      % Smaller than a cast fireball (125)
      return 75;
   }

   GetProjectileLightColor()
   {
      % Color is bright (100%) orange
      return LIGHT_BORANGE;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

