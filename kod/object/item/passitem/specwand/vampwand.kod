% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%The user of this wand must have evil karma.  When the wand is used against a
%target, he will see an earthquake effect, then some hit points will be 
%drained from him to the user.
%
%code by Justin, 98jsh@williams.edu
%
% Evil Karma factor removed by Damion, so everyone can have fun.
% Wand does subtract 5 karma on every use, and now has a chance to miss.


VampireWand is SpecialWand

constants:

   include blakston.khd

resources:

   vampireWand_name_rsc = "wand of vampiric shock"
   vampireWand_icon_rsc = wand3.bgf
   vampireWand_desc_rsc = \
   "This ancient wand is cold to the touch.  Its dark, smooth surface seems to draw in all of the life force around it."
   vampireWand_success_wav_rsc = vamp_wand.wav

   vampirewand_target_hit_rsc = \
   "You shiver uncontrollably as %s%s drains your life force away!"

   vampirewand_hit_target_rsc = "You feel giddy with energy as %s%s's life force fills your body."
   vampirewand_hit_target_full_rsc = "You cackle with glee as %s%s's life force is sucked away."

   vampirewand_used_self_rsc = "You cannot use the wand on yourself."

   vampwand_fail_rsc = "You cannot drain the life of an empty vessel!"

   vampirewand_missed_target = "%s%s narrowly dodges your vampiric attack."
   vampirewand_missed_you = "You narrowly dodge %s%s's ominous wand attack."

classvars:

   vrName = vampireWand_name_rsc
   vrIcon = vampireWand_icon_rsc

   viBulk = 25
   viWeight = 25
   viValue_average = 200

   viAttack_spell_type = ATCK_SPELL_UNHOLY + ATCK_SPELL_SHOCK + ATCK_SPELL_ALL
   viGround_group = 2

   viHits_init_min = 10
   vihits_init_max = 18

properties:
   
   vrDesc = vampireWand_desc_rsc

   piDamage_min = 2
   piDamage_max = 6

messages:

   ReqNewApply(what = $,apply_on = $)
   {

      if not Send(Send(what,@GetOwner),@ReqSomethingAttack,#what=what,
             #victim=apply_on,#use_weapon=self)
      {return False;}

      %%% Target must be in the same room as you.  Possibility, someone else
      %%% just killed the monster, or target just logged off and is ahead of
      %%% you in the thread.
      if send(apply_on,@GetOwner) <> send(poOwner,@GetOwner)
      {
         send(poOwner,@msgsenduser,#message_rsc=wand_target_gone,
               #parm1=send(apply_on,@getdef),#parm2=send(apply_on,@getname));
		   return FALSE;
      }

      %can only be applied to a battler
      if IsClass(apply_on, &battler)
      {
	 %we need to keep morons from flaming themselves
	 if poOwner = apply_on
	 {
	    Send(poOwner, @MsgSendUser, #message_rsc = vampirewand_used_self_rsc);
	    return False;
	 }
	 %we also don't want the user to waste a charge by trying to attack 
	 %when he can't for whatever reason, so test that here
	 if not Send(poOwner, @AllowPlayerAttack, #victim = apply_on)
	 {
	    Send(poOwner, @WaveSendUser, #wave_rsc = wand_fail_snd);
	    return False;
	 }

         if isClass(apply_on,&Monster) and
            (not Send(apply_on,@CanMonsterFight,#who=poOwner,#oStroke=self))
         {
            return False;
         }
	 return True;
      }
      %else not a battler
      %(this condition may not even be necessary for applied objects)
      Send(poOwner, @MsgSendUser, #message_rsc = vampwand_fail_rsc);
      Send(poOwner, @WaveSendUser, #wave_rsc = wand_fail_snd);
      return False;
   }

   CastSpell(apply_on = $)
   "Do its thing on single target--target already checked to be valid"
   {
      local iDamage, bGained, iKarma_change, oRoom;
      
      %% Give wand user chance to gain.
      send(poOwner, @setkilltarget, #target=apply_on);
      send(poOwner, @setplayerflag, #flag=PFLAG_DID_DAMAGE, #value = TRUE);
      
      %% User moves towards a negative karma.  To be precise, using a vamp wand pushes you
      %% towards evil (-80) karma.  Changed so that the push isn't as great.
      iKarma_change = send(poOwner,@CalculateKarmaChangeFromAct, #karma_act = -80, 
                           #karma_doer = send(poOwner,@getKarma), #swing_factor = 6);
      send(poOwner,@AddKarma,#amount = iKarma_Change);
      
      if random(1,100) < bound(send(poOwner,@getMysticism) + send(poOwner,@GetAim),10,90)
      {
         % a hit!
         %
         %assign the damage, and all that goes with it
         
         iDamage = Random(piDamage_min, piDamage_max);
         Send(poOwner, @MsgSendUser, #message_rsc = wand_used_rsc);
         
         bGained = FALSE;
         if Send(poOwner, @GainHealthNormal, #amount = iDamage - 1) > 0
         {
            bGained = TRUE;  
         }
         
         %% Messages all around
         
         Send(apply_on, @MsgSendUser, #message_rsc = vampirewand_target_hit_rsc,
              #parm1=send(poOwner,@getdef), #parm2=send(poOwner,@getname));
         Send(apply_on, @EffectSendUser, #what = self, #effect = EFFECT_SHAKE);
         
         if Send(apply_on, @AssessDamage, #report = FALSE, #what = poOwner,
                 #damage = iDamage, #aspell = viAttack_spell_type) = $
         {
            Send(poOwner, @KilledSomething, #what = apply_on, #use_weapon = self);
         }
         else
         {
            if bGained
            {
               Send(poOwner, @MsgSendUser, #message_rsc=vampirewand_hit_target_rsc,
                    #parm1=send(apply_on,@getdef),#parm2=send(apply_on,@getname));
            }
            else
            {
               Send(poOwner, @MsgSendUser, #message_rsc=vampirewand_hit_target_full_rsc,
                    #parm1=send(apply_on,@getdef),#parm2=send(apply_on,@getname));
            }
            oRoom = Send(poOwner, @GetOwner);
            Send(oRoom, @SomethingWaveRoom, #what = poOwner, 
                 #wave_rsc = vampireWand_success_wav_rsc);
         }
      }
      else
      {
         % miss!
         % send message to user and to target.
         
         send(poOwner,@msgsenduser,#message_rsc = vampirewand_missed_target,
              #parm1=send(apply_on,@getCapdef), #parm2=send(apply_on,@getname));
         if isClass(apply_on,&user)
         {
            send(apply_on,@msgsenduser,#message_rsc = vampirewand_missed_you,
                 #parm1=send(poOwner,@getdef), #parm2=send(poOwner,@getname));
         }
      }
      
      send(send(poOwner,@getowner),@somethingattacked,#what=poOwner,
           #victim=apply_on,#use_weapon=self);

      return;
   }

   SendEffectData()
   "For the EffectSendUser procedure"
   {
      AddPacket(4, 1000);
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

