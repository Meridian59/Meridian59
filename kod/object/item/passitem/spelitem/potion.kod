% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Potion is SpellItem

constants:

   include blakston.khd

   % * 10^-4 hp / sec (half that of a spider bite)
   POISON_LOSSRATE = 1250
   % In ms.
   POISON_DURATION = 60000 

resources:

   Potion_name_rsc = "potion"
   Potion_label_name_rsc = "generic potion"
   Potion_icon_rsc = potion01.bgf
   Made_Potion_icon_rsc = potion02.bgf
   Potion_desc_rsc = "This is a glass vial of colored liquid."
   Potion_bad_desc_rsc = \
      "This is a glass vial of slightly cloudy colored liquid.  "
      "A slight whiff of it is enough to turn your stomach."

   Potion_broken = "You quaff the contents of the vial in a single gulp."
   Potion_bad_drink = \
      "You choke down the foul-tasting contents of the vial, realizing almost "
      "immediately that this was a pretty bad idea.  Time has caused it to sour."

   Potion_sell_info = \
      "Be sure to drink this potion soon, dear, they go bad fairly quickly."

   Potion_has_karma_requirement = \
      "Before drinking, make sure you have enough karma to cast the spell inside."

   Potion_gulp_sound = drkptn.wav

classvars:

   vrLabelName = Potion_label_name_rsc
   vrBadDesc = Potion_bad_desc_rsc
   vrDesc = Potion_desc_rsc
   vrBroken = Potion_Broken
   vrKarmaDesc = Potion_has_karma_requirement

   viBulk = 20
   viWeight = 17
   viValue_average = 60

   viFilling = 10

   viObject_flags = GETTABLE_YES
   viItem_type = ITEMTYPE_POTION | ITEMTYPE_SUNDRY
   viUse_type = ITEM_SINGLE_USE

   viPoisonPercent = 0
   viGoBadDamage = 0
   vbNoBrokenView = TRUE

   viGround_Group = 1

   viHits_init_min = 1
   viHits_init_max = 1

properties:

   vrName = Potion_name_rsc
   vrIcon = Potion_icon_rsc
   vrBroken = Potion_broken

   piMinSpellPower = 20
   piMaxSpellPower = 60

messages:

   Constructor(maker=$)
   {
      if maker <> $
      {
         vrIcon = Made_Potion_icon_rsc;
      }

      propagate;
   }

   ReqNewApply(what = $,apply_on = $)
   {
      if NOT Send(apply_on,@ReqEatSomething,#filling=viFilling)
      {
	      return FALSE;
      }

      if what <> apply_on
      {
         return FALSE;
      }

      propagate;
   }

   OnSuccessfulApply(what=$, apply_on=$)
   {

      if IsClass(apply_on, &User) 
      {
         Send(apply_on, @WaveSendUser, #wave_rsc=Potion_gulp_sound);
      }
      Send(apply_on, @EatSomething, #nutrition=0, #filling=viFilling);

      propagate;
   }
   
   NewApplied(what = $,apply_on = $)
   {
      local oSpell;

      if pbBad
      {
         Send(apply_on,@MsgSendUser,#message_rsc=Potion_bad_drink);
         % do some damage!
         if send(apply_on,@AssessDamage,#report=FALSE,#what=what,
                 #damage=(viGoBadDamage*Random(8,12)/10),
                 #aspell=ATCK_SPELL_ACID) = $
         {
            Send(what,@KilledSomething,#what=apply_on);
         }

         % maybe poison, too!
         if Random(1,100) <= viPoisonPercent
         {
            oSpell = Send(SYS,@FindSpellByNum,#num=SID_POISON);
            Send(oSpell,@MakePoisoned,#who=apply_on,
                 #lossrate=(POISON_LOSSRATE*Random(8,12)/10),
                 #duration=(POISON_DURATION*Random(8,12)/10));
         }

         % Even though the desired effect didn't happen, we still technically
         % applied the potion to the user, so do the follow-up.
         Send(self, @OnSuccessfulApply, #what=what, #apply_on=apply_on);

         return;
      }

      propagate;
   }

   IsBeverage()
   {
      return TRUE;
   }

   DoFailure(what = $)
   {
      % Overriding because the superclass gives a "broken" message.  Oops.
      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
