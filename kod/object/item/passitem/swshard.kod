% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SwordShard is PassiveItem

constants:

   include blakston.khd

resources:
   swordshard_name_rsc = "shard of a sword"
   swordshard_desc_rsc = "This is one piece of a very elaborate looking sword.  "
   swordshard_possessive = "'s name is written in subtle, glowing eldritch script on the metal of the shard."

   SwordShard_bind = "You watch in amazement as the shards of the sword bind themselves into a new whole."
   swordshard_try_bind = "Your sword shards attempt to bind themselves together, but fail, and collapse into a pile of junk."

classvars:
   
   vrName = SwordShard_name_rsc
   vrDesc = SwordShard_desc_rsc   

   viValue_average = 150
   viWeight = 25
   viBulk = 25

   viInventory_group = 3

properties:  

   poQuester = $

messages:   

   Constructor(quester = $)
   {
      if (quester <> $)
      {
         poQuester = quester;
      }

      propagate;	 
   }

   NewOwner()
   {
      post(self,@CheckForAllPieces);

      propagate;
   }

   CheckForAllPieces()
   {
      local i, ShardA, ShardB, ShardC, ShardD, oOwner,
               bShardA, bShardb, bShardC, bShardD;
      
      if poQuester = $
      {
         return;
      }
      
      if poOwner = $ OR NOT isClass(poOwner,&user)
      {
         return;
      }
      
      ShardA = $;
      ShardB = $;
      ShardC = $;
      ShardD = $;
      bShardA = FALSE;
      bShardB = FALSE;
      bShardC = FALSE;
      bShardD = FALSE;

      for i in send(poOwner,@GetHolderPassive)
      {
         if isClass(i,&SwordShardA) 
         {
            if (send(i,@GetQuester) = poQuester)
            {
               ShardA = i;
               bShardA = TRUE;
            }
            else 
            {
               bShardA = TRUE;
            }
         }

         if isClass(i,&SwordShardB) 
         {
            if (send(i,@GetQuester) = poQuester)
            {
               ShardB = i;
               bShardB = TRUE;
            }
            else 
            {
               bShardB = TRUE;
            }
         }

         if isClass(i,&SwordShardC)
         {
            if (send(i,@GetQuester) = poQuester)
            {
               ShardC = i;
               bShardC = TRUE;
            }
            else 
            {
               bShardC = TRUE;
            }
         }

         if isClass(i,&SwordShardD) 
         {
            if (send(i,@GetQuester) = poQuester)
            {
               ShardD = i;
               bShardD = TRUE;
            }
            else 
            {
               bShardD = TRUE;
            }
         }
      }         
      
      %% Okay, see if all four parts are there.      
      if (ShardA <> $) AND (ShardB <> $)
         AND (ShardC <> $) AND (ShardD <> $)
      {         
         %% They have all the parts.  Delete 'em and give
         %% the owner a sword.
         oOwner = send(self,@GetOwner);         
         send(oOwner,@msgsenduser,#message_rsc= swordshard_bind);
         send(oOwner,@NewHold,#what=Create(&RiijaSword,#quester=poQuester));
         send(shardA,@Delete);
         send(shardB,@Delete);
         send(ShardC,@Delete);
         send(shardD,@delete);
      }
      else
      {
         if (bShardA <> FALSE) AND (bShardB <> FALSE)
            AND (bShardC <> FALSE) AND (bShardD <> FALSE)
         {
            send(poOwner,@MsgSendUser,#message_rsc=swordshard_try_bind);
         }
      }

      return;
   }
   
   GetQuester()
   {
      return poQuester;
   }

   AppendDesc()
   {
      if poQuester <> $
      {
         AppendTempString(send(poQuester,@GetName));
         AppendTempString(swordshard_possessive);
      }

      return;
   }

   ForgetQuester(quester=$)
   "Sent to all shards when someone suicides."
   {
      if poQuester = quester
      {
         poQuester = $;
      }

      return;
   }

   Delete()
   {
      poQuester = $;

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

