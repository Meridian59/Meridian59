% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Token is PassiveItem

% The token is a used in the faction games.  It drains vigor from the holder.
% The token takes both hand slots and the holder cannot cast spells while
%  holding it.  This is to prevent cheezy PvP tactics while holding a token.
%  Players holding a token at death take a no-peanlty death.

constants:
   
   include blakston.khd
   TOKEN_FATIGUE_TIME=10000
   LAZY_RESET_TIME=180000

resources:

   token_name_rsc = "Token"
   token_icon_rsc = rat.bgf
   token_desc_rsc = "A Token of the Meridian Council"
   token_used_desc_rsc = \
      "The token is very heavy, and you feel your vigor drain away as you hold it."

   token_use_rsc = \
      "You feel drained and out of breath from carrying the token."
   token_unuse_rsc = \
      "You are relieved to feel your vigor begin returning as you let go of the token."
   token_cantuse_rsc = \
      "You are unable to hold so many items in your hands, and the token slips to the ground."
   token_noteligible_rsc = \
      "The token recognizes you are beneath notice of the Royal Court, and writhes in your hands. You cannot hold it."

   token_realized_rsc = "~IYou are astonished to see %s%s in the loot from your kill.~n"
   token_was_realized_rsc = "~IYour nerves jangle, and you suddenly know that %s%s has recovered %s%s from %s%s.~n"

   token_was_delivered_rsc = "~IAll hail %s%s who has returned %s%s to the Meridian Council.~n"

   tok_faction_too_strong = "I am sorry, but my current followers provide all the support I need. Perhaps if you were to try again later, I will have need of you."

   token_drops = "%s%s slips from your grasp and falls to the ground!"

classvars:

   vrName = token_name_rsc
   vrIcon = token_icon_rsc
   vrDesc = token_desc_rsc

   viBulk = 50
   viWeight = 500
   viValue_average = 2500
   
   viUse_type = ITEM_USE_HAND
   viUse_Amount = 2

   viVigorDrop = 120000
   viInitialTimeval = 10000

   viItem_type = ITEMTYPE_TOKEN

   vrTokenOverlay = $

properties:

   pbIn_use = False
   pbRejectedOffer=False
   piVigorRestThresholdChange = 200
   ptTortureTimer = $
   ptLazyTimer = $
   ptGenerationTimer = $

messages:

   Constructor()
   {
      poOwner = $;
      ptGenerationTimer=CreateTimer(self,@TokenGenerationTimer,viInitialTimeval);
      
      propagate;
   }

   Delete()
   {
      if pbIn_use
      {
         Send(self,@NewUnused);
      }
      
      if ptTortureTimer <> $
      {
         DeleteTimer(ptTortureTimer);
         ptTortureTimer = $;
      }
      
      if ptLazyTimer <> $
      {
         DeleteTimer(ptLazyTimer);
         ptLazyTimer=$;
      }
      
      if ptGenerationTimer <> $
      {
         DeleteTimer(ptGenerationTimer);
         ptGenerationTimer=$;
      }
      
      if Send(SYS,@GetTokenGame) <> $
      {
         Send(Send(SYS,@GetTokenGame),@TokenDeleted,#what=self);
      }
      
      propagate;
   }
   
   GetInitialTimeval()
   {
      return viInitialTimeval;
   }

   NilOwner()
   {
      poOwner = $;

      return;
   }

   NewOwner(what = $)
   {
      if ptLazyTimer <> $
      {
         DeleteTimer(ptLazyTimer);
         ptLazyTimer = $;
      }

      if ptTortureTimer <> $
      {
         DeleteTimer(ptTortureTimer);
         ptTortureTimer = $;
      }

      if what = $
      {
         propagate;
      }

      if IsClass(what,&User)
         and NOT send(what,@PlayerIsImmortal)
      {
         post(self,@TryingToUse,#what=what);
      }
      
      if IsClass(what,&Room)
      {
         ptLazyTimer = CreateTimer(self,@LazyTokenTimer,LAZY_RESET_TIME);
      }
      
      propagate;
   }

   LazyTokenTimer()
   {
      ptLazyTimer = $;
      
      if IsClass(poOwner,&Room)
      {
         Send(self,@TeleportToken,#myroom=poOwner);
      }
      
      return;
   }

   TryingToUse(what = $)
   {
      local i,Temp;
      
      Temp = FALSE;
      
      Send(what,@TryUseItem,#what=self);
      
      if Send(what,@PlayerIsIntriguing)
      {
         for i in Send(what,@GetPlayerUsing)
         {
            if i = self
            {
               return;
            }
         }
         
         Send(what,@MsgSendUser,#message_rsc=token_cantuse_rsc);
         
         Post(Send(what,@GetOwner),@NewHold,#what=self,
              #new_row=Send(poOwner,@GetRow),#new_col=Send(poOwner,@GetCol));
      }
      else
      {
         for i in Send(what,@GetPlayerUsing)
         {
            if i=self
            {
               Send(what,@MsgSendUser,#message_rsc=token_noteligible_rsc);
               Send(self,@NewUnused);
               Temp = TRUE;
               
               break;
            }
         }
        
         if not Temp 
         {
            Send(what,@MsgSendUser,#message_rsc=token_cantuse_rsc);
            Post(Send(what,@GetOwner),@NewHold,#what=self,
                 #new_row=Send(poOwner,@GetRow),#new_col=Send(poOwner,@GetCol));
         }
      }
      
      return;
   }

   NewUsed(what = $)
   "When the token is carried, the wearer's rest threshold goes down"
   {
      local iVigorRestThreshold;
      
      pbIn_use = TRUE;
      
      if Send(poOwner,@PlayerIsImmortal)
      {
         piVigorRestThresholdChange = 0;

         propagate;
      }

      iVigorRestThreshold = send(poOwner, @GetVigorRestThreshold);

      % This is to ensure both that the player's rest threshold does not drop below
      %   10 as well as to make sure we don't make it above maximum when the token is
      %   dropped.  (see player.kod for why)

      piVigorRestThresholdChange = iVigorRestThreshold - 10;

      Send(poOwner,@MsgSendUser,#message_rsc=token_used_desc_rsc);
      
      Send(poOwner,@SetVigorRestThreshold,#amount=iVigorRestThreshold-piVigorRestThresholdChange);
      send(poOwner,@AddExertion,#amount=viVigorDrop/2+Random(0,viVigorDrop/2));
           
      ptTortureTimer = CreateTimer(self,@TortureHolder,TOKEN_FATIGUE_TIME);

      % Cancels rescue and elusion when a player pick up a token
      send(poOwner,@BreakTrance);
      send(poOwner,@CancelRescue);
      
      if vrTokenOverlay <> $
      {
         post(poOwner,@SetOverlay,#what=self);
      }

      propagate;
   }

   TortureHolder()
   {
      if NOT pbIn_use
      {
         return;
      }
      
      if ptTortureTimer<>$
      {
         ptTortureTimer=$;
      }
      
      if Send(poOwner,@PlayerIsImmortal)
      {
         return;
      }
      
      send(poOwner,@MsgSendUser,#message_rsc=token_use_rsc);
      send(poOwner,@AddExertion,#amount = viVigorDrop/2+Random(0,viVigorDrop/2));
      
      ptTortureTimer = CreateTimer(self,@TortureHolder,TOKEN_FATIGUE_TIME);
      
      return;
   }

   OfferRejected()
   {
      pbRejectedOffer = TRUE;
      
      return;
   }

   NewUnused(what = $,where=$,death=FALSE)
   "Called when the token is dropped or unused (same thing). The special"
   "where flag is needed to handle guild hall enterings."
   {
      local iVigorRestThreshold,oldOwner,oldrow,oldcol,oldroom;
      
      if (not pbIn_use)
      {
         propagate;
      }
      
      pbIn_use = FALSE;
      
      iVigorRestThreshold = send(poOwner, @GetVigorRestThreshold);
      if ptTortureTimer<>$
      {
         DeleteTimer(ptTortureTimer);
         ptTortureTimer=$;
      }
      
      if NOT Send(poOwner,@PlayerIsImmortal)
      {
         send(poOwner,@MsgSendUser,#message_rsc=token_unuse_rsc);
      }
      
      send(poOwner,@SetVigorRestThreshold,#amount=iVigorRestThreshold+piVigorRestThresholdChange);
      piVigorRestThresholdChange = 200;

      if where<>$
      {
         Post(where,@NewHold,#what=self,#new_row=Send(poOwner,@GetRow),#new_col=Send(poOwner,@GetCol));
      }
      else
      {
         oldOwner = poOwner;
         oldRoom = send(poOwner,@getowner);
         oldCol = send(poOwner,@getcol);
         oldRow = send(poOwner,@getrow);
         Post(self,@CheckForDrop,#owned=oldOwner,#oldroom=oldroom,#oldrow=oldrow,#oldcol=oldcol);
      }
      
      if vrTokenOverlay <> $
      {
         Send(poOwner,@RemoveOverlay,#what=self);
      }

      propagate;
   }

   % This hack makes sure we are after any attempts to use the token,
   % especially needed for offering to players.... So, if were still
   % the owner when we get here, it means we unused it ourselves, and
   % need to drop it.

   CheckForDrop(owned=$, oldroom = $, oldrow = 20, oldcol = 20)
   {
      Post(self,@CheckForDropTwo,#owned=owned,#oldroom=oldroom, #oldrow=oldrow, #oldcol=oldcol);

      return;
   }
   
   CheckForDropTwo(owned=$, oldroom = $, oldrow= 20, oldcol = 20)
   {
      if poOwner = owned AND NOT pbRejectedOffer
      {
         if send(poOwner,@GetOwner) = $ AND oldroom <> $
         {
            Send(oldroom,@NewHold,#what=self,#new_row=oldrow,#new_col=oldcol);
         }
         else
         {
            Send(Send(poOwner,@GetOwner),@NewHold,#what=self,
                 #new_row=Send(poOwner,@GetRow),#new_col=Send(poOwner,@GetCol));
         }
      }
      
      pbRejectedOffer = FALSE;
      
      return;
   }

   UserLogoff()
   {
      send(poOwner,@MsgSendUser,#message_rsc=Token_drops,
           #parm1=send(self,@GetCapDef),#parm2=vrName);
      Send(poOwner,@TryUnuseItem,#what=self);
      
      propagate;
   }

   DestroyDisposable()
   {
      return;
   }

   TeleportToken(myroom=$)
   {
      if myroom = $ OR NOT IsClass(poOwner,&Room)
      {
         return;
      }
      
      Send(myroom,@teleport,#what=self);
      
      return;
   }

   TokenGenerationTimer()
   {
      local i;

      ptGenerationTimer = $;

      if Send(SYS,@GetTokenGame) = $
      {
         return;
      }

      if NOT Send(Send(SYS,@GetTokenGame),@ScandalCheck)
      {
         Send(Send(SYS,@GetTokenGame),@OpenToken,#mytoken=self);
      }
      else
      {
         ptGenerationTimer = CreateTimer(self,@TokenGenerationTimer,
                                         Send(Send(SYS,@GetTokenGame),@GetTimeval,#mytoken=self)/2);
      }

      return;
   }
   
   TokenDelivered(who=$,mob=$)
   {
      local i;

      for i in Send(SYS,@GetUsersLoggedOn)
      {
         if NOT send(i,@PlayerIsIntriguing)
         {
            continue;
         }
         
         if i <> who
         {
            Send(i,@MsgSendUser,#message_rsc=token_was_delivered_rsc,
                 #parm1=Send(who,@GetIndef),#parm2=Send(who,@GetName),
                 #parm3=Send(self,@GetIndef),#parm4=Send(self,@GetName));
         }
         else
         {
            if Send(who,@GetFaction) <> FACTION_NEUTRAL
               AND (isClass(mob,&Council)
                    OR Send(who,@GetFaction) = Send(mob,@GetFaction))
            {
               Send(who,@UpdateFactionService,#full=TRUE);
            }

            Send(who,@TokenDeliveryReward,#mob=mob);

            if isClass(mob,&Factions)
               AND Send(Send(SYS,@GetParliament),@GetPower,
                        #faction=Send(mob,@GetFaction)) = FACTION_STRONGLY_IN
            {
               Send(who,@MsgSendUser,#message_Rsc=tok_faction_too_strong);
            }
            else  
            {
               if (isClass(mob,&Factions)
                   AND (Send(who,@GetFaction) <> Send(mob,@GetFaction)))
                  OR (isClass(mob,&ShalillePriestess)
                      AND (Send(who,@GetFaction) <> FACTION_NEUTRAL))
               { 
                  Send(who,@ResignFaction);
                  Send(who,@JoinFaction,#new_faction=Send(mob,@GetFaction));
               }

               if Send(who,@GetFaction)=FACTION_NEUTRAL AND isClass(mob,&Factions)
               {
                  Send(who,@JoinFaction,#new_faction=Send(mob,@GetFaction));
               }
            }
         }
      }

      Send(Send(SYS,@GetTokenGame),@DeliveryEffects,
           #mob=mob,#who=who,#mytoken=self);
      ptGenerationTimer = CreateTimer(self,@TokenGenerationTimer,
                                      Send(Send(SYS,@GetTokenGame),@GetTimeval,#mytoken=self));
     
      return;
   }

   TokenRealized(who=$,mob=$)
   {
      local i;
      
      For i in Send(SYS,@GetUsersLoggedOn)
      {
         if (not send(i,@playerisintriguing)) {continue;}
         if i = who
         {
            Send(i,@MsgSendUser,#message_rsc=token_realized_rsc,
                 #parm1=Send(self,@GetIndef),#parm2=Send(self,@GetName));
         }
         else
         {
            Send(i,@MsgSendUser,#message_rsc=token_was_realized_rsc,
                 #parm1=Send(who,@GetIndef),
                 #parm2=Send(who,@GetName),
                 #parm3=Send(self,@GetIndef),#parm4=Send(self,@GetName),
                 #parm5=Send(mob,@GetIndef),#parm6=Send(mob,@GetName));
         }
      }
      if Send(SYS,@GetTokenGame) <> $
      {
         Send(Send(SYS,@GetTokenGame),@CloseToken,#mytoken=self);
      }
      
      return;
   }

   % Overlay stuff.

   GetOverlay()
   {
      return vrTokenOverlay;
   }
   
   GetOverlayHotspot()
   {
      return HS_TOKEN;
   }

   SendOverlayAnimation()
   {
      % group 1 is the player-overlay group
      if vrTokenOverlay <> $
      {
         AddPacket(1,ANIMATE_NONE,2,1);
      }
      
      return;
   }

   % Misc. infrastructure to keep the tokens in play.
   
   CanShatter()
   "Tokens may NOT be shattered."
   {
      return FALSE;
   }

   ReqDMDelete()
   "Tokens are not deleted with the DM CLear Ability command."
   {
      return FALSE;
   }
   
   CanBeStoredInVault()   
   {
      return FALSE;
   }

   RandomTeleport()
   {
      local oGame, iRoom, oRoom;

      oGame = send(SYS,@GetTokenGame);
      iRoom = send(oGame,@ChooseTokenRoom);
      if iRoom <> $
      {
         oRoom = send(SYS,@FindRoomByNum,#num=iRoom);
         send(oRoom,@Teleport,#what=self);
      }
      
      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

