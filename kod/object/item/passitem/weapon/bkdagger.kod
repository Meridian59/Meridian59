% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
BlackDagger is Weapon

constants:

   include blakston.khd
   include protocol.khd

   PLAYER_HEAL_TIME = 300000     %% every five minutes, you get a HP back.
   DAGGER_HEAL_TIME = 28800000   %% every eight hours, the dagger gets an HP back.

   PLAYER_MAX = 4
   DAGGER_MAX = 5

resources:

   BlackDagger_name_rsc = "black dagger"
   BlackDagger_icon_rsc = bkswd.bgf
   BlackDagger_desc_rsc = \
   "This elegant blade looks like it would fit snugly between a pair of shoulder blades. \n\n%s%s%s"
   
   BlackDagger_gamestart_glow = "~IYour dagger gains an unearthly glow about it."

   BlackDagger_impact = "~IThe black blade shatters upon impact!"
   BlackDagger_cant_use = "~IYou try to wield the dark blade, but somehow, your heart is not quite in it."
   BlackDagger_shiver = "~IThe black dagger suddenly shivers ominously in your hand."

   BlackDagger_notches = "There are %i notches carved in the handle."
   BlackDagger_one_notch = "There is a single elegant notch carved in the handle."
   BlackDagger_no_notches = "The handle is smooth and flawless."

   BlackDagger_4_gems = "All four gems in the pommel shine with unparalleled brilliance.  "
   BlackDagger_3_gems = "Three of the gems in the pommel glow with a healthy luster.  "
   BlackDagger_2_gems = "Two of the gems in the pommel seem to be brighter than the others.  "
   BlackDagger_1_gems = "Only one of the four gems has any glow in it at all, and even that seems to be flickering.  "

   BlackDagger_runes = "There seem to be some runes carved in the blade, but you can't make heads or tails of them.  "
   BlackDagger_name = "There is, very clearly, a name carved into the blade.  It reads, '%q'.  "
   BlackDagger_window_overlay_rsc = povbkswd.bgf
   BlackDagger_player_overlay = bkswdov.bgf

   BlackDagger_miss = "You miss %s%s with your black dagger."
   BlackDagger_miss_target = "%s%s misses you with %s black dagger."

   BlackDagger_hit = "You hit %s%s with your black dagger, but the blade seems to weaken as you do so."
   BlackDagger_hit_target = "%s%s hits you with the black dagger, but leaves nary a wound."

   BlackDagger_surehit = "You hit %s%s with your black dagger, and sink it in to the hilt!"
   BlackDagger_surehit_target = "%s%s hits you with %s black dagger, and you feel your soul being invaded!"
                             BlackDagger_dies = "You have been slain at the hands of %s%s!"
   BlackDagger_dies_killer = "You have slain %s%s with your black dagger!"

   BlackDagger_no_leave = "As you release hold of the black dagger, it seems to cling to your hand!"
   BlackDagger_glows = "~IOne of the gemstones in the hilt of your blade flickers back to life."

   BlackDagger_mail_logoff = "Subject: You ignored your gems, coward.\n"
      "You logged off while one or more of your gems was not aglow, and therefore you were "
      "kicked out of the Assassin's Game.\n\n-- Roq, the Dark Blade"

   BlackDagger_mail_warning = "Subject: I watch you, absent one.\n"
      "You have not been spending enough time online to compete in the "
      "Assassin's game.  If I am forced to make this conclusion again, I will "
      "unceremoniously kick you out of the game.\n\n-- Roq, the Dark Blade"

   BlackDagger_roq = "Roq, the Dark Blade"

   bkswd_dead_name_rsc = "assassinated adventurer"

classvars:

   vrName = BlackDagger_name_rsc
   vrIcon = BlackDagger_icon_rsc

   % Black daggers are low quality swords (?), just like shortswords
   viWeaponType = WEAPON_TYPE_THRUST
   viWeaponQuality = WEAPON_QUALITY_LOW

   vrWeapon_window_overlay = BlackDagger_window_overlay_rsc
   vrWeapon_overlay = BlackDagger_player_overlay

   viGround_group = 2
   viInventory_group = 1
   viBroken_group = 3

   viBulk = 35
   viWeight = 25

   viItem_type = ITEMTYPE_WEAPON | ITEMTYPE_SPECIAL

properties:

   piAttack_type = ATCK_WEAP_NONMAGIC+ATCK_WEAP_PIERCE

   piNotches = 0
   piPlayer_hits = 4
   piDagger_hits = 5
   piShiver = 0

   pbWarned = 0

   ptPlayer_heal = $
   ptDagger_heal = $
   ptShiver = $

   piTime_Online = 0

messages:

   ShowDesc()
   {
      local oTarget, bDo_notch;

      bDo_Notch = FALSE;
      AddPacket(4,BlackDagger_desc_rsc);

      % If a match isn't in session, show the defaults
      %   and some unidentifiable runes instead of a name.
      if NOT Send(Send(SYS,@GetAssassinGame),@InSession)
      {
         AddPacket(4,BlackDagger_4_gems);
         AddPacket(4,BlackDagger_no_notches);
         AddPacket(4,BlackDagger_runes);
         
         return;
      }

      % The Gems show how much life you have left;
      if piPlayer_hits = 4
      {
         AddPacket(4,BlackDagger_4_gems);
      }
      else
      {
         if piPlayer_hits = 3
         {
            AddPacket(4,BlackDagger_3_gems);
         }
         else
         {
            if piPlayer_hits = 2
            {
               AddPacket(4,BlackDagger_2_gems);
            }
            else
            {
               if piPlayer_hits = 1
               {
                  AddPacket(4,BlackDagger_1_gems);
               }
            }
         }
      }

      % The notches show the number of kills that player has.
      if piNotches < 1 { AddPacket(4,BlackDagger_no_notches); }
      else
      {
         if piNotches = 1
         {
            AddPacket(4,BlackDagger_one_notch);
         }
         else
         {
            AddPacket(4,BlackDagger_notches);
            bDo_notch = TRUE;
         }
      }

      % Tell the player who his target is
      oTarget = Send(Send(SYS,@GetAssassinGame),@GetPrimaryOpponent,#who=poOwner);
      if oTarget = $
      {
         debug("Invalid target!  Black dagger in hands of non-combatant?");
         AddPacket(4,BlackDagger_runes);

         return;
      }

      % Put the name string on the black dagger.  Add the name after you
      %  put the notches in.
      AddPacket(4,BlackDagger_name);

      % Add the number of notches to the packet
      if bDo_Notch
      {
         AddPacket(4,piNotches);
      }

      % Give the name on the black dagger.
      AddPacket(STRING_RESOURCE,Send(oTarget,@GetTrueName));

      return;
   }

   InitGame()
   {
      piNotches = 0;
      piPlayer_hits = 4;
      piDagger_hits = 5;
      piShiver = 0;
      pbWarned = FALSE;
      piTime_Online = 0;

      return;
   }

   AssassinHit(target=$)
   {
      local oDagger;

      if target = $
      {
         DEBUG("Reached AssassinHit with Target equal NIL!");
         
         return;
      }

      oDagger = Send(Send(SYS,@GetAssassinGame),@GetDagger,#who=target);

      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_surehit,
           #parm1=Send(target,@GetDef),#parm2=Send(target,@GetName));
      Send(target,@MsgSendUser,#message_rsc=BlackDagger_surehit_target,
           #parm1=Send(poOwner,@GetCapDef),#parm2=Send(poOwner,@GetName),
           #parm3=Send(poOwner,@GetHisHer));

      Send(poOwner,@DoHitMessageSound,#what=target,
           #damage=10,#stroke_obj=Send(SYS,@findskillbynum,#num=SKID_SLASH));
      Send(oDagger,@AssassinTakesHit,#attacker=poOwner);
      
      % Does the animations and overlays.
      Send(self,@WeaponAttack);

      return;
   }

   AssassinHitWrongTarget(target=$)
   {
      if target = $
      {
         DEBUG("Reached AssassinHit with Target equal NIL!");
         
         return;
      }

      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_hit,
           #parm1=Send(target,@GetDef),#parm2=Send(target,@GetName));
      Send(target,@MsgSendUser,#message_rsc=BlackDagger_hit_target,
           #parm1=Send(poOwner,@GetCapDef),#parm2=Send(poOwner,@GetName));

      Send(poOwner,@DoHitMessageSound,#what=target,
           #damage=1,#stroke_obj=Send(SYS,@FindSkillByNum,#num=SKID_SLASH));

      % Does the animations and overlays
      Send(self,@WeaponAttack);

      piDagger_hits = piDagger_hits - 1;
      if piDagger_hits < 1
      {
         Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_impact);
         Send(Send(SYS,@GetAssassinGame),@QuitCombatant,#who=poOwner);
      }
      else
      {
         if ptDagger_heal = $
         {
            ptDagger_heal = CreateTimer(self,@DaggerHealTimer,DAGGER_HEAL_TIME);
         }
      }
      
      return;
   }

   AssassinMiss(target=$)
   {
      if target = $
      {
         DEBUG("Reached AssassinHit with Target equal NIL!");
         
         return;
      }

      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_miss,
          #parm1=Send(target,@GetDef),#parm2=Send(target,@GetName));
      Send(target,@MsgSendUser,#message_rsc=BlackDagger_miss_target,
          #parm1=Send(poOwner,@GetCapDef),#parm2=Send(poOwner,@GetName),
          #parm3=Send(poOwner,@GetHisHer));

      % Does the animations and overlays
      Send(self,@WeaponAttack);
      Send(Send(SYS,@findskillbynum,#num=SKID_SLASH),@SendMissMessageToAttacker,
           #who=poOwner,#victim=target,#weapon_used=self,#bText=FALSE);

      return;
   }

   AssassinTakesHit(attacker=$)
   {
      if attacker = $
      {
         DEBUG("Reached AssassinTakesHit with Target equal NIL!");

         return;
      }

      piPlayer_hits = piPlayer_hits - 1;
      if piPlayer_hits < 1
      {
         Send(self,@AssassinDies,#attacker=attacker);
      }
      else
      {
         if ptPlayer_heal = $
         {
            ptPlayer_heal = CreateTimer(self,@PlayerHealTimer,PLAYER_HEAL_TIME);
         }
      }
      
      return;
   }

   AssassinDies(attacker=$)
   {
      local oDagger;

      if attacker = $
      {
         DEBUG("Reached AssassinDies with Target equal NIL!");
         
         return;
      }

      oDagger = Send(Send(SYS,@GetAssassinGame),@GetDagger,#who=attacker);
      Send(oDagger,@AddNotch);

      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_dies,
           #parm1=Send(attacker,@GetDef),#parm2=Send(attacker,@GetName));
      Send(attacker,@MsgSendUser,#message_rsc=BlackDagger_dies_killer,
           #parm1=Send(poOwner,@GetCapDef),#parm2=Send(poOwner,@GetName));
      Send(Send(poOwner,@getOwner),@NewHold,#what=Send(poOwner,@CreateCorpse,#Assassinated=TRUE),
           #new_row=Send(poOwner,@GetRow),#new_col=Send(poOwner,@GetCol),
           #fine_row=16,#fine_col=16, #new_angle=Send(poOwner,@GetAngle));

      Send(poOwner,@TeleportTo,#rid=RID_UNDERWORLD);

      % Make this a penalty-free "death".
      Send(poOwner,@SetDeathCost,#DeathCost=0);
      Send(Send(SYS,@GetAssassinGame),@QuitCombatant,#who=poOwner,#kill=TRUE);
     
      return;
   }

   PlayerHealTimer()
   {
      if piPlayer_hits < 1 OR piPlayer_hits > (PLAYER_MAX - 1)
      {
         DEBUG("PlayerHealTimer called while piPlayer_hits was an invalid value!");

         return;
      }

      if piPlayer_hits < PLAYER_MAX
      {
         piPlayer_hits = piPlayer_hits + 1;
         Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_glows);
      }

      if piPlayer_hits < PLAYER_MAX
      {
         ptPlayer_heal = CreateTimer(self,@PlayerHealTimer,PLAYER_HEAL_TIME);
      }
      else
      {
         ptPlayer_heal = $;
      }

      return;
   }

   DaggerHealTimer()
   {
      if piDagger_hits < 1 OR piDagger_hits > (DAGGER_MAX - 1)
      {
         DEBUG("DaggerHealTimer called while piDagger_hits was an invalid value!");

         return;
      }

      if piDagger_hits < DAGGER_MAX
      {
         piDagger_hits = piDagger_hits + 1;
      }

      if piDagger_hits < DAGGER_MAX
      {
         ptDagger_heal = CreateTimer(self,@DaggerHealTimer,DAGGER_HEAL_TIME);
      }
      else
      {
         ptDagger_heal = $;
      }

      return;
   }

   AddNotch()
   {
      piNotches = piNotches + 1;
      
      return;
   }

   ReqUse(what=$)
   {
      local oGame;
      
      oGame=Send(SYS,@GetAssassinGame);

      if Send(oGame,@InSession) AND Send(oGame,@isCombatant,#who=what)
      {
         return TRUE;
      }

      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_cant_use);
      
      return FALSE;
   }

   % Here for compatibility.  Not used.

   ModifyHitRoll(hit_roll = 0)
   {
      return 0;
   }

   GetDamage()
   {
      return 0;
   }

   CanMend()
   "Black Daggers are not mendable (they also don't take damage)"
   {
      return FALSE;
   }

   CanWeaken()
   "Brittle will not work on a black dagger."
   {
      return FALSE;
   }

   CanSwap()
   "Swap will never yank a black dagger."
   {
      return FALSE;
   }

   CanShatter()
   "Black daggers will not shatter."
   {
      return FALSE;
   }

   CanEnchant()
   {
      return FALSE;
   }

   ReqNewOwner()
   "Black daggers skip this function when placed in someone's inventory, "
   "and when deleted.  Black daggers, however, may not be dropped, sold to an "
   "NPC or offered to anyone."
   {
      Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_no_leave);
      
      return FALSE;
   }

   UserLogoff()
   {
      local iStart_time, iLogon_time;

      if piPlayer_hits < PLAYER_MAX
      {
         Send(poOwner,@ReceiveNestedMail,#nest_list=[4,BlackDagger_mail_logoff],
              #from=BlackDagger_roq,#dest_list=[poOwner]);
         Send(Send(SYS,@GetAssassinGame),@QuitCombatant,#who=poOwner);

         return;
      }

      % Okay, add the player's time to online time.
      iStart_time = Send(Send(SYS,@GetAssassinGame),@GetStartTime);
      iLogon_time = Send(poOwner,@GetLastLoginTime);

      if iStart_time > iLogon_time
      {
         piTime_online = piTime_online + (GetTime() - iStart_Time);
      }
      else
      {
         piTime_online = piTime_online + (GetTime() - iLogon_time);
      }

      propagate;
   }

   GetTimeOnline()
   {
      local iStart_time, iLogon_time;

      if NOT Send(poOwner,@IsLoggedOn)
      {
         return piTime_online;
      }

      iStart_time = Send(Send(SYS,@GetAssassinGame),@GetStartTime);
      iLogon_time = Send(poOwner,@GetLastLoginTime);   

      if iStart_time > iLogon_time
      {
         return (piTime_online + (GetTime() - iStart_Time));
      }
      
      return (piTime_online + (GetTime() - iLogon_time));
   }

   AddShiver()
   {      
      piShiver = piShiver + 1;
      
      return;
   }

   UserLogon()
   {
      if piTime_Online = 0
      {
         ptShiver = CreateTimer(self,@ShiverTimer,10000);
      }

      % Just in case they logged off recently.
      if ptShiver <> $                
      {
         DeleteTimer(ptShiver);
         ptShiver = $;
      }

      if piTime_Online = 0
      {
         ptShiver = CreateTimer(self,@ShiverTimer,10000);
         
         propagate;
      }

      % Make the shivers go off after a delay, so you notice them more.
      if piShiver > 0
      {
         ptShiver = CreateTimer(self,@ShiverTimer,10000);
      }

      propagate;
   }

   ShiverTimer()
   "This is only called on logon if something has changed while the player "
   "was offline."
   {
      ptShiver = $;

      if piShiver < 0 AND piTime_online <> 0
      {
         DEBUG("piShiver not less than zero and piTime_online not = 0!");
         
         return;
      }

      if piTime_online = 0
      {
         Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_gamestart_glow);
       
         return;
      }

      while piShiver > 0
      {
         Send(poOwner,@MsgSendUser,#message_rsc=BlackDagger_shiver);
         piShiver = piShiver - 1;
      }
      
      return;
   }

   GetNotches()
   {
      return piNotches;
   }

   HasBeenWarned()
   {
      return pbWarned;
   }

   Warn()
   {
      Send(poOwner,@ReceiveNestedMail,#nest_list=[4,BlackDagger_mail_warning],
           #from=BlackDagger_roq,#dest_list=[poOwner]);
      pbWarned = TRUE;
      
      return;
   }

   DropOnDeath()
   "A player does NOT drop a dagger when he dies."
   {
      return FALSE;
   }

   CanBeGivenToNPC()
   "NPCs will refuse to take this item if offered to them."
   {
      return FALSE;
   }

   CanBeStoredInVault()   
   {
      return FALSE;
   }

   ReqDMDelete()
   "Item will not be deleted by DM Clear Inventory command"
   {
      return FALSE;
   }
	
   Delete()
   {
      if ptDagger_heal <> $
      {
         DeleteTimer(ptDagger_heal);
         ptDagger_heal = $;
      }
      
      if ptPlayer_heal <> $
      {
         DeleteTimer(ptPlayer_heal);
         ptPlayer_heal = $;
      }
      
      if ptShiver <> $
      {
         DeleteTimer(ptShiver);
         ptShiver = $;
      }

      propagate;
   }

   ActivateCheapDeath()
   "Stub for ITEMTYPE_SPECIALs like the Amulet of the Three and the Sword of the Hunt"
   {
      return;
   }

   CleanUp()
   {
		if poOwner <> $
		{
			debug("Cleaning up daggers.  Found one contained by",Send(poOwner,@GetName));
		}
		
		Send(self,@Delete);
		
		return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
