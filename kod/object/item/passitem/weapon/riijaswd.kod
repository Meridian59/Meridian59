% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
RiijaSword is Weapon

constants:

   include blakston.khd

resources:

   RiijaSword_name_rsc = "sword of Riija"
   RiijaSword_icon_rsc = quswrd.bgf
   RiijaSword_desc_rsc = \
      "This is a very awkward looking sword, but it feels surprisingly light "
      "in your hands.  Before your very eyes, dark and weird runes shift "
      "slightly on this deadly weapon."
   RiijaSword_desc_append1 = "  Some of the runes say, \"Let "
   RiijaSword_desc_append2 = " walk with faith.\""

   RiijaSword_window_overlay_rsc = povquswd.bgf
   RiijaSword_player_overlay = quswrdov.bgf

classvars:

   vrName = RiijaSword_name_rsc
   vrIcon = RiijaSword_icon_rsc
   vrDesc = RiijaSword_desc_rsc

   viHits_init_min = 600
   viHits_init_max = 650

   % Riija Swords are high quality thrusting weapons
   viWeaponType = WEAPON_TYPE_THRUST
   viWeaponQuality = WEAPON_QUALITY_HIGH

   viProficiency_needed = SKID_PROFICIENCY_SHORT_SWORD

   viValue_average = 5000
   viWeight = 90
   viBulk = 90

   vrWeapon_window_overlay = RiijaSword_window_overlay_rsc
   vrWeapon_window_attack_start = 1
   vrWeapon_window_attack_end = 4
   vrWeapon_window_hold = 5
   vrWeapon_overlay = RiijaSword_player_overlay

   viGround_group = 1
   viInventory_group = 3
   viBroken_group = 2

properties:

   piAttack_type = ATCK_WEAP_MAGIC+ATCK_WEAP_SLASH
   poQuester = $

messages:

   Constructor(quester=$)
   {
      if quester <> $
      {
         poQuester = quester;
      }

      propagate;	 
   }

   AppendDesc()
   {
      if poQuester <> $
      {
         AppendTempString(RiijaSword_desc_append1) ;
         AppendTempString(send(poQuester,@GetTrueName));
         AppendTempString(RiijaSword_desc_append2);
      }
      
      propagate;
   }
   
   GetQuester()
   {
      return poQuester;
   }
   
   ForgetQuester(quester=$)
   "Sent to all swords when someone suicides."
   {
      if poQuester = quester
      {
         poQuester = $;
      }
      
      return;
   }

   DestroyDisposable()
   {
      return FALSE;
   }

   Delete()
   {
      poQuester = $;
      
      propagate;
   }

   CanBeStoredInVault()
   {
      if poOwner <> $
         AND poQuester <> $
      {
         return (poOwner = poQuester);
      }
      
      return FALSE;
   }

   ModifyHitRoll(hit_roll = 0, target = $)
   "Fairly worthless to hit with except for original quester."
   {
      if poOwner <> $
         AND poQuester <> $
         AND poOwner <> poQuester
      {
         % Return a big number, since normally chance to-hit goes up to 1000.
         return -10000;
      }

      propagate;
   }
     
   WeaponHitTarget()
   "Sword wears down rapidly in the hands of someone else, but does not break."
   {
      if poOwner <> poQuester
         AND piHits > 1
      {
         piHits = piHits - 1;

         return;
      }

      propagate;
   }

   DoShatter()
   "Do something special when we're shattered."
   {
      local cPiece, lPieces, oPiece, cBadPiece;
      
      % When shattered, pick 3 random quest pieces and give them to our owner.
      lPieces = [&SwordShardA,&SwordShardB,&SwordShardC,&SwordShardD];
      cBadPiece = Nth(lPieces,random(1,4));

      for cPiece in lPieces
      {
         if cPiece = cBadPiece
         {
            continue;
         }

         oPiece = create(cPiece,#quester=poQuester);
         send(poOwner,@NewHold,#what=oPiece);
      }

      % We are deleted further up the chain.
      propagate;
   }

   GetBaseSpellModifier(oSpell=$)
   {
      if send(oSpell,@GetSchool) = SS_RIIJA
      {
         % Casting spells while the sword is wielded "heals" the sword.
         piHits = bound(piHits + 1,1,Send(self,@GetMaxHits));
         
         return 10;
      }
      
      return -10;
   }

   % Riija sword cannot parry in the hands of someone other than the owner.
   GetParryAbility(who=$)
   {
      if poOwner <> $
         AND poQuester <> $
         AND poOwner <> poQuester
      {
         return 0;
      }

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
