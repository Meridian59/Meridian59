% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SpiritualHammer is Weapon

constants:

   include blakston.khd

resources:

   spirithammer_name_rsc = "spiritual hammer"
   spirithammer_icon_rsc = hammer.bgf
   spirithammer_desc_rsc = \
      "Inherently having holy blessings, this hammer is even more powerful "
      "than the standard variation."

   spirithammer_expires = "Your spiritual hammer disappears in a puff of smoke!"

   spirithammer_window_overlay_rsc = povhamr.bgf
   spirithammer_player_overlay = hamrov.bgf

classvars:
   vrName = spirithammer_name_rsc
   vrIcon = spirithammer_icon_rsc
   vrDesc = spirithammer_desc_rsc

   % Spiritual Hammers are high quality bludgeoning weapons
   viWeaponType = WEAPON_TYPE_BLUDGEON
   viWeaponQuality = WEAPON_QUALITY_HIGH

   viProficiency_Needed = SKID_PROFICIENCY_HAMMER

   viValue_average = 0
   % Light because it's magical.
   viWeight = 15
   viBulk = 60

   viHits_init_min = 350
   viHits_init_max = 400

   vrWeapon_window_overlay = spirithammer_window_overlay_rsc
   vrWeapon_overlay = spirithammer_player_overlay

   viGround_group = 1
   viInventory_group = 3
   viBroken_group = 2

properties:

   piAttack_type = ATCK_WEAP_MAGIC+ATCK_WEAP_BLUDGEON
   ptLongevity
   piItem_flags = 10

   piHitBonus = 0

messages:

   Constructor(ilongevity=$, iToHitBonus=$)
   {
      if ilongevity = $
      {
         % Default is 1 hour.
         ilongevity = 3600000;
      }

      if iToHitBonus <> $
      {
         piHitBonus = iToHitBonus;
      }

      ptLongevity = CreateTimer(self,@WeaponExpires,ilongevity);
 
      send(self,@SetSpellFlag,#flag=ATCK_SPELL_HOLY,#value=TRUE);

      propagate;
   }

   WeaponExpires()
   {
      ptLongevity = $;
      
      if isclass(poOwner,&Player)
      {
         send(poOwner,@MsgSendUser,#message_rsc=spirithammer_expires);
      }
      
      send(self,@Delete);
      
      return;
   }

   Delete()
   {
      if ptLongevity <> $
      {
         DeleteTimer(ptLongevity);
         ptLongevity = $;
      }
      
      propagate;
   }

   WeaponHitTarget()
   {
      % Return here so that spiritual hammers don't get damaged.
      return;
   }

   ModifyHitRoll(hit_roll = 0, target = $)
   {
      local iBaseHit, oWeapAtt, i;

      iBaseHit = hit_roll;

      iBaseHit = iBaseHit + piHitBonus;

      for i in plItem_Attributes
      {
         oWeapAtt = send(SYS,@FindItemAttByNum, #num=send(self,@GetNumFromCompound,#compound=first(i)));
         if isClass(oWeapAtt,&WeaponAttribute)
         {
            iBaseHit = send(oWeapAtt,@ModifyHitRoll,#hitroll=hit_roll,#wielder=poOwner,
	                         #target=target,#lData=i);
         }
      }     

      return iBaseHit;
   }

   CanEnchant()
   {
      return FALSE;
   }
   
   CanBeGivenToNPC()
   {
      return FALSE;
   }

   CanShatter()
   {
      return FALSE;
   }

   CanSwap()
   {
      return FALSE;
   }

   CanWeaken()
   {
      return FALSE;
   }

   GetBaseSpellModifier()
   {
      % It's mystically created and temporary.  No penalties.
      return 0;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
