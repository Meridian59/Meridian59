% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Firepit is Flickerer

constants:

   include blakston.khd

   HS_FIREPIT = 1

resources:

   firepit_name_rsc = "fire"
   firepit_icon_rsc = firepit.bgf
   firepit_desc_rsc = "This small fire offers both light and warmth to the surrounding area."

   firepit_flame_rsc = brazflam.bgf
   firepit_sound_rsc = fireplac.wav

classvars:

   vrName = firepit_name_rsc
   vrIcon = firepit_icon_rsc
   vrDesc = firepit_desc_rsc

   % Lighting flags.  Default "on" and wavering flags
   viLightFlags = LIGHT_FLAG_ON | LIGHT_FLAG_WAVERING

   % Light color.
   viLightColor = LIGHT_FIRE

properties:

   % The base doesn't animate, just the overlay.
   piAnim_speed = 0
   piFlame_animation = 1

   % What's the effective sound radius for this fire?
   piSoundRadius = 10

   % Intensity, from 0-255.
   piLightIntensity = 50

messages:

   Constructor(iSoundRadius = 10)
   {
      piSoundRadius = iSoundRadius;

      propagate;
   }

   Constructed()
   {
      piFlame_animation = Random(1,4);

      propagate;
   }

   Delete()
   {
      if poOwner <> $ AND IsClass(poOwner,&Room)
      {
         % Remove ourselves as part of the sound list.
         send(poOwner,@RemoveObjectLoopingSound,#what=self);
      }

      propagate;
   }

   SetAnimationSpeed()
   {
      % The base doesn't animate, just the overlay.
      piAnim_speed = 0;

      return;   
   }

   ReqNewOwner(what = $)
   {
      return FALSE;
   }

   NewOwner(what = $)
   {
      local lPosition, lSoundData;

      % Check the old (current) owner.  It shouldn't happen, but let's be sane about it.
      if poOwner <> $ AND IsClass(poOwner,&Room)
      {
         % Remove ourselves as part of the sound list.
         send(poOwner,@RemoveObjectLoopingSound,#what=self);
      }

      if piSoundRadius AND what <> $ AND IsClass(what,&Room)
      {
         % Sound data is [wave_file, row, col, cutoff radius, maximum volume, object]
         lPosition = send(what,@GetRoomPos,#what=self);
         lSoundData = [firepit_sound_rsc, First(lPosition), Nth(lPosition,2), piSoundRadius, 100, self];
         send(what,@AddLoopingSound,#lSoundData=lSoundData);
      }

      propagate;
   }

   SendAnimation()
   {
      % Don't aminate, only the overlay animates.
      AddPacket(1,ANIMATE_NONE, 2,1);

      % Return, because superclass expects the base icon to animate.
      return;
   }

   SendOverlays()
   {
      % Send overlay bitmap info to user.  

      % We have one overlay, the flame
      AddPacket(1,1);
         
      % Always animate the flame in a cycle...
      AddPacket(4,firepit_flame_rsc,1,HS_FIREPIT,1,ANIMATE_CYCLE);
      
      % ...but have different cycle groups.
      
      if piFlame_animation = 1
      {
         AddPacket(4,100, 2,1, 2,5); 

         return;
      }
         
      if piFlame_animation = 2
      {
         AddPacket(4,120, 2,1, 2,8);

         return;
      }
         
      if piFlame_animation = 3
      {
         AddPacket(4,140, 2,5, 2,7);

         return;
      }
         
      % if piFlame_animation = 4
      AddPacket(4,90, 2,3, 2,6);

      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
