% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ItemAttMade is ItemAttribute

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  This item was made by a player.  It is considered worthless by shopkeepers and
%  will disapear when the ittematt timer fires.
%
%  Form is: 
%
%   	[IA_MADE, tTimer ]
%
%  tTimer :: timer counting down until the item disapears.
%  iNumber :: number of items we're keeping track of, -1 for items that aren't NumberItems
%	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

constants:

   include blakston.khd   
   include protocol.khd

resources:
 
   itematt_made_desc = "  It shimmers insubstantially."
   iaMade_gone = "Your %s disappears in a puff of smoke."
   
classvars:

   viItem_Att_Num = IA_MADE
   vrDesc = itematt_made_desc

   viDifficulty = 5

properties:
  
messages:

   InitiallyIdentified()
   {
      return TRUE;
   }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Timer Functions
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


   HasTimer(lData=$)
   {
      return TRUE;
   }

   TimerExpired(oItem=$,lData=$)
   {
      local oOwner;
      
      SetNth(lData,2,$);   %% timer is gone, now remove reference

      oOwner = send(oItem,@GetOwner);

      if oOwner <> $ AND isClass(oOwner,&Player) AND (send(oOwner,@IsLoggedOn))
      {
         send(oOwner,@MsgSendUser,#message_rsc=iaMade_gone,#parm1=send(oItem,@GetName));
      }

      send(self,@RemoveFromItem,#oItem=oItem,#lData=lData);

      return;
   }

   SetPrimaryState(state1=$)
   "Defined for each individual enchantment."
   {
      % This returns how many items we are keeping track of if we're a number item.
      %   If we're not a number item, we just return -1.
      return $;
   }


   RemoveFromItem(oItem=$, lData=$)
   {
      % Future (for dealing with number items)
      % If state is -1, then post(oItem,@Delete);
      % if state is > 0, then delete the proper number.

      post(oItem,@Delete);

      propagate;
   }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Effect Functions
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   ItemUsed(oItem=$,oPlayer=$)
   {
      % Future (for dealing with number items)
      % If state > 0, lower state value one.
      % if state is 0, then remove the attribute (play the message)

      return;
   }

   AdjustPrice(value = -1,iCompound=0)
   {
      return -1;        
   }

   ItemReqLeaveOwner(oItem=$)
   {
      return TRUE;
   }	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%	Treasure Functions
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   AddToTreasureTable()
   {
      return;
   }

   CanBeSpoofed()
   {
      return FALSE;
   }
	     
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
