% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
WeaponAttribute is ItemAttribute 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Weapon Attributes, added 5 March 97 by Damion Schubert
%
%  The difference between a weapon attribute and an item attribute is simply
%     that these are affects that only affect weapons, and attempting to bind
%     them to a non-weapon will fail.  Examples include:
%       * Changing the attack type
%       * Poisoned weapons
%       * Splintering Weapons
%  Note also that many Weapon Attributes affect hit percentages and damage
%     amounts.  This, in fact, is a common usage of Weapon Attributes.  However,
%     this is more rare for item attributes.  If an item modifies damage or
%     hit percentage, that item needs to be added to the player's AttMod list.
%     Weapons do not.
%
%  See item.kod for notes on implementation and structure used for ItemAtts
%     on a per item basis.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

constants:

   include blakston.khd   

resources:

   weapatt_slight = "a slight"
   weapatt_small = "a small"
   weapatt_swift = "a swift"
   weapatt_moderate = "a moderate"
   weapatt_damaging = "a damaging"
   weapatt_solid = "a solid"
   weapatt_potent = "a potent"
   weapatt_severe = "a severe"
   weapatt_enormous = "an enormous"
   weapatt_crushing = "a crushing"
      
classvars:

   vrDesc2 = $
   viDamage_bonus = 0

properties:
  
messages:
     
   SetItemsToAttribute()
   {
      % This is used by the weapon attribute when trestype decides
      %  to apply this weapatt to a weapon.  The number given is a 
      %  very approximate percentage of the chance that that particular
      %  weapon will be the one created.  This will be modified by 
      %  other factors, so that higher level characters are more likely
      %  to get better stuff.

      plItems_to_attribute = [ [ &Mace, 25 ],
                               [ &ShortSword, 25 ],
                               [ &Hammer, 15 ],
                               [ &Axe, 15 ],
                               [ &Longsword, 13 ],
                               [ &Scimitar, 4 ],
                               [ &MysticSword, 3 ]
                             ];
      return;
   }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%  Weapon Power
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   InitialWeaponPower(oItem = $)
   {
      local iRoll_number, iRand, iNumber, iSum, jIndex, iCount;

      if oItem = $ or not isClass(oItem,&weapon)
      { DEBUG("Called InitialWeaponPower with bad oItem!"); }

      % This determines how good certain weapon attributes are.
      % For example, both guildhall and factions swords can have
      % weapons of different strengths.  The standard weapons power
      % table is as follows:
      %
      %  Power    +to-hit    +damage    description   rarity (from 100)
      %    0        50          0        slight         19%
      %    1         0          1        small          17%
      %    2       100          0        swift          15%
      %    3        50          1        moderate       13%
      %    4         0          2        damaging       11%          
      %    5       100          1        good            9%
      %    6        50          2        potent          7%
      %    7       150          0        severe          5%
      %    8       100          2        enormous        3%
      %    9         0          3        crushing        1%

      % roll numbers:  each weapon gets iRoll_number rolls, and takes 
      % the highest one.  Result: better maces and short swords floating
      % around.

      iRoll_number = 1;
      
      if isClass(oItem,&Axe) OR isClass(oItem,&Hammer)
      {
         iRoll_number = 2;
      }

      if isClass(oItem,&Mace) OR isClass(oItem,&Shortsword)
      {
         iRoll_number = 3;
      }

      iNumber = 0;
      while (iRoll_number > 0)
      {
         iRand = random(1,100);
         if iRand > iNumber { iNumber = iRand; }
         iRoll_number = iRoll_number - 1;
      }
      
      % this should give us the highest value of 1,2, or 3 rolls.
      % now find the power given by this value.

      % jIndex goes down by 2 each turn,
      jIndex = 19;

      % iSum is sum of all jIndices.
      iSum = jIndex;

      % Count is the final bonus for the weapon, 0-9
      iCount = 0;  
      
      while (iCount < 10)
      {         
         if iNumber < iSum  { return iCount; }
         iCount = iCount + 1;
         jIndex = jIndex - 2;
         iSum = iSum + jIndex;
      }
      
      debug("Shouldn't have gotten here!");
      return 0;             %% if we somehow get here, return a wimp value.
   }

   DecipherDamageFromPower(iPower=-1)
   {      
      if iPower = -1 { Debug("Invalid Data, must pass a power to this"); return; }

      if iPower = 0  { return 0; }      
      if iPower = 1  { return 1; }      
      if iPower = 2  { return 0; }      
      if iPower = 3  { return 1; }      
      if iPower = 4  { return 2; }      
      if iPower = 5  { return 1; }      
      if iPower = 6  { return 2; }      
      if iPower = 7  { return 0; }      
      if iPower = 8  { return 2; }      
      if iPower = 9  { return 3; }      

      debug("invalid power data!");
      return 0;
   }

   DecipherHitRollFromPower(iPower=-1)
   {      
      if iPower = -1 { Debug("Invalid Data, must pass a power to this"); return; }

      if iPower = 0  { return 50; }      
      if iPower = 1  { return 0; }      
      if iPower = 2  { return 100; }      
      if iPower = 3  { return 50; }      
      if iPower = 4  { return 0; }      
      if iPower = 5  { return 100; }      
      if iPower = 6  { return 50; }      
      if iPower = 7  { return 150; }      
      if iPower = 8  { return 100; }      
      if iPower = 9  { return 0; }      

      debug("invalid power data!");
      return 0;
   }

   GetPowerDesc(iPower = $)
   {
      if iPower = 0 { return weapatt_slight; }
      if iPower = 1 { return weapatt_small; }
      if iPower = 2 { return weapatt_swift; }
      if iPower = 3 { return weapatt_moderate; }
      if iPower = 4 { return weapatt_damaging; }
      if iPower = 5 { return weapatt_solid; }
      if iPower = 6 { return weapatt_potent; }
      if iPower = 7 { return weapatt_severe; }
      if iPower = 8 { return weapatt_enormous; }
      if iPower = 9 { return weapatt_crushing; }

      debug("invalid power data!");
      return;
   }

   %%% Effect Functions
   
   ModifyDamage(damage = 0, target = $, wielder = $)
   "Item Attributes, in general, should only + or - damage."
   {
      return damage;
   }

   ModifyHitRoll(hitroll = 0, target = $, wielder = $)
   "Item Attributes, in general, should only + or - damage."
   {
      return hitroll;
   }
   
   
   %%% Infrastructure (Adding and removing a ItemAtt from an item.)

   AppendDesc(oItem =$,lData=$, iFakeData = 0, iFakePower=0)
   {
      local iPower;
      if vrDesc2 <> $
      {
         AppendTempString(vrDesc);
      
         if lData = $
         {
            iPower = iFakePower;
         }
         else
         {
            iPower=send(self,@TranslatePowerFromCompound,#iCompound=first(lData));
         }

         AppendTempString(send(self,@GetPowerDesc,#iPower = iPower));
         AppendTempString(vrDesc2);
         
         return;
      }
      
      propagate;
   }

   ReqAddToItem(oItem = $)
   {
      if isClass(oItem,&Weapon)
      {
         return TRUE;
      }

      return FALSE;
   }
   
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
