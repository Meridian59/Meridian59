% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
WeapAttSpellType is WeaponAttribute

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  This weapon attribute merely flags a weapon as having the spell
%       attack type that corresponds with it.  It also has a timer,
%       which, when it expires, flips the Attack type back.
% 
%  Form is: 
%
%      [WA_ATTACKSPELLTYPE, timer, spell_attack_type ]
%   
%       timer::the length of time, from 1 to 25 realtime hours,
%         that the enchantment lasts (depending on spell factors).
%       spell_attack_type : as defined in blakston.khd.
%          examples: ATCK_SPELL_FIRE, ATCK_SPELL_UNHOLY, ATCK_SPELL_ACID
%
%  Note that if a weapon ends up permanently holy or unholy, then this
%       attribute is no longer necessary, since the attack values flags
%       in weapon stores this information.  This information is only
%       stored here so that eventually, it may be forgotten.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

constants:

   include blakston.khd

resources:
   
   iaSpelltype_gone = "Your %s suddenly seems a little more... ordinary."

   iaSpelltype_holy = "The weapon glows with a pure, white light."
   iaSpelltype_unholy = "The weapon seems to reek of malevolence."
   iaSpelltype_fire = "The weapon is hot to the touch."
   iaSpelltype_cold = "It is icy cold to the touch."
   iaSpelltype_shock = "Nearly invisible currents run the length of the blade."
   iaSpelltype_acid = "A thin coating of acid covers the length of the blade."

   iaSpelltype_name_holy = "holy %s"
   iaSpelltype_name_unholy = "unholy %s"
   iaSpelltype_name_fire = "fiery %s"
   iaSpelltype_name_cold = "icy %s"
   iaSpelltype_name_shock = "%s of shock"
   iaSpelltype_name_acid = "acid %s"

   iaspelltype_fire_DM = "fire"
   iaspelltype_cold_DM = "cold"
   iaspelltype_shock_DM = "shock"
   iaspelltype_holy_DM = "holy"
   iaspelltype_unholy_DM = "unholy"
   iaspelltype_acid_DM = "acid"

classvars:

   viItem_Att_Num = WA_ATTACKSPELLTYPE

properties:
  
messages:

   %%% Description functions

   AppendDesc(oItem=$,iFakeData=$)
   {
      local rName, iData, lData, sMakerInfo;

      if iFakeData = $
      {
         iData = send(oItem,@GetAttackSpell);
      }
      else
      {
         iData = iFakeData;
      }
      
      rName = $;

      if iData & ATCK_SPELL_HOLY
      {
         rName = iaSpelltype_holy;
      }
      
      if iData & ATCK_SPELL_UNHOLY
      {
         rName = iaSpellType_unholy;
      }
      
      if iData & ATCK_SPELL_FIRE
      {
         rName = iaSpellType_fire;
      }
      
      if iData & ATCK_SPELL_COLD
      {
         rName = iaSpellType_cold;
      }
      
      if iData & ATCK_SPELL_SHOCK
      {
         rName = iaSpellType_shock;
      }
      
      if iData & ATCK_SPELL_ACID
      {
         rName = iaSpellType_acid;
      }
         
      AppendTempString(rName);

      % If not faked, then add maker information if available.
      if iFakeData = $
      {
         lData = send(oItem,@GetAttributeData,#ItemAtt=viItem_Att_num);

         if length(lData) <> 5
         {
            return;
         }

         sMakerInfo = nth(lData,5);

         %%Then we add information about the maker to the desc.
         if sMakerInfo <> $
         {
            AppendTempString(sMakerInfo);
         }
      }
      
      return;
   }

   %%% Effect Functions
   
   DMCreateItemAtt(who=$,string=$,oWeapon=$)
   {
      local iSpellType;
      iSpellType = 0;

      if who = $ OR string= $ OR oWeapon = $
      {
         DEBUG("BAD data sent to DMCreateItemAtt!");

         return FALSE;
      }
     
      if stringContain(string,iaspelltype_fire_DM)
      {
         iSpelltype = ATCK_SPELL_FIRE;
      }

      if stringContain(string,iaspelltype_cold_DM)      
      {
         iSpelltype = ATCK_SPELL_COLD;
      }

      if stringContain(string,iaspelltype_holy_DM)      
      {
         iSpelltype = ATCK_SPELL_HOLY;
      }
      
      if stringContain(string,iaspelltype_unholy_DM)      
      {
         iSpelltype = ATCK_SPELL_UNHOLY;
      }

      if stringContain(string,iaspelltype_acid_DM)      
      {
         iSpelltype = ATCK_SPELL_ACID;
      }

      if stringContain(string,iaspelltype_shock_DM)      
      {
         iSpelltype = ATCK_SPELL_SHOCK;
      }

      if iSpellType = 0
      {
         return FALSE;
      }
      
      if send(self,@ReqAddToItem,#state1=iSpellType,#oItem=oWeapon)
      {
         send(self,@AddToItem,#oItem=oWeapon, #state1=iSpellType,
              #random_gen=TRUE);
              
         return TRUE;
      }
      
      return FALSE;
   }
   
   AddSelfToRandomItem(oItem = $, who=$)
   {
      local iSpellType, iRand;

      if oItem = $ OR who = $
      {
         return FALSE;
      }

      iSpellType = 0;

      % 40% chance the weapon will choose to be karma allied with whoever found it.
      if random(1,100) > 40
      {
         % If player is good, give 'em a holy blade.  If not, unholy will be fine.
         if send(who,@GetKarma) > 0
         {
            iSpellType = ATCK_SPELL_HOLY;
         }

         if send(who,@GetKarma) < 0
         {
            iSpellType = ATCK_SPELL_UNHOLY;
         }
      }

      if iSpellType = 0
      {
         iRand = random(1,6);
      
         if iRand = 1
         {
            iSpellType = ATCK_SPELL_FIRE;
         }
         
         if iRand = 2
         {
            iSpellType = ATCK_SPELL_SHOCK;
         }
         
         if iRand = 3
         {
            iSpellType = ATCK_SPELL_COLD;
         }
         
         if iRand = 4
         {
            iSpellType = ATCK_SPELL_HOLY;
         }
         
         if iRand = 5
         {
            iSpellType = ATCK_SPELL_UNHOLY;
         }
         
         if iRand = 6
         {
            iSpellType = ATCK_SPELL_ACID;
         }
      }

      if send(self,@ReqAddToItem,#state1=iSpellType,#oItem=oItem)
      {
         send(self,@AddToItem,#oItem=oItem,#state1=iSpellType,
              #timer_duration=random(3600000,86400000),#random_gen=TRUE);
      }
      
      return;
   }

   ReqAddToItem(oItem=$)
   "You currently cannot have two different spelltypes on a weapon at the same time."
   {
      if send(oItem,@GetAttackSpell) > 0
      {
         return FALSE;
      }

      return TRUE;
   }

   SetPrimaryState(state1=$)
   "State1 contains the attack spell type being added to the weapon."
   {
      if state1 = $ { DEBUG("SetPrimaryState called with nil state!"); return FALSE; }
   
      return state1;
   }

   HasTimer(lData=$)
   "This must return true for any attribute that has a timer! "
   "Theoretically, some atts could have or not have a timer, "
   "depending on certain factors, so lData is the ItemAtt structure, "
   "which can be examined for length to see if the timer exists."
   {
      return (Nth(lData,2) <> $);
   }

   TimerExpired(oItem=$,lData=$)
   {
      % Timer is gone, now remove reference.
      SetNth(lData,2,$);   
      send(self,@RemoveFromItem,#oItem=oItem,#lData=lData);

      return;
   }

   AddEffects(oItem = $, lData = $)
   {
      local iSpellType;

      if oItem = $ OR lData = $
      {
         DEBUG("AddEffects failed!");

         return FALSE;
      }

      if send(self,@HasTimer,#lData=lData)
      {
         iSpellType = nth(lData,3);
      }
      else
      {
         iSpellType = nth(lData,2);
      }

      if send(oItem,@CheckSpellFlag,#flag=iSpellType)
      {
         DEBUG("This shouldn't have happened!  Adding effect already here!");

         return FALSE;
      }

      send(oItem,@SetSpellFlag,#flag=iSpellType,#value=TRUE);
      
      return;
   }

   RemoveEffects(oItem = $,lData = $)
   {
      local iSpellType, oPlayer;
      
      if oItem = $ OR lData = $
      {
         DEBUG("RemoveEffects failed!"); return FALSE;
      }

      iSpellType = nth(lData,3);

      if NOT send(oItem,@CheckSpellFlag,#flag=iSpellType)
      {
         DEBUG("This shouldn't have happened!  Removing effect not here!");
         
         return;
      }
      
      oPlayer = send(oItem,@getOwner);
      if oPlayer <> $ AND isClass(oPlayer,&user)
      {
         send(oPlayer,@MsgSendUser,#message_rsc=iaspelltype_gone,
              #parm1=send(oItem,@GetName));
      }
      
      send(oItem,@SetSpellFlag,#flag=iSpellType,#value=FALSE);

      return;
   }

   InitiallyIdentified(random_gen=FALSE)
   {
      if random_gen
      {
         return FALSE;
      }
      
      return TRUE;
   }   

   
   %%% Artifice Spell Functions

   FakeAttData()
   {
      local iRand, iSpellType;

      iRand = random(1,6);

      if iRand = 1
      {
         iSpellType = ATCK_SPELL_FIRE;
      }
      
      if iRand = 2
      {
         iSpellType = ATCK_SPELL_SHOCK;
      }
      
      if iRand = 3
      {
         iSpellType = ATCK_SPELL_COLD;
      }
      
      if iRand = 4
      {
         iSpellType = ATCK_SPELL_HOLY;
      }
      
      if iRand = 5
      {
         iSpellType = ATCK_SPELL_UNHOLY;
      }
      
      if iRand = 6
      {
         iSpellType = ATCK_SPELL_ACID;
      }
      
      return iSpellType;
   }

   %%% Name Functions

   ItemBuildDescName(oItem=$,iFakeData=$)
   {  
      local lData, iData, rName;

      if iFakeData = $
      { 
         lData = send(oItem,@GetAttributeData,#ItemAtt=viItem_Att_num);
      
         if send(self,@HasTimer,#lData=lData)
         {
            iData = nth(lData,3);
         }
         else
         {
            iData = nth(lData,2);
         }
      }
      else
      {
         iData = iFakeData;
      }

      if iData & ATCK_SPELL_HOLY
      {
         rName = iaSpelltype_name_holy;
      }
      
      if iData & ATCK_SPELL_UNHOLY
      {
         rName = iaSpelltype_name_unholy;
      }
      
      if iData & ATCK_SPELL_FIRE
      {
         rName = iaSpelltype_name_fire;
      }
      
      if iData & ATCK_SPELL_COLD
      {
         rName = iaSpelltype_name_cold;
      }
      
      if iData & ATCK_SPELL_SHOCK
      {
         rName = iaSpelltype_name_shock;
      }
      
      if iData & ATCK_SPELL_ACID
      {
         rName = iaSpelltype_name_acid;
      }
      
      AddPacket(4,rName);
      Addpacket(4,send(oItem,@GetName));
      
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
