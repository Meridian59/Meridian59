% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ManaNode is PassiveObject

constants:

   include blakston.khd

   MANANODE_RANGE = 3

   NODE_NORMAL = 1
   NODE_CURSED = 2
   NODE_DEAD = 3

resources:

   ManaNode_name_rsc = "mana node"
   ManaNode_icon_rsc = node.bgf

   ManaNode_desc_rsc = \
      "A gathering of mystic energy, a flux of raw mana pulses here, "
      "providing strength to the spellcaster who can meld with it."
   ManaNode_Dead_desc_rsc = \
      "A gathering of mystic energy, the raw mana that usually pulses here is "
      "strangely absent.  It does not look like you could meld with this node."

   mananode_already_melded = "You have already bonded with this mana node."
   mananode_not_in_range = "The mana node is not close enough to meld with."

   mananode_meld = \
      "Closing your eyes, you put yourself in a trancelike state and reach "
      "out to bind yourself mystically with the node.  Reality expands and "
      "time collapses, until you come to, refreshed and invigorated."

   mananode_failed_meld = \
      "Closing your eyes, you put yourself in a trancelike state and reach "
      "out to bind yourself mystically with the node.  You are disappointed "
      "when nothing seems to happen."

   mananode_meld_sound = nodeup.wav

   node_somewhere = "somewhere unknown"

classvars:

   vrIcon = ManaNode_icon_rsc

   viObject_flags = ACTIVATE_YES | DRAWFX_TRANSLUCENT_50 | FLICKERING_YES

properties:

   vrName = ManaNode_name_rsc
   vrDesc = ManaNode_desc_rsc

   piNode_Num = 0
   piState = NODE_NORMAL

   prDesc_add_on = $

   % This is the room number where the node is normally located.
   piRoomNum = $

messages:

   Constructor(node_num=0, name_rsc=$, desc_rsc=$, iRoomNum=$)
   {
      if name_rsc <> $
      {
         vrName = name_rsc;
      }

      prDesc_add_on = desc_rsc;
      piNode_num = node_num;
      Send(SYS,@AddNode,#node=self,#num=piNode_num);

      if iRoomNum <> $
      {
         piRoomNum = iRoomNum;
      }

      propagate;
   }

   ShowDesc()
   {
      if prDesc_add_on <> $
      {
         AddPacket(4,prDesc_add_on);
      }

      AddPacket(4,vrDesc);

      return;
   }

   NodeAppear(where=$, row=0, col=0, fine_row=32, fine_col=32)
   {
      if NOT IsClass(where,&Room)
      {
         DEBUG("Node::NodeAppear Not a room!");

         return;
      }

      if piRoomNum = $
      {
         piRoomNum = Send(where,@GetRoomNum);
      }

      if poOwner <> $
      {
         DEBUG("Node::NodeAppear Already has an owner!");

         return;
      }

      if row = 0 OR col = 0
      {
         DEBUG("Node::NodeAppear Bad coordinates!");

         return;
      }

      Send(where,@NewHold,#what=self,#new_row=row,#new_col=col,
           #fine_row=fine_row,#fine_col=fine_col);

      return;
   }

   NodeDisappear()
   "This is used by the three special nodes (Zjiria's Heart, Underworld, "
   "and FeyNode) so that they don't actually leave the system list when "
   "they disappear.  This way, a player's max mana can always be figured "
   "on the fly."
   {
      if poOwner = $
      {
         DEBUG("NodeDisappear called with null owner!");

         return;
      }

      Send(poOwner,@LeaveHold,#what=self);
      poOwner = $;

      return;
   }

   TryActivate(who=$)
   "Return False only if you want user.kod to Send its own error message to "
   "user."
   {
      if poOwner = $
      {
         DEBUG("TryActivate called with nil owner!");

         return TRUE;
      }

      if piState = NODE_DEAD
      {
         Send(who,@MsgSendUser,#message_rsc=ManaNode_failed_meld);

         return FALSE;
      }

      if isClass(who,&User) AND poOwner = Send(who,@GetOwner)
      {
         if abs(Send(who,@GetRow)-Send(self,@GetRow)) < MANANODE_RANGE
            AND abs(Send(who,@GetCol)-Send(self,@GetCol)) < MANANODE_RANGE
         {
            if piNode_num = 0
            {
               debug("this mana node was not assigned an ID!  Invalid!");

               return FALSE;
            }

            if Send(who,@GetNodeList) & piNode_num
            {
               Send(who,@MsgSendUser,#message_rsc=mananode_already_melded);

               return TRUE;
            }

            Send(self,@Meld,#who=who);
         }
         else
         {
            Send(who,@MsgSendUser,#message_rsc=mananode_not_in_range);
         }
      }

      return TRUE;
   }

   Meld(who=$)
   {
      Send(who,@MsgSendUser,#message_rsc=mananode_meld);
      Send(who,@WaveSendUser,#wave_rsc=mananode_meld_sound);
      Send(who,@NewMaxMana,#amount=Send(self,@GetManaAdjust,#who=who),
           #node_num=piNode_num);

      return;
   }

   UnMeld(who=$)
   {
      Send(who,@NewMaxMana,#amount=(-1*Send(self,@GetManaAdjust,#who=who)),
           #node_num=piNode_num);

      return;
   }

   GetNodeNum()
   {
      return piNode_num;
   }

   GetManaAdjust(who=$)
   {
      if piState = NODE_DEAD
      {
         return 0;
      }

      return (((5 + Send(who,@GetMysticism)) / 10) + 3);
   }

   ReqNewOwner(what = $)
   {
      return FALSE;
   }

   SendAnimation()
   {
      if piState = NODE_NORMAL
      {
         AddPacket(1,ANIMATE_CYCLE, 4,150, 2,1, 2,5);

         return;
      }

      if piState = NODE_CURSED
      {
         AddPacket(1,ANIMATE_CYCLE, 4,250, 2,6, 2,7);

         return;
      }

      if piState = NODE_DEAD
      {
         AddPacket(1,ANIMATE_NONE, 2,8);

         return;
      }

      Debug("Mana node",self,"has invalid state",piState);

      propagate;
   }

   Activate()
   {
      piState = NODE_NORMAL;

      vrDesc = ManaNode_desc_rsc;

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   Deactivate()
   {
      piState = NODE_DEAD;

      vrDesc = ManaNode_Dead_desc_rsc;

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   NewOwner(what = $)
   {
      if what <> $
         AND IsClass(what,&Room)
      {
         piRoomNum = Send(what,@GetRoomNum);
      }

      propagate;
   }

   GetLocationName()
   {
      local oRoom;

      if poOwner <> $
      {
         return Send(poOwner,@GetName);
      }

      if piRoomNum <> $
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=piRoomNum);
         if oRoom <> $
         {
            return Send(oRoom,@GetName);
         }
      }

      % Return a generic response.
      return node_somewhere;
   }

   DoNodeAttack()
   {
      return Send(Send(SYS,@GetNodeAttack),@DoNodeAttack,#iNode=piNode_Num,
                  #bOverride=TRUE);
   }

   SendLightingInformation()
   {
      local iFlags, iIntensity, iColor;

      if piState <> NODE_DEAD
      {
         iIntensity = 100;
         if piState = NODE_NORMAL
         {
            iColor = LIGHT_BLUE;
         }
         else
         {
            % piState = NODE_CURSED
            % Use the sickly spectral green color.
            iColor = LIGHT_SPECTRAL;
         }
      }
      else
      {
         % Less light for dead nodes.
         iIntensity = 75;
         iColor = LIGHT_WHITE;
      }

      AddPacket(2,LIGHT_FLAG_ON);
      AddPacket(1,iIntensity);
      AddPacket(2,iColor);

      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

