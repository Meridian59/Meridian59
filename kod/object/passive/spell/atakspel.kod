% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
AttackSpell is Spell

% Generic attacking spell, such as blast or bolt spells.

constants:

   include blakston.khd

resources:

   attack_spell_hit_rsc = "You hit %s%s."
   attack_spell_no_self_rsc = "You can't cast %s on yourself."
   attack_spell_out_of_range = "%s%s is too far away to hit with %s."

classvars:

   viAttack_type = 0
   viAttack_spell = ATCK_SPELL_ALL

   % In seconds, since it works off GetTime(),
   viPostCast_time = 2

   viHarmful = TRUE
   viOutlaw = TRUE
   viChance_To_Increase = 10

   vbIsRangedAttack = FALSE

properties:

   piDamageMin = 0
   piDamageMax = 0
   piRange = $

   % Maximum amount of bonus damage mana focus gives us for casting this spell.
   piManaFocusBonus = 5

   pbAbsolute = FALSE

messages:

   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
      local target, i, iTotalRange;

      % Can cast spell if the 1 target item is a battler
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      target = First(lTargets);

      % Don't allow casting on self.  This also avoids a potential problem:
      %  if this spell were to kill the caster, he would die before the
      %  reagents were used.  This would take some rewriting of AttackSpell
      %  and Spell.  But, if cast from an item, smoke yourself all you want!
      if target = who AND (NOT bItemCast)
      {
         Send(who,@WaveSendUser,#wave_rsc=spell_fail_wav);
         Send(who,@MsgSendUser,#message_rsc=attack_spell_no_self_rsc,#parm1=vrName);
         
         return FALSE;
      }

      if not IsClass(target,&Battler)
      {
         Send(who,@WaveSendUser,#wave_rsc=spell_fail_wav);
         Send(who,@MsgSendUser,#message_rsc=spell_bad_target, 
              #parm1=vrName,#parm2=Send(target,@GetDef),#parm3=Send(target,@GetName));
              
         return FALSE;
      }

      if piRange <> $
      {
         iTotalRange = piRange;

         % A little fudge factor to account for lag drift, etc.
         if IsClass(target,&Player) AND Send(target,@HasMovedRecently)
         {
            iTotalRange = iTotalRange + RANGE_MOVEMENT_BONUS;
         }

         if Send(who,@SquaredDistanceTo,#what=target) > (iTotalRange * iTotalRange)
         {
            if NOT bItemCast
            {
               Send(who,@MsgSendUser,#message_rsc=attack_spell_out_of_range, 
                    #parm1=Send(target,@GetCapDef),#parm2=Send(target,@GetName),
                    #parm3=vrName);
            }

            return FALSE;
         }
      }

      propagate;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CastSpell(who = $, lTargets = $, iSpellPower = 0, bItemCast = FALSE)
   {
      local i, iDamage, iManaFocus, oRoom, oTarget, iModifiedSpellType, iModifiedDamage, iModifiedAbsolute;

      oTarget = First(lTargets);

      oRoom = Send(who,@GetOwner);
      Send(oRoom,@SomethingWaveRoom,#what=who,#wave_rsc=Send(self,@GetSpellSound));
      Send(oRoom,@SpellCast,#who=who,#oSpell=self,#lItems=lTargets);

      iDamage = Random(piDamageMin, piDamageMax);

      if IsClass(who,&Player)
      {
         Send(who,@SetKillTarget,#target=oTarget);
         Send(who,@SetPlayerFlag,#flag=PFLAG_DID_DAMAGE,#value=TRUE);

         if NOT bItemCast
         {
            % Do the sound, and the third person animation.
            piCast_successes = piCast_successes + 1 ;
            Send(who,@DoCast);      %% window overlay

            % Reduce damage based on spell power.
            iDamage = (iDamage * (50 + (iSpellPower / 2))) / SPELLPOWER_MAXIMUM;

            if Send(who,@CheckPlayerFlag,#flag=PFLAG_MANA_FOCUS)
            {
               % Bonus if we have mana focus up.
               iManaFocus = First(Send(who,@GetEnchantedState,
                                  #what=Send(SYS,@FindSpellByNum,#num=SID_MANA_FOCUS)));

               % This takes the spellpower of Mana Focus (iManaFocus), and uses
               %  that to scale our "bonus" damage.
               % Bonus damage is 1 to piManaFocusBonus, scaled by the power of iManaFocus.
               iDamage = iDamage + ((iManaFocus * piManaFocusBonus) / SPELLPOWER_MAXIMUM) + 1;
            }
         }
      }
      
      % Check for Jala songs that modify attack spell statistics
      iModifiedDamage=iDamage;
      iModifiedSpellType=viAttack_type;
      iModifiedAbsolute=pbAbsolute;
      for i in Send(who,@GetJalaModifiers)
      {
         iModifiedDamage = Send(Nth(i,1),@ModifySpellDamage,#state=i,#iSpellPower=iSpellPower,#damage=iModifiedDamage,#originalValue=iDamage);
         iModifiedSpellType = Send(Nth(i,1),@ModifySpellType,#state=i,#iSpellPower=iSpellPower,#spell_type=iModifiedSpellType,#originalValue=viAttack_type);
         iModifiedAbsolute = Send(Nth(i,1),@ModifySpellAbsolute,#state=i,#iSpellPower=iSpellPower,#absolute=iModifiedAbsolute,#originalValue=pbAbsolute);
      }
      
      % After figuring damage, do an AssessDamage.  This will handle the necessary
      %  attack messages.
      iDamage = Send(oTarget,@AssessDamage,#what=who,#damage=iModifiedDamage,
                     #atype=iModifiedSpellType,#aspell=Send(self,@GetAttackSpell),
                     #absolute=pbAbsolute);

      Send(who,@AssessHit,#what=oTarget,#damage=iDamage,#use_weapon=self);

      if iDamage = $
      {
         Send(who,@KilledSomething,#what=oTarget,#use_weapon=self);
      } 

      Send(oRoom,@SomethingAttacked,#what=who,#victim=oTarget,#use_weapon=self);

      Send(self,@DoSideEffect,#who=who,#victim=oTarget,#damage=iDamage);

      if not bItemCast
      {
         Send(self,@ImproveAbility,#who=who,#target=oTarget);
      }

      % DON'T PROPAGATE!  This way, events will be handled in the proper
      %  order.

      return;
   }

   GetAttackSpell()
   {
      return viAttack_spell;
   }

   GetAttackType()
   {
      return viAttack_type;
   }

   IsRangedAttack()
   {
      return vbIsRangedAttack;
   }

   % The chance to do something in addition to normal damage.
   DoSideEffect(who=$,victim=$,damage=0)
   {
      return;
   }

   % This is for the attack message infrastructure.
   GetAttackName()
   {
      return vrName;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
