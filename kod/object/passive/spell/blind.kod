% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Blind is Spell

constants:

   include blakston.khd

resources:

   blind_name_rsc = "blind"
   blind_icon_rsc = iblind.bgf
   blind_desc_rsc = \
      "The magical force of Qor burns the target's eyes, "
      "taking away all sight for a brief period.  "
      "Requires entroot berries and purple mushrooms to cast."
   
   blind_caster = "%s%s is now blind."
   blind_already_enchanted = "%s%s is already blind."

   blind_on = \
      "Something burns in your eyes, causing excruciating pain and a loss "
      "of vision."
   blind_off = "Your eyes begin to function again."

   blind_sound = qblind.wav

   blind_ring_projectile_rsc = blindproj.bgf

classvars:

   vrName = blind_name_rsc
   vrIcon = blind_icon_rsc
   vrDesc = blind_desc_rsc

   viSpell_num = SID_BLIND
   viSchool = SS_QOR
   viSpell_level = 5
   viMana = 15
   viChance_To_Increase = 15

   viSpellExertion = 6

   viOutlaw = TRUE
   viHarmful = TRUE
   viNoNewbieOffense = TRUE

   vrSucceed_wav = blind_sound
   
   vrProjectile_Icon = blind_ring_projectile_rsc
   viProjectileFlag = PROJ_FLAG_LIGHT_SOURCE
   % Projectile lighting information.
   viProjectileLightFlags = LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC
   % Medium light range, out of 255.
   viProjectileLightIntensity = 100
   viProjectileLightColor = LIGHT_BGREEN

   viProjectileSpeed = 12
   viLayer = 9

properties:


messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&EntrootBerry,2],plReagents);
      plReagents = Cons([&PurpleMushroom,1],plReagents);

      return;
   }

   SetSpellPlayerFlag(who = $)
   {
      if NOT (IsClass(who,&DM) AND Send(who,@PlayerIsImmortal))
      {
         Send(who,@SetPlayerFlag,#flag=PFLAG_NO_FIGHT,#value=TRUE);
         Send(who,@SetPlayerFlag,#flag=PFLAG_NO_MAGIC,#value=TRUE);
      }
      
      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
      local target, i;
      
      % Can cast spell if the 1 target item is a user
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      target = First(lTargets);
      if (NOT IsClass(target,&Battler)) OR IsClass(target,&Revenant)
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_bad_target,#parm1=vrName,
                 #parm2=Send(target,@GetDef),#parm3=Send(target,@GetName));
         }

         return FALSE;
      }

      if target = who
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_no_self_target,#parm1=vrName);
         }
         
         return FALSE;
      }

      % check for enchantment already applied
      if Send(target,@IsEnchanted,#what=self)
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=blind_already_enchanted,
	              #parm1=Send(target,@GetCapDef),#parm2=Send(target,@GetName));
         }
         
         return FALSE;
      }

      propagate;
   }

   CastSpell(who = $, wielder = $, lTargets = $, iSpellPower = 0)
   {
      local oTarget, oOrigin, oRoom;

      oTarget = First(lTargets);

      % We shoot a projectile even if the target resists, so this must be before eagle eyes.
      % The caster will know the target resisted because the target will not glow green.
      if who <> $
      {
         % Weapons can proc this spell. In that case, we use their wielder.
         if wielder <> $
         {
            oOrigin = wielder;
         }
         else
         {
            oOrigin = who;
         }
         oRoom = Send(oOrigin,@GetOwner);
         if oRoom <> $
            AND IsClass(oRoom,&Room)
         {
            Send(oRoom,@SomethingShot,#who=oOrigin,#target=oTarget,#projectile=self,#flags=viProjectileFlag);
         }
      }

      % Spell effects
      Send(self,@DoBlind,#what=who,#oTarget=oTarget,
           #iDurationSecs=Send(self,@GetDuration,#iSpellPower=iSpellPower));
      
      propagate;
   }

   DoBlind(what=$,oTarget=$,iDurationSecs=0)
   {
      local oSpell, iDuration;

      iDuration = iDurationSecs;
      
      oSpell = Send(SYS,@FindSpellByNum,#NUM=SID_EAGLE_EYES);
      if Send(oTarget,@IsEnchanted,#what=oSpell)
      {
         iDuration = Send(oSpell,@DoEagleEyes,#oCaster=what,#oTarget=oTarget,
                          #iDuration=iDuration);
         if iDuration = $
         {
            % Resisted completely.
            return;
         }
      }

      % Bound and convert duration to milliseconds
      iDuration = bound(iDuration,3,20);
      iDuration = iDuration * 1000;

      if IsClass(oTarget,&Player)
      {
         if NOT (IsClass(oTarget,&DM) AND Send(oTarget,@PlayerIsImmortal))
         {
            Send(oTarget,@MsgSendUser,#message_rsc=blind_on);
            Send(oTarget,@EffectSendUser,#what=self,#effect=EFFECT_BLIND_ON);
         }
      }
      else  
      {
         % class is Monster
         Post(oTarget,@ResetBehaviorFlags);
         if Send(oTarget,@GetOwner) <> $
         {
            Post(Send(oTarget,@GetOwner),@SomethingChanged,#what=oTarget);
         }
      }

      Send(what,@MsgSendUser,#message_rsc=blind_caster,
           #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));
      Send(oTarget,@StartEnchantment,#what=self,#time=iDuration);

      return;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      iDuration = (5 + iSpellPower/6);

      return random(iDuration/2,iDuration);
   }
   
   EndEnchantment(who = $, report = TRUE)
   {
      if IsClass(who,&Player)
      {
         Send(who,@EffectSendUser,#what=self,#effect=EFFECT_BLIND_OFF);
         if report
         {
            Send(who,@MsgSendUser,#message_rsc=blind_off);
         }
      } 
      else  
      {
         % Class is monster.
         % This has to be done AFTER the enchantment is gone from the
         %  monster's ench list - post it.
         Post(who,@ResetBehaviorFlags);   
         if Send(who,@GetOwner) <> $
         {
            Post(Send(who,@GetOwner),@SomethingChanged,#what=who);
         }
      }
     
      return;
   }

   SendEffectData()
   {
      return;
   }

   RestartEnchantmentEffect(who=$,state=$)
   {
      Send(who,@MsgSendUser,#message_rsc=blind_on);
      Send(who,@EffectSendUser, #what=self, #effect=EFFECT_BLIND_ON);
      
      return;
   }

   ModifyMonsterBehavior(mob = $)
   {
      Send(mob,@SetBehaviorFlag,#flag=AI_MOVE_RANDOM,#value=TRUE);
      Send(mob,@SetBehaviorFlag,#flag=AI_NOFIGHT,#value=TRUE);
      
      return;      
   }

   % Return the icon used to display a spell shooting through the air.
   GetProjectileIcon()
   {
      return vrProjectile_Icon;
   }

   % Return the speed at which a particular spell should appear to shoot through the air.
   GetProjectileSpeed(who=$, target=$)
   {
      return viProjectileSpeed;
   }

   SendProjectileAnimation()
   {
      AddPacket(1, ANIMATE_CYCLE, 4, 40, 2, 1, 2, 10);   % 40ms between animations
      return;
   }

   GetProjectileLightFlags()
   {
      return viProjectileLightFlags;
   }

   GetProjectileLightIntensity()
   {
      return viProjectileLightIntensity;
   }

   GetProjectileLightColor()
   {
      return viProjectileLightColor;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
