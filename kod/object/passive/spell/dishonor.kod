% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
MarkOfDishonor is Spell

constants:

   include blakston.khd

   DISHONOR_LOWEST_VIGOR_REST_THRESHOLD = 10
   DISHONOR_VIGOR_LOSS = 40

resources:

   MarkOfDishonor_name_rsc = "mark of dishonor"
   MarkOfDishonor_icon_rsc = imarkdis.bgf
   MarkOfDishonor_desc_rsc = \
      "Allows caster to cast Shal'ille's displeasure upon a target.  Will prevent "
      "target's life force from exceeding the body's maximum.  For evil targets, "
      "Shal'ille will cause a loss of vigor.  "
      "Requires emeralds to cast."

   MarkOfDishonor_sound = smarkdis.wav

   MarkOfDishonor_start = \
      "Shal'ille singles you out for punishment.  Your life energies ebb."
   MarkOfDishonor_stop  = \
      "Shal'ille's attention turns to more pressing matters."
   MarkOfDishonor_success = "The eyes of Shal'ille turn towards %s%s."
   MarkOfDishonor_already_enchanted = "%s%s is already marked."
   MarkOfDishonor_no_self = \
      "You cannot cast mark of dishonor upon yourself; if you were truly "
      "dishonorable you would not be able to cast Shal'ille's spells."
   MarkOfDishonor_no_target = "You may only cast %s upon the dishonorable."

classvars:
   vrName = MarkOfDishonor_name_rsc
   vrIcon = MarkOfDishonor_icon_rsc
   vrDesc = MarkOfDishonor_desc_rsc

   viSchool = SS_SHALILLE
   viSpell_num = SID_MARK_OF_DISHONOR
   viSpell_level = 4
   viMana = 12

   viOutlaw = TRUE
   viHarmful = TRUE
   viNoNewbieOffense = TRUE
   viChance_To_Increase = 30
   
   viFlash = FLASH_BAD

   vrSucceed_wav = MarkOfDishonor_sound
   vbCastable_in_HappyLand = FALSE

properties:
   
messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Emerald,1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
      local target;
      
      % Can cast spell if the 1 target item is a user
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      target = First(lTargets);

      if target = who
      {
         % No casting on self.
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=MarkOfDishonor_no_self);
         }

         return FALSE;
      }

      if NOT IsClass(target,&Player)
         AND NOT IsClass(target,&Monster)
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_bad_target, 
                 #parm1=vrName,#parm2=Send(target,@GetDef),
                 #parm3=Send(target,@GetName));
         }

         return FALSE;
      }

      % check for enchantment already applied
      if Send(target,@IsEnchanted,#what=self)
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=MarkOfDishonor_already_enchanted,
                 #parm1=Send(target,@GetCapDef),#parm2=Send(target,@GetName));
         }

         return FALSE;
      }

      propagate;
   }

   CastSpell(who = $, lTargets = $, iSpellPower = 0)
   {
      local oTarget, iKarma, iVigorRestThreshold, iVigorRestThresholdChange;

      oTarget = First(lTargets);
      
      % If being cast on a player
      if IsClass(oTarget,&Player)
      {
         iKarma = Send(oTarget,@GetKarma);
         iVigorRestThresholdChange = 0;

         % Shal'ille only takes vigor from evil people.
         if iKarma >= 0
         {
            Send(who,@MsgSendUser,#message_rsc=MarkOfDishonor_no_target,#parm1=vrName);
            return false;
         }

         iVigorRestThreshold = Send(oTarget,@GetVigorRestThreshold);

         iVigorRestThresholdChange = iKarma * ( iVigorRestThreshold -
                                    DISHONOR_LOWEST_VIGOR_REST_THRESHOLD )
                                    / MAX_EVIL;

         % Make sure we aren't going to lower target's VigorRestThreshold
         % below 10, otherwise we could end up increasing the player's
         % VigorRestThreshold (see player.kod for reason why)
         if (iVigorRestThreshold - iVigorRestThresholdChange) < 10
         {
               iVigorRestThresholdChange = iVigorRestThreshold - 10;
         }

         Send(oTarget,@AddExertion,#amount=200000);
         Send(oTarget,@SetVigorRestThreshold,
               #amount=iVigorRestThreshold-iVigorRestThresholdChange);

         % Ensure player HPs aren't over their natural maximum.
         Post(oTarget,@NewHealth);
      }

      Send(oTarget,@StartEnchantment,#what=self,
            #time=Send(self,@GetDuration,#iSpellPower=iSpellPower),
            #state=iVigorRestThresholdChange);
      Send(oTarget,@MsgSendUser,#message_rsc=MarkOfDishonor_start);
      Send(who,@MsgSendUser,#message_rsc=MarkOfDishonor_success,
            #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));
      
      % If being cast on a monster
      if isClass(who,&Monster)
      {
         % EnterStateWait will make the monster stop aggro players and put
         % them on wait-state waiting to aggro again
         Send(oTarget,@EnterStateWait);
         Send(oTarget,@StartEnchantment,#what=self,#time=Send(self,@GetDuration),#addicon=FALSE);
         Send(who,@MsgSendUser,#message_rsc=MarkOfDishonor_success,
            #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));
      }

      propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      % Duration is 2-10 minutes, depending on spell power.
      iDuration = (120 + (iSpellPower * 4)) * 1000;

      return iDuration;
   }

   EndEnchantment(who = $, state = 0, report = TRUE)
   {
      local iVigorRestThreshold;
      
      % If we end enchantment on a player reset VigorRestThreshold
      if isClass(who,&Player)
      {
        iVigorRestThreshold = Send(who,@GetVigorRestThreshold);
        Send(who,@SetVigorRestThreshold,#amount=iVigorRestThreshold+state);

        if report
        {
            Send(who,@MsgSendUser,#message_rsc=MarkOfDishonor_stop);
        }
      }
      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

