% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Bonk is DMSpell

constants:
   include blakston.khd

resources:

   bonk_name_rsc = "bonk"
   bonk_icon_rsc = lightnin.bgf

   allinroom_bonk_msg1 = "~b%s%s bonks %s%s on the noggin."
   allinroom_bonk_msg2 = "~bYou wince as %s%s viciously bonks %s%s."

   caster_bonk_msg = "~bYou viciously bonk %s%s."
   bonked_bonk_msg = "~r~B>OUCH<~n~b  You are bonked on the head by %s%s."
   bonk_desc_rsc = "This bonks a person of your choice.  "

classvars:
   vrName = bonk_name_rsc
   vrIcon = bonk_icon_rsc
   vrDesc = bonk_desc_rsc

   viSpell_num = SID_BONK

   viMana = 0

properties:
 
messages:

   GetNumSpellTargets()
   {
      return 1;
   }

   SuccessChance(who=$)
   "DMs are always successful with their spells."
   {
      return TRUE;
   }

   ResetReagents()
   {
      plReagents = $;

      return;
   }

   CastSpell(who = $, lTargets = $)
   {
      local  i, oRoom, lActive, each_obj;

      oRoom = Send(who,@GetOwner);
      lActive = Send(oRoom,@GetHolderActive);

      % Show lightning flying through the air

      Send(oRoom,@SomethingShot,#who=who,#target=First(lTargets), 
           #projectile=self,#flags=PROJ_FLAG_LIGHT_SOURCE);

      Send(who,@MsgSendUser,#message_rsc=caster_bonk_msg,
           #parm1=Send(First(lTargets),@GetDef),
           #parm2=Send(First(lTargets),@GetName));


      Send(First(lTargets),@EffectSendUser,#what=self,#effect=EFFECT_INVERT);
      Send(First(lTargets),@MsgSendUser,#message_rsc=bonked_bonk_msg,
           #parm1=Send(who,@GetDef),#parm2=Send(who,@GetName));

      If isClass(first(lTargets),&Cow)
      {
         send(first(lTargets),@Bonked);
      }
      
      for i in lActive
      {
         each_obj = Send(oRoom,@HolderExtractObject,#data=i);
         if (IsClass(each_obj,&Player) and (each_obj <> who) and (each_obj <> First(lTargets)))
         {
            if (IsClass(First(lTargets),&Battler))
            {
               send(each_obj,@MsgSendUser,#message_rsc=allinroom_bonk_msg1,
                 #parm1=Send(who,@GetDef),
                 #parm2=Send(who,@GetName,#cap=TRUE),
                 #parm3=Send(First(lTargets),@getdef),
                 #parm4=Send(First(lTargets),@GetName));

            }
            else
            {
               send(each_obj,@MsgSendUser,#message_rsc=allinroom_bonk_msg2,
                #parm1=Send(who,@GetDef),
                #parm2=Send(who,@GetName),
                #parm3=Send(First(lTargets),@getdef),
                #parm4=Send(First(lTargets),@GetName));
            }
         }
      }

      propagate;
   }

   SendEffectData()
   {
      % for EFFECT_INVERT, 4 bytes of time to be inverted
      AddPacket(4,10000);
      
      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }

   GetProjectileIcon()
   {
      return vrIcon;
   }

   GetProjectileSpeed()
   {
      return 12;
   }

   SendProjectileAnimation()
   {
      AddPacket(1, ANIMATE_CYCLE, 4, 40, 2, 2, 2, 3);   % 40ms between animations

      return;
   }

   GetProjectileLightFlags()
   {
      % General lighting information.
      return LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC;
   }

   GetProjectileLightIntensity()
   {
      % Medium light radius for projectiles.  Out of 255 levels.
      return 125;
   }

   GetProjectileLightColor()
   {
      % Color is random!
      return send(SYS,@GetRGB,#iRed=random(33,100),#iGreen=random(33,100),
                  #iBlue=random(33,100));
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
