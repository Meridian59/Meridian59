% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Insight is DMSpell

constants:
   include blakston.khd

resources:

   Insight_name_rsc = "insight"
   Insight_icon_rsc = lightnin.bgf

   allinroom_Insight_msg1 = "~b%s%s deeply Insights the soul of %s%s."
   allinroom_Insight_msg2 = "~bYou tingle as %s%s deeply Insights %s%s."

   caster_Insight_msg = "~bYou stare deeply at %s%s."
   Insightd_Insight_msg = "~b%s%s looks deeply into your eyes."
   Insight_desc_rsc = \
   "This gazes deep into a person's eyes, and judges their odds of advancing in each spell/skill."
   "The true percentage appears after the name of the spell or skill.  The first number after that "
   "is the intellect check, and the second is the requisite stat check.  Note that the req stat "
   "check assumes that the target will be around the same level as a fungus beast or mutant ant - "
   "when casting an offensive spell or using a combat skill, your odds go up if you fight tougher monsters."


   Insight_Message = "%s (%i):  %i total, %i initial/%i secondary chance."

classvars:
   vrName = Insight_name_rsc
   vrIcon = Insight_icon_rsc
   vrDesc = Insight_desc_rsc

   viSpell_num = SID_Insight
   viMana = 0
  
properties:
     
messages:

   Constructor()
   {
      propagate;
   }
   
   GetNumSpellTargets()
   {
      return 1;
   }

   CastSpell(who = $, lTargets = $)
   {
      local  i, oRoom, lActive, each_obj;

      oRoom = Send(who,@GetOwner);
      lActive = Send(oRoom,@GetHolderActive);

      Send(who,@MsgSendUser,#message_rsc=caster_Insight_msg,
           #parm1=Send(First(lTargets),@GetDef),
           #parm2=Send(First(lTargets),@GetName));

      if (IsClass(First(lTargets),&Player))
      {
         Send(First(lTargets),@EffectSendUser,#what=self,#effect=EFFECT_INVERT);
         Send(First(lTargets),@MsgSendUser,#message_rsc=Insightd_Insight_msg,
              #parm1=Send(who,@GetCapIndef),
              #parm2=Send(who,@GetName));
         Send(self,@ComputeInsightInfo,#who=First(lTargets),#dmis=who);
      }

      for i in lActive
      {

         each_obj = Send(oRoom,@HolderExtractObject,#data=i);
         if (IsClass(each_obj,&Player) and (each_obj <> who) and (each_obj <> First(lTargets)))
         {
            if (IsClass(First(lTargets),&Battler))
            {
               send(each_obj,@MsgSendUser,#message_rsc=allinroom_Insight_msg1,
                    #parm1=Send(who,@GetIndef),
                    #parm2=Send(who,@GetName),
                    #parm3=Send(First(lTargets),@GetDef),
                    #parm4=Send(First(lTargets),@GetName));
            }
            else
            {
               send(each_obj,@MsgSendUser,#message_rsc=allinroom_Insight_msg2,
                #parm1=Send(who,@GetIndef),
                #parm2=Send(who,@GetName),
                #parm3=Send(First(lTargets),@GetDef),
                #parm4=Send(First(lTargets),@GetName));
            }
         }
      }
      
      propagate;
   }

   ComputeInsightInfo(who=$,dmis=$)
   {
      local iInitialchance, total_chance, increase_chance, i, num, obj;
      if dmis=$ or who=$  { debug("Bad data!");  return FALSE; }
      
      for i in send(who,@GetSpellList)
      {
         num = send(who,@DecodeSpellNum,#compound=i);
         obj = send(SYS,@FindSpellByNum,#num=num);
         iInitialChance = send(obj,@GetInitialChance,#who=who);
         increase_chance = send(obj,@GetSecondaryChance,#who=who,#target=$);
         total_chance = bound((iInitialChance*increase_chance)/100,1,100);
         send(dmis,@msgsenduser,#message_rsc=insight_message,
              #parm1=send(obj,@GetName),#parm2=send(who,@GetSpellAbility,#spell_num=num),
              #parm3=total_chance,#parm4=iInitialChance,#parm5=increase_chance);
      }
      
      for i in send(who,@GetSkillList)
      {
         num = send(who,@DecodeSkillNum,#compound=i);
         obj = send(SYS,@FindSkillByNum,#num=num);
         send(obj,@GetName);
         iInitialChance = send(obj,@GetInitialChance,#who=who);
         increase_chance = send(obj,@GetSecondaryChance,#who=who,#target=$);
         total_chance = bound((iInitialChance*increase_chance)/100,1,100);
         send(dmis,@msgsenduser,#message_rsc=insight_message,
              #parm1=send(obj,@GetName),#parm2=send(who,@GetSkillAbility,#skill_num=num),
              #parm3=total_chance,#parm4=iInitialChance,#parm5=increase_chance);
      }

      return;
   }      

   SendEffectData()
   {
      % for EFFECT_INVERT, 4 bytes of time to be inverted
      AddPacket(4,10000);
      
      return;
   }

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
