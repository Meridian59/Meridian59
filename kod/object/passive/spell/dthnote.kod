% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DeathNote is Spell

constants:

   include blakston.khd
   
   ATTACK_RANGE = 6

resources:

   deathnote_name_rsc = "dissonance"
   deathnote_icon_rsc = idthnote.bgf
   deathnote_desc_rsc = \
	  "Produce a piercing sound wave, which travels from the inner ear "
	  "directly to affect the brain, causing extreme pain. "
      "Requires purple mushrooms and a ruby to cast." 

   deathnote_hit_target_rsc = \
      "%s%s cries in agony while hearing to your tune."
   deathnote_hit_rsc = \
      "OUCH! A loud high pitch sound hurts your ears."
   deathnote_killed_someone = \
      "The muscial notes from your instrument drives %s%s mad, causing %s ears to bleed."
	  
   DeathNote_need_instrument = "You need an instrument!"
   DeathNote_no_newbie = \
      "Your guardian angel tells you, \"You are not ready to cast spells "
      "which may hinder other players.\""
	  
   deathnote_murmur_rsc = \
      "%s%s begins to pluck %s lute violetly."

   deathnote_sound = Spell2.wav

classvars:

   vrName = deathnote_name_rsc
   vrDesc = deathnote_desc_rsc
   vrIcon = deathnote_icon_rsc

   viSpell_num = SID_DEATH_NOTE
   viSchool = SS_JALA
   viSpell_level = 4
   viMana = 10

   viChance_to_increase = 10

   viAttack_spell = ATCK_SPELL_ALL
   viOutlaw = TRUE
   viHarmful = TRUE
   viNoNewbieOffense = TRUE
   
   vrSucceed_wav = deathnote_sound
   
   % In seconds, since it works off GetTime(),
   viPostCast_time = 2

properties:
   piDamageMin = 3
   piDamageMax = 12

messages:

   ResetReagents()
   {            
      plReagents = $;
      plReagents = Cons([&PurpleMushroom,2],plReagents);
      plReagents = Cons([&Ruby,1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   GetTargets(who=$,lTargets=$)
   "This returns a list of valid targets in the room."
   {
      local oRoom, i, each_obj, lFinalTargets;

      lFinalTargets = $;

      oRoom = Send(who,@GetOwner);
      for i in Send(oRoom,@GetHolderActive)
      {
         each_obj = Send(oRoom,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&Battler) AND each_obj <> who
         {
		   % if target is within the range of the caster
           if Send(who,@SquaredDistanceTo,#what=each_obj) < (ATTACK_RANGE * ATTACK_RANGE) 
		   {  
			  lFinalTargets = Cons(each_obj,lFinalTargets);  
		   }
         }
      }

      return lFinalTargets;
   }
   
   CanPayCosts(who=$, lTargets=$)  
   {
      if NOT Send(who,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE)
      {
         Send(who,@MsgSendUser,#message_rsc=DeathNote_no_newbie);
         
         return FALSE;
      }

      if Send(who,@GetInstrumentLevel) = 0
      { 
         Send(who,@MsgSendUser,#message_rsc=DeathNote_need_instrument);
         return FALSE; 
      }

      propagate;
   }

   CastSpell(who=$, lTargets=$, iSpellPower=0)
   {
	  local oRoom, each_obj, iDamage;

	  oRoom = Send(who,@GetOwner);
	  
	  if lTargets = $
	  {
		 lTargets = Send(self,@GetTargets,#who=who);
	  }
	  
	  % Everyone in the room will hear this spell being casted.
	  Send(oRoom,@SomethingWaveRoom,#wave_rsc=vrSucceed_wav);
	  
	  piDamageMax = iSpellPower / 8;
	  bound(piDamageMax, 5, 12);
	  
      for each_obj in lTargets
      {
		 Send(oRoom,@SomethingAttacked,#what=who,#victim=each_obj,#use_weapon=self);
	  
		 Send(who,@MsgSendUser,#message_rsc=deathnote_hit_target_rsc,
             #parm1=Send(each_obj,@GetCapDef),
             #parm2=Send(each_obj,@GetName));
			 
		 if IsClass(each_obj,&Player)
		 {
			 Send(each_obj,@MsgSendUser,#message_rsc=deathnote_hit_rsc);
		 }
		 
		 iDamage = random(piDamageMin,piDamageMax);
		 
		 if Send(each_obj,@AssessDamage,#what=who,#damage=iDamage,#report=FALSE) = $
		 {
			Send(who,@KilledSomething,#what=each_obj,#use_weapon=self);
			
		    Send(who,@MsgSendUser,#message_rsc=deathnote_killed_someone,
             #parm1=Send(each_obj,@GetDef),
             #parm2=Send(each_obj,@GetName),
             #parm3=Send(each_obj,@GetHeShe));
		 }
	  }
	  
      propagate;
   }

   SpellMurmurMessage(caster=$,target=$,hearer=$)
   {
      if caster = hearer
      {
         return;
      }
        
	  Send(hearer,@MsgSendUser,#message_rsc=deathnote_murmur_rsc,
		   #parm1=Send(caster,@GetCapdef),
		   #parm2=Send(caster,@GetName),
		   #parm3=Send(caster,@GetHisHer));
      
      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
