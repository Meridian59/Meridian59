% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Earthquake is Spell

constants:

   include blakston.khd

resources:

   earthquake_name_rsc = "earthquake"
   earthquake_icon_rsc = irthquak.bgf
   earthquake_desc_rsc = \
      "Moves the earth violently causing damage to all beings in the room.  "
      "The more experienced the caster, the better damage is directed "
      "to the target and away from the caster.  "
      "Requires red mushrooms and purple mushrooms to cast."

   earthquake_first_rsc = \
      "You raise your arms to the sky and invoke the fury of Faren!"
   earthquake_third_rsc = \
      "%s%s raises %s arms to the sky and invokes the fury of Faren!"

   earthquake_killed_someone = \
      "The tremors knock %s%s to the ground - %s doesn't get up!"     
   earthquake_killed_self = \
      "You stumble as the tremors knock you to the ground, and everything "
      "goes black..."

   earthquake_cast_rsc = \
      "The earth convulses beneath your feet, tossing you around like a rag "
      "doll."
   earthquake_hit_rsc = \
      "%s%s lets out a cry of pain and surprise as the earth convulses "
      "beneath %s feet."

   earthquake_sound = fquake.wav

classvars:

   vrName = earthquake_name_rsc
   vrDesc = earthquake_desc_rsc
   vrIcon = earthquake_icon_rsc

   viSpell_num = SID_EARTHQUAKE
   viSchool = SS_FAREN
   viSpell_level = 5
   viMana = 12

   viCast_time = 5000
   viChance_to_increase = 10

   viAttack_spell = ATCK_SPELL_ALL | ATCK_SPELL_QUAKE
   viOutlaw = TRUE
   viHarmful = TRUE
   viNoNewbieOffense = TRUE

   viMin_damage = 5
   viMax_damage = 9

   % Damage is 100% within this distance
   viMax_damage_distance = 8
 
   % Damage is 0 outside this distance 
   viZero_damage_distance = 20

   viReport = FALSE

properties:


messages:

   ResetReagents()
   {            
      plReagents = $;
      plReagents = Cons([&RedMushroom,2],plReagents);
      plReagents = Cons([&PurpleMushroom,2],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   GetTargets(who=$,lTargets=$)
   "This returns a list of valid targets in the room."
   {
      local oRoom, i, each_obj, lFinalTargets;

      lFinalTargets = $;

      oRoom = Send(who,@GetOwner);
      for i in Send(oRoom,@GetHolderActive)
      {
         each_obj = Send(oRoom,@HolderExtractObject,#data=i);
         if IsClass(each_obj,&Battler)
         {
            lFinalTargets = Cons(each_obj,lFinalTargets);
         }
      }

      return lFinalTargets;
   }

   CastSpell(who=$, lTargets=$, iSpellPower=0, bItemCast=FALSE)
   {
      Send(self,@DoEarthQuake,#who=who,#lTargets=lTargets,
           #severity=(1+iSpellpower/25),#bItemCast=bItemCast);

      propagate;
   }
   
   DoEarthQuake(who=$, where=$, lTargets=$, severity=1, bItemCast=FALSE)
   "Does an earthquake spell in any room, if 'room' is given, but no 'who', "
   "it is done in 'room' and blame for death is unprovided.  "
   "If 'who' is given, but not 'room', it is done in the who's room and "
   "damage is blamed on 'who'.  "
   "If both are given, it is done in 'room', and any damage is blamed on "
   "'who'."
   {
      local i, iDamage, oRoom, lActive, each_obj, AssessWhat, lFinalTargets,
            lBossMonsters;
      
      if where <> $
      {
         oRoom = where;
      }
      else
      {
         if who <> $
         {
            oRoom = Send(who,@GetOwner);
         }
         else
         {
            return;
         }
      }
      
      if who <> $
      {
         AssessWhat = who;

         if IsClass(who,&Player)
         {
            % Special consideration:  how badly the player hurt himself and
            %  did the player kill himself?

            if NOT bItemCast
            {
               iDamage = Send(self, @ComputeDamage, 
 	       	       	      #who=who, #target=who, #severity=severity);
            }
            else
            {
               % Full damage if cast from an item (that is, a scroll).
               % This is to punish people that spam Earthquake scrolls.
               iDamage = viMax_damage * severity;
            }

            if Send(who,@AssessDamage,#what=who,#damage=iDamage,#atype=0,
                    #aspell=viAttack_spell,#report=FALSE) = $
            {
               Send(who,@MsgSendUser,#message_rsc=earthquake_killed_self);
               post(who,@KilledSomething,#what=AssessWhat,#use_weapon=self);
            }
            else
            {
               Send(who,@MsgSendUser,#message_rsc=earthquake_cast_rsc);
            }
         }
      }
      else 
      {
         AssessWhat = oRoom;
      }
   
      lFinalTargets = lTargets;
      lActive = Send(oRoom,@GetHolderActive);

      % Do the rumble effect, with a chance to disrupt casting. :)
      % Post it so that it won't affect this casting.
      Post(oRoom,@Rumble,#duration=3000,#disruption=100);

      % Send a message to all in room of spellcasters actions  
      for i in lActive
      {
         each_obj = Send(oRoom,@HolderExtractObject,#data=i);
         
         if isClass(each_obj,&Player)
         {
            if who <> $
            {
               if each_obj = who
               {
                  Send(each_obj,@MsgSendUser,
                       #message_rsc=earthquake_first_rsc);
               }
               else
               {
                  Send(each_obj,@MsgSendUser,#message_rsc=earthquake_third_rsc,
                       #parm1=Send(who,@GetCapDef),#parm2=Send(who,@GetName),
                       #parm3=Send(who,@GetHisHer));
               }
            }
         }

         if lTargets = $
            AND IsClass(each_obj,&Battler)
            AND each_obj <> who
         {
            lFinalTargets = cons(each_obj, lFinalTargets);
         }
      }

      % Everybody in the room hears the earthquake sound.
      Send(oRoom,@SomethingWaveRoom,#wave_rsc=earthquake_sound);

      % Go through all the final targets list doing damage
      for each_obj in lFinalTargets
      {
         % In guildhalls, only hurt players in the same zone as the caster.
         if who <> $
            AND IsClass(oRoom,&GuildHall)   
            AND Send(oRoom,@InFoyer,#who=each_obj)
                <> Send(oRoom,@InFoyer,#who=who)
         {
            continue;
         }

         if IsClass(each_obj,&Player)
         {
            if Send(each_obj,@AssessDamage,#what=AssessWhat,
                    #damage=Send(self, @ComputeDamage, 
 	       	       	         #who=who, #target=each_obj, #severity=severity),
                    #atype=0,#aspell=viAttack_spell,#report=FALSE) = $
            {
               % Earthquake killed someone.
               if who <> $
               {
                  Send(who,@KilledSomething,#what=each_obj,#use_weapon=self);
                  Send(who,@MsgSendUser,#message_rsc=earthquake_killed_someone,
                       #parm1=Send(each_obj,@GetDef),
                       #parm2=Send(each_obj,@GetName),
                       #parm3=Send(each_obj,@GetHeShe));
               }
               else
               {
                  Send(oRoom,@SomethingKilled,#what=oRoom,#victim=each_obj);
                  Send(each_obj,@Killed,#what=oRoom);
                  Send(each_obj,@MsgSendUser,
                       #message_rsc=earthquake_killed_self);
               }
            }      
            else
            {
               % Earthquake just did some amount of damage.
               Send(each_obj,@MsgSendUser,#message_rsc=earthquake_cast_rsc);
               if who <> $
               {
                  Send(who,@MsgSendUser,#message_rsc=earthquake_hit_rsc,
                       #parm1=Send(each_obj,@GetCapdef),
                       #parm2=Send(each_obj,@GetName),
                       #parm3=Send(each_obj,@GetHisHer));
               }
            }
         }   
         else   
         {   
            % Class must be monster, so always do damage, unless it's a
            %  shopkeeper/NPC.  Also avoid damage to boss monsters if
            %  earthquake isn't player caused.
            lBossMonsters = [ &LupoggKing, &Lich, &Ghost, &OrcPitBossBody, &Yeti,
                              &XeoAir, &XeoFire, &XeoWater, &XeoEarth
                            ];
            if (Send(each_obj,@GetObjectFlags) & BATTLER_YES)
               AND ((who <> $ AND IsClass(who,&Player))
                    OR FindListElem(lBossMonsters,GetClass(each_obj)) = 0)
            {
               if Send(each_obj,@AssessDamage,#what=AssessWhat,
                       #damage=Send(self, @ComputeDamage, 
 	       	       	            #who=who, #target=each_obj, #severity=severity),
                       #atype=0,#aspell=viAttack_spell) = $
               {
                  if who <> $
                  {
                     Send(who,@KilledSomething,#what=each_obj,
                          #use_weapon=self);
                  }
                  else
                  {
                     Send(oRoom,@SomethingKilled,#what=oRoom,#victim=each_obj);
                     Send(each_obj,@Killed,#what=oRoom);
                  }
               }
                  
               if who <> $
               {
                  Send(oRoom,@SomethingAttacked,#what=who,#victim=each_obj,
                       #use_weapon=self);
               }
            }
         }
      }

      return;
   }

   ComputeDamage(who=$, target=$, severity=1)
   "Return the damage to be applied to the given target, taking into account "
   "distance."
   {
       local iPercent, iDistance_squared, iMax_distance_squared,
         iZero_distance_squared, iDamage;

       % Do full damage within viMax_damage_distance, zero damage outside
       % viZero_damage_distance, and an amount that falls off with distance
       % between the two.
       iPercent = 100;
       iDistance_squared = Send(who, @SquaredDistanceTo, #what=target);
       iMax_distance_squared = viMax_damage_distance * viMax_damage_distance;
       iZero_distance_squared = viZero_damage_distance * viZero_damage_distance;
       if iDistance_squared > iMax_distance_squared
       {
           if iDistance_squared > iZero_distance_squared
           {
               iPercent = 0;
           }
           else
           {
	       iPercent = 100 * (iZero_distance_squared - iDistance_squared) /
                                (iZero_Distance_squared - iMax_distance_squared);
           }
       }
       % debug("percent = ", iPercent);
       iDamage = (Random(viMin_damage,viMax_damage) * severity) * iPercent / 100;
       % debug("for object ", Send(target, @GetName), " damage = ", iDamage); 
       return iDamage;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
