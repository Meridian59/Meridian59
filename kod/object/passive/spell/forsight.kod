% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Foresight is Spell

constants:

   include blakston.khd
   include protocol.khd

   MAX_PERCENT_KNOWS = 16
   MAX_PERCENT_ADEQUATE = 32
   MAX_PERCENT_MEDIOCRE = 48
   MAX_PERCENT_GOOD = 64
   MAX_PERCENT_PRACTITIONER = 80
   MAX_PERCENT_GREAT = 90

resources:

   Foresight_name_rsc = "foresight"
   Foresight_icon_rsc = iforesig.bgf
   Foresight_desc_rsc = \
      "Reveals knowledge of the victim, informing you of their abilities.  "
      "Requires uncut seraphym to cast."

   Foresight_caster = "You glare at %s%s read their thoughts."
   Foresight_info = "%s%s %s"
   Foresight_abil_name = "%s %s, %s"
   Foresight_last_abil_name = "and %s %s."
   Foresight_nothing = \
      "%s%s's head seems to be so empty you could probably hear the sea if "
      "you held it to your ear."
   Foresight_one = "%s %s."
   Foresight_notplayer = \
      "Hmmm...you aren't sure WHAT to make of what %s%s is thinking."

   Foresight_KnowsOf = "knows of"
   Foresight_AdequateAt  = "is adequate at"
   Foresight_MediocreAt  = "is mediocre at"
   Foresight_GoodAt  = "is good at"
   Foresight_PractitionerOf = "is a practitioner of"
   Foresight_GreatAt = "is great at" 
   Foresight_MasterOf = "is a master of" 
   Foresight_sound = rforsig.wav

classvars:

   vrName = Foresight_name_rsc
   vrIcon = Foresight_icon_rsc
   vrDesc = Foresight_desc_rsc

   viSpell_num = SID_Foresight
   viSpell_level = 2
   viSchool = SS_RIIJA
   viMana = 5
   viSpellExertion = 4
   viCast_time = 0
   viChance_to_increase = 10

   viFlash = FLASH_BAD
   vrSucceed_wav = Foresight_sound

properties:

   viOutlaw = TRUE
   viHarmful = TRUE

messages:

   Constructed()
   {
      % Allow the spell on Sacred Haven.
      if NOT Send(SYS,@IsPKAllowed) 
      {      
         viOutlaw = FALSE;
         viHarmful = FALSE;
      }

      propagate;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   ResetReagents()
   {      
      plReagents = $;
      plReagents = Cons([&UncutSeraphym,2],plReagents);
      
      return;
   }

   CanPayCosts(who = $, lTargets = $)
   {
      local oTarget;

      oTarget = First(lTargets);
      if (NOT IsClass(oTarget,&Player)) OR IsClass(oTarget,&DM)
      {
         Send(who,@MsgSendUser,#message_rsc=Foresight_notplayer,
              #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));

         return FALSE;
      }

      propagate;
   }

   CastSpell(who = $, lTargets=$, iSpellPower = 0)
   {
      local iToList,iListed,i,oTarget,lAbilities,iCompound,iAbilityNum,
            oAbility,iAbilityLength,IMaxHopSize,iFrog,iCounter,iTemp,iSkill;

      oTarget = First(lTargets);
      iToList = iSpellPower / 4;
      iToList = Bound(iToList,1,10);
      iListed = 0;
      iFrog = 0;
      lAbilities = $;

      for i in Send(oTarget,@GetSpellList)
      {
	      iAbilityNum = Send(oTarget,@DecodeSpellNum,#compound=i);
         oAbility = Send(SYS,@findspellbynum,#num=iAbilityNum);
	      lAbilities = cons([oAbility,i],lAbilities);
      }

      for i in Send(oTarget,@GetSkillList)
      {
         iAbilityNum = Send(oTarget,@DecodeSkillNum,#compound=i);
         oAbility = Send(SYS,@findskillbynum,#num=iAbilityNum);
   	   lAbilities = cons([oAbility,i],lAbilities);
      }

      iCounter = 1;
      iAbilityLength = Length(lAbilities) - 1;

      while iCounter < (iAbilityLength / 2)
      {
	      iTemp = Nth(lAbilities,iAbilityLength-iCounter);
	      SetNth(lAbilities,iAbilityLength-iCounter,Nth(lAbilities,iCounter));
	      SetNth(lAbilities,iCounter,iTemp);
	      iCounter = iCounter + 2;
      }

      iAbilityLength = Length(lAbilities);
      
      if iAbilityLength < iToList
	   {
	      iToList = iAbilityLength;
	   }

      if iToList = 0
	   {
	      AddPacket(1,BP_MESSAGE,4,Foresight_nothing);
         AddPacket(4,Send(oTarget,@GetDef));
         AddPacket(4,Send(oTarget,@GetName));
	      Sendpacket(Send(who,@getsession));

	      propagate;
	   }

      iMaxHopSize = iAbilityLength / iToList;
      iMaxHopSize = Bound(iMaxHopsize,1,$);

      while iListed < iToList
	   {
         oAbility = $;
	      iFrog = iFrog + Random(1,iMaxHopSize);
         oAbility = Nth(Nth(lAbilities,iFrog),1);
	      iCompound = Nth(Nth(lAbilities,iFrog),2);

	      if iListed = 0
	      {
	         AddPacket(1,BP_MESSAGE,4,Foresight_info);
            AddPacket(4,Send(oTarget,@GetDef));
            AddPacket(4,Send(oTarget,@GetName));
         }

	      iListed = iListed + 1;

	      if oAbility <> $
	      {					  
	         if iToList = 1
	         {
	            AddPacket(4,Foresight_one);
            }
	         else
	         {
               if iListed = iToList
               {
   		         AddPacket(4,Foresight_last_abil_name); 
               }
               else
               {	
   		         AddPacket(4,Foresight_abil_name);
	            }
	         }

	         if IsClass(oAbility,&Spell)
	         {
	            iSkill = Send(oTarget,@DecodeSkillAbility,#compound=iCompound);
	         }
	         else
	         {
	            iSkill = Send(oTarget,@DecodeSpellAbility,#compound=iCompound);
	         }

	         if iSkill < MAX_PERCENT_KNOWS
	         {
	            AddPacket(4,Foresight_KnowsOf);
	         }
	         else
	         {
   	         if iSkill < MAX_PERCENT_ADEQUATE
   	         {
   	            AddPacket(4,Foresight_AdequateAt);
               }
               else
               {
      	         if iSkill < MAX_PERCENT_MEDIOCRE
      	         {
      	            AddPacket(4,Foresight_MediocreAt);
      	         }
      	         else
      	         {
         	         if iSkill < MAX_PERCENT_GOOD
         	         {
         	            AddPacket(4,Foresight_GoodAt);
         	         }
         	         else
         	         {
            	         if iSkill < MAX_PERCENT_PRACTITIONER
            	         {
            	            AddPacket(4,Foresight_PractitionerOf);
            	         }
            	         else
            	         {
               	         if iSkill < MAX_PERCENT_GREAT
               	         {
               	            AddPacket(4,Foresight_GreatAt);
               	         }
               	         else
               	         {
               	            AddPacket(4,Foresight_MasterOf);
               	         }
            	         }
         	         }
      	         }
   	         }
	         }

            AddPacket(4,Send(oAbility,@GetName));
	      }
	   }

      SendPacket(Send(who,@GetSession));

      propagate;
   }


   % This spell is not an illusion, unlike most other Riija spells.

   IsIllusion()
   {
      return FALSE;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
