% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
GlowWeapon is Spell

constants:
   include blakston.khd

resources:

   GlowWeapon_name_rsc = "glow"
   GlowWeapon_icon_rsc = iglow.bgf
   GlowWeapon_desc_rsc = \
      "Enchants a weapon to glow like a torch. "
      "Requires elderberries and mushrooms to cast."

   GlowWeapon_sound = kglow.wav

   GlowWeapon_spell_intro = "Kraanan Lv. 1: Enchants a weapon to glow like a torch."

   GlowWeapon_label_rsc = "illuminator."

   GlowWeapon_cast_rsc = "%s%s now glows like a torch."
   GlowWeapon_no_can = "You cannot enchant %s%s to glow."
   GlowWeapon_no_weapon = "%s%s has no wielded weapon."
   GlowWeapon_broken = "You cannot enchant %s%s. It's broken."
   GlowWeapon_already_stronger = \
      "The weapon already has a stronger glow enchantment upon it."
   GlowWeapon_cap_your = "Your "

classvars:

   vrName = GlowWeapon_name_rsc
   vrIcon = GlowWeapon_icon_rsc
   vrDesc = GlowWeapon_desc_rsc
   vrEnchantment_type = GlowWeapon_label_rsc   
   vrSucceed_wav = GlowWeapon_sound

   viSpell_num = SID_GLOW
   viSchool = SS_KRAANAN

   vrSpell_intro = GlowWeapon_spell_intro

   viSpell_level = 1
   viMana = 15
   viSpellExertion = 10 

   viChance_To_Increase = 20

properties:

   piLightLevel

messages:

   ResetReagents()
   {
      % separate message so can change, then set from admin mode

      plReagents = $;
      plReagents = Cons([&ElderBerry,2],plReagents);
      plReagents = Cons([&Mushroom,2],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      % Tell client how many targets this spell needs
      return 1;
   }

   CanPayCosts(who = $, lTargets = $, iSpellPower = 0)
   {
      local oWeapon, oTarget, oGlow, iCurrentGlow;

      oTarget = first(lTargets);
      if oTarget = $
      {
         return FALSE;
      }

      if NOT IsClass(oTarget,&Weapon)
      {
         if IsClass(oTarget,&User)
         {
            oWeapon = Send(oTarget,@LookupPlayerWeapon);
            if oWeapon = $
            {
               Send(who,@MsgSendUser,#message_rsc=GlowWeapon_no_weapon,
                    #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));
                    
               return FALSE;
            }
            else
            {
               oTarget = oWeapon;
            }
         }
         else
         {
            Send(who,@MsgSendUser,#message_rsc=GlowWeapon_no_can,
                 #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));
                 
            return FALSE;
         }

      }
      else
      {
         if Send(oTarget,@GetHits) = 0
         {
            Send(who,@MsgSendUser,#message_rsc=GlowWeapon_broken,
                 #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));

            return FALSE;
         }
      }

      % Do not allow people to recast to a lower power level
      %  This is to allow people to cast spell multiple times to get the
      %  "best" results without the spell being overly 'bot-able.

      piLightLevel = Send(self,@GetLightLevel,#iSpellPower=iSpellPower);
      iCurrentGlow = Send(oTarget,@GetAttributeData,#ItemAtt=WA_GLOWING);
      if iCurrentGlow <> $
         AND Nth(iCurrentGlow,3) >= piLightLevel
      {
         Send(who,@MsgSendUser,#message_rsc=GlowWeapon_already_stronger);

         return FALSE;
      }
      
      propagate;
   }

   CastSpell(who = $, lTargets = $, iSpellPower= 0)
   {
      local oWeapon, oWeapAtt, oOwner, oRoom, iCurrentGlow, oGlow;

      oWeapon = First(lTargets);

      if IsClass(oWeapon,&User)
      {
         oWeapon = Send(oWeapon,@LookupPlayerWeapon);
      } 

      oWeapAtt = Send(SYS,@FindItemAttByNum,#num=WA_GLOWING);	  

      % Remove any existing glows before we go on.
      iCurrentGlow = Send(oWeapon,@GetAttributeData,#ItemAtt=WA_GLOWING);
      if iCurrentGlow <> $ 
      {
         oGlow = Send(SYS,@FindItemAttByNum,#num=WA_GLOWING);
         Send(oGlow,@RemoveFromItem,#oItem=oWeapon);
      }

      % State3 passes in a string generated by GetMakerInfo in spell.kod.
      Send(oWeapAtt,@AddToItem,#oItem=oWeapon,#random_gen=FALSE,
           #timer_duration=Send(self,@GetDuration,#iSpellPower=iSpellPower), 
           #state1=piLightLevel,#state3=Send(self,@GetMakerInfo,#who=who));

      Send(who,@MsgSendUser,#message_rsc=GlowWeapon_cast_rsc,
           #parm1=Send(oWeapon,@GetCapDef),#parm2=Send(oWeapon,@GetName));

      oOwner = Send(oWeapon,@GetOwner);

      if IsClass(oOwner,&Player) AND Send(oOwner,@LookupPlayerWeapon) = oWeapon
      {
         if oOwner <> who
         {
            Send(oOwner,@MsgSendUser,#message_rsc=GlowWeapon_cast_rsc,
                 #parm1=GlowWeapon_cap_your,#parm2=Send(oWeapon,@GetName));
         }

         Send(oWeapAtt,@ItemUsed,#oItem=oWeapon,#oPlayer=oOwner);
         oRoom = Send(oOwner,@GetOwner);
         if oRoom <> $
         {
            Send(oRoom,@SomethingChanged,#what=oOwner);
         }
      }           

      propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      % 1 - 37 hours.
      iDuration = random(1,4) + (iSpellPower/3);
      iDuration = iDuration * 1000 * 60 * 60;
      
      return iDuration;
   }

   GetLightLevel(iSpellPower = 0)
   {
      local iPower;
      
      iPower = 20 + (iSpellPower / 3);
      
      return random(iPower/2,iPower);
   }
   

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
