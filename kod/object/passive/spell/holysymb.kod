% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
HolySymbol is AttackSpell

constants:

   include blakston.khd

   % If we miss our roll by this much, we really pissed the monster off
   HATE_MARGIN = 25
   
resources:

   HolySymbol_name_rsc = "holy symbol"
   HolySymbol_icon_rsc = iholysym.bgf
   HolySymbol_desc_rsc = \
      "This spell involves weaving your hands in a holy tracery which frightens nearby unholy beings.  "
      "Requires elderberries to be crushed onto the skin of your hands to ritually cleanse them."
   HolySymbol_sound = sholysym.wav
   
   HolySymbol_success = "Your hands weave through the air in a delicate tracery, speaking through motion "
      "the purity of Shal'ille, a ward against the unholy."

classvars:

   vrName = HolySymbol_name_rsc
   vrIcon = HolySymbol_icon_rsc
   vrDesc = HolySymbol_desc_rsc
   
   viSpell_num = SID_HOLY_SYMBOL

   viAttack_spell = ATCK_SPELL_ALL + ATCK_SPELL_HOLY

   viSchool = SS_SHALILLE
   viSpell_level = 3
   viMana = 8

   vrSucceed_wav = HolySymbol_sound

   % In seconds, since it works off GetTime().
   viPostCast_time = 2

   viChance_To_Increase = 5

properties:

   piDamageMin = 10
   piDamageMax = 20
   piRange = 4

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Elderberry,3],plReagents);

      return;
   }
   
   DoSideEffect(who = $)
   {
      local oRoom, oObject, oMonster, iChance, iRoll, iSpellPower;
      
	  iSpellPower = send(self,@GetSpellpower,#who=who);
	  
      Send(who,@MsgSendUser,#message_rsc=HolySymbol_success);
      oRoom = send(who,@GetOwner);

      for oObject in send(oRoom,@GetHolderActive) 
      {
         oMonster = Send(oRoom,@HolderExtractObject,#data=oObject);
	  
         if isClass(oMonster,&Monster)
            AND NOT (send(oMonster,@GetBehavior) & AI_NPC)
            AND (send(oMonster,@IsUndead))
		    AND Send(who,@SquaredDistanceTo,#what=oMonster) < (piRange * piRange)
         {
            % Use the "detect" option for the monster's karma incase we're trying to turn an event monster.
            iChance = (iSpellPower*3/4) + (send(who,@GetBaseMaxHealth) - send(oMonster,@GetLevel)/2)
                                        + (send(who,@GetKarma) - send(oMonster,@GetKarma,#detect=TRUE));
                                        
            if send(oMonster, @GetTarget) <> $
            {
               % harder if monster already has a target
               iChance = (iChance - 5);
            }
            
            iChance = bound(iChance,2,98);
            iRoll = random(1,100);
            if iRoll < iChance 
            {
               % they're scared and will now run away
               send(oMonster,@TurnedBy,#who=who);
               send(oMonster,@TargetSwitch,#what=who,#iHatred=send(who,@GetKarma));
            }
            
            if iRoll > (iChance + HATE_MARGIN) 
            {
               % oops!  since you failed, now they really hate you!
               send(first(oMonster),@TargetSwitch,#what=who,#iHatred=send(who,@GetKarma));
               send(first(oMonster),@EnterStateChase,#target=who,#actnow=TRUE);
            }
         }
      }
      
      propagate;
   }

   GetDuration(iSpellpower=$)
   {
      local iDuration;

      iDuration = iSpellpower/10;  %seconds

      return iDuration;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
