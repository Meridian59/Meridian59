% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
HolyWeapon is Spell

constants:
   include blakston.khd

resources:

   holyweapon_cast_rsc = "Your %s is now dedicated to Shal'ille."
   holyweapon_no_can = "You cannot dedicate %s%s to Shal'ille."
   holyweapon_fails = "The %s is strangely unaffected by the spell."
   holyweapon_already_done = \
   "This weapon is already dedicated to Shal'ille."

   holyweapon_name_rsc = "holy weapon"
   holyweapon_icon_rsc = iholywpn.bgf
   holyweapon_desc_rsc = \
      "Dedicates your weapon to Shal'ille, enhancing its "
      "effectiveness against the unholy.  "
	   "Requires fairy wings and orc teeth to cast."

   holyweapon_spell_intro = "Shal'ille Lv. 2: Dedicates your  weapon to Shal'ille, enhancing its effectiveness against the unholy."
   holyweapon_lable_rsc = "sanctifier."

classvars:

   vrName = holyweapon_name_rsc
   vrIcon = holyweapon_icon_rsc
   vrDesc = holyweapon_desc_rsc

   vrEnchantment_type = holyweapon_lable_rsc

   viSpell_num = SID_HOLY_WEAPON
   viSchool = SS_SHALILLE

   vrSpell_intro = holyweapon_spell_intro

   viSpell_level = 2
   viMana = 17
   viSpellExertion = 20
   viCast_time = 30000  

properties:

messages:

   ResetReagents()
   {
      % separate message so can change, then set from admin mode

      plReagents = $;
      plReagents = Cons([&FairyWing,3],plReagents);
      plReagents = Cons([&OrcTooth,1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      % Tell client how many targets this spell needs
      return 1;
   }

   IsTargetInRange(who = $,target = $)
   {
      return who = Send(target, @GetOwner) 
      OR send(who,@getOwner) = send(target,@getowner);  
   }

   CanPayCosts(who = $, lTargets = $, iSpellPower = 0)
   {
      local oWeapon;
      oWeapon = first(lTargets);
      if oWeapon = $ or not isClass(oWeapon,&weapon)
      {
	 Send(who, @MsgSendUser, #message_rsc=holyweapon_no_can,
	    #parm1=send(oWeapon,@getdef),#parm2=send(oWeapon,@getname));
	 return False;
      }
      if Send(oWeapon,@CheckSpellFlag,#flag=ATCK_SPELL_HOLY)
      {
	 Send(who, @MsgSendUser, #message_rsc=holyweapon_already_done);
	 return False;
      }
      propagate;   % Check other things higher up
   }

   CastSpell(who = $, lTargets = $, iSpellPower= 0)
   {
      local oWeapon, oWeapAtt, iDuration;

      oWeapon = first(lTargets);
      if oWeapon = $ or not isClass(oWeapon,&weapon)
      {
	 Send(who, @MsgSendUser, #message_rsc=holyweapon_no_can,
	    #parm1=send(oWeapon,@getdef),#parm2=send(oWeapon,@getname));
	 return False;
      }

      if not Send(oWeapon,@CanEnchant,#oSpell = self)
      {
         Send(who, @MsgSendUser, #message_rsc=spell_resists,
	    #parm1=send(oWeapon,@getCapdef),#parm2=send(oWeapon,@getname));
	 return;
      }

      if not Send(self,@IsTargetInRange,#who=who,#target=oWeapon)
      {
	 Send(who, @MsgSendUser,#message_rsc=spell_out_of_range, 
	    #parm1=Send(oWeapon,@GetCapDef),#parm2=Send(oWeapon,@GetName));
	 return False;
      }     
      
      oWeapAtt = send(SYS,@finditemattbynum,#num=WA_ATTACKSPELLTYPE);

      send(oWeapAtt,@AddToItem,#oItem=oWeapon,#random_gen = FALSE,
	 #state1=ATCK_SPELL_HOLY, #timer_duration = send(self,@GetDuration,#iSpellPower=iSpellPower),
      #state3=send(self,@GetMakerInfo,#who=who));

      Send(who, @MsgSendUser, #message_rsc=holyweapon_cast_rsc,
	 #parm1=Send(oWeapon,@GetName));

      propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      iDuration = random(1,4) + (iSpellPower/3);
      %% ~( 1 - 37 )
      %%Convert to hours:
      iDuration = iDuration * 1000 * 60 * 60;
      return iDuration;
   }
   
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
