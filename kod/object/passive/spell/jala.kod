% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Jala is Spell

% Jala Spells are effect spells that last so long as the player remains in a
% trance.  There can only be one Jala spell per room.

constants:

   include blakston.khd

resources:

   jala_song_ends = "The song sung by a nearby bard of Jala ends."
   jala_song_starts = "A nearby bard of Jala starts to sing a song."
   jala_song_failed = \
      "A nearby bard of Jala begins to sing a song, but quits when they "
      "realize they can't be heard over the song sung by another."
   jala_song_playing = "A nearby bard of Jala is singing a song."
   jala_need_instrument = "You need an instrument!"
   jala_no_newbie = \
      "Your guardian angel tells you, \"You are not ready to cast spells "
      "which may hinder other players.\""

   jala_default = jala1.mid

classvars:

   viSchool = SS_JALA
   % viMana is amount used upon inititiation
   viMana = 5
   % viManaDrain is amount used every viDrainTime milliseconds
   viManaDrain = 3       
   viDrainTime = 5000

   prMusic = jala_default
   viChance_To_Increase = 8
   % viPostCast_time is in seconds, since it works off GetTime()
   viPostCast_time = 1

   % Can non-PK characers use this song?
   vbCanNewbieSing = TRUE     

properties:

   % Do we need to Send removeenchantment to every user in the room on
   %  spell termination?
   pbUserEffects = FALSE  

messages:

   ResetReagents()
   {
      return;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   CanPayCosts(who=$, lTargets=$)  
   {
      if NOT vbCanNewbieSing
         AND NOT Send(who,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE)
      {
         Send(who,@MsgSendUser,#message_rsc=jala_no_newbie);
         
         return FALSE;
      }


      if Send(who,@GetInstrumentLevel) = 0
      { 
         Send(who,@MsgSendUser,#message_rsc=jala_need_instrument);
         return FALSE; 
      }
      
      propagate;
   }

   CalculateVolume(who=$, iSpellPower=25)
   {
      local iVolume;

      % This should be a funcion of the spellpower AND the amount of mana
      %  used to upkeep the spell AND quality of the instrument.
      % Multiply the numerator by 1000 to break viDrainTime down to seconds
      %  without risking a divide by for small durations.
      iVolume = iSpellPower * viManaDrain * 1000 / viDrainTime;

      return iVolume;
   }

   CastSpell(who=$, iSpellPower=0)
   "Initiation point for the spell."
   {
      local oRoom, oldVolume, thisVolume, i, iJalaInfo;

      oRoom = Send(who,@GetOwner);

      iJalaInfo = Send(oRoom,@GetJalaInfo);
      oldVolume = 0;

      if iJalaInfo <> $
      {
         % Our state information is the third item return from JalaInfo
         oldVolume = Nth(Nth(iJalaInfo,3),1);
      }

      thisVolume = Send(self,@CalculateVolume,#who=who,
                        #iSpellPower=iSpellPower);
      thisVolume = bound(thisVolume,1,$);
      if thisVolume < oldVolume
         OR thisVolume = oldVolume
      {
         Send(oRoom,@SomeoneSaid,#type=SAY_MESSAGE,#string=jala_song_failed,
              #what=self);
         
         return;
      }
      else
      {
         Send(oRoom,@RoomStartEnchantment,#what=self,
              #state=Send(self,@BuildState,#thisVolume=thisVolume,#who=who,
                          #iSpellPower=iSpellPower),
              #time=viDrainTime,#iSpellPower=iSpellPower,#lastcall=FALSE);
         Send(oRoom,@SomeoneSaid,#type=SAY_MESSAGE,#string=jala_song_starts,
              #what=self);
         Send(self,@StartMusic,#oCaster=who,#rMusic=prMusic);
         Send(who,@SetTranceFlag);
         Send(oRoom,@EnchantAllOccupants,#what=self);
      }

      propagate;
   }

   BuildState(thisVolume=0,who=$,iSpellPower=0)
   {
      return [thisVolume,who,iSpellPower];
   }

   BreakTrance(who=$, event=$, state=$, location=$)
   "If caster runs out of mana or loses trance, spell ends."
   {
      local oRoom;
      
      % Check for Necklace of Jala first
      if Send(who,@IsUsingA,#class=&JalaNecklace)
      {
         % The song keeps going if you get damaged, move, cast, or make an attack.
         if event = EVENT_DAMAGE
            OR event = EVENT_ATTACK
            OR event = EVENT_RUN
            OR (event = EVENT_CAST AND Send(Send(SYS, @GetSettings), @CanRecastJalaWithNecklace))
         {
            return FALSE;
         }

         % Chance to keep going through a disruption
         if event = EVENT_DISRUPT
            AND Send(self,@CheckDisruptWithNecklace)
         {
            return FALSE;
         }
      }

      if location = $
      {
         oRoom = Send(who,@GetOwner);
      }
      else
      {
         oRoom = location;
      }
      
      Send(oRoom,@RemoveEnchantment,#what=self,#state=state);

      propagate;
   }

   CheckDisruptWithNecklace()
   "Checks the chance to disrupt the spell with a Necklace of Jala on.  "
   "Normally 25% chance."
   {
      if random(1,100) < 25
      {
         return TRUE;
      }

      return FALSE;
   }

   StartEnchantment(who = $, state=$)
   "Does enchantment effect on one player"
   {
      return;
   }

   RemoveEnchantment(who = $, state=$)
   "Remove enchantment effects on this occupant"
   {
      return;
   }

   StartPeriodicEnchantment(where=$, state=$)
   "Sends enchantment message to room like CastSpell for most room "
   "enchantments, but silent, and done as often as necessary."
   {
      local oCaster;
      
      oCaster = Nth(state,2);
   
      % If caster runs out of mana or loses trance, spell ends.
      if Send(oCaster,@GetMana) < viManaDrain * 2
      {
         Send(where,@RoomStartEnchantment,#what=self,#time=viDrainTime,
              #state=state,#addicon=FALSE,#lastcall=TRUE);

      }
      else
      {      
         Send(where,@RoomStartEnchantment,#what=self,#time=viDrainTime,
              #state=state,#addicon=FALSE,#lastcall=FALSE);
      }
      
      Send(oCaster,@LoseMana,#amount=viManaDrain);
      
      return;
   }

   StartEnchantmentNewOccupant(who=$, state=$)
   "Called on new occupants of the enchanted room."
   {
      Send(self,@StartEnchantment,#who=who);
      Send(who,@MsgSendUser,#message_rsc=jala_song_playing);
      Post(who,@MidiSendUser,#midi_rsc=prMusic);
      
      return;
   }

   EndRoomEnchantment(who=$, state=$)
   "Ends enchantment effect on one player, generally for players leaving the "
   "room."
   {
      Send(who,@RemoveEnchantment,#what=self,#state=state);
      
      return;
   }

   EndSpell(where=$, state=$)  
   "Called by room when spell expires."
   {
      local oCaster, lActive, each_obj, oRoom, i;
      oCaster = Nth(state,2);

      if pbUserEffects
      {
         if where = $
         {
            oRoom = Send(oCaster,@GetOwner);
         }
         else
         {
            oRoom = where;
         }
         
         lActive = Send(oRoom,@GetHolderActive);
         for i in lActive
         {
            each_obj = Send(oRoom,@HolderExtractObject,#Data=i);
            Send(self,@RemoveEnchantment,#who=each_obj,#state=state);
         }
      }

      Send(where,@SomeoneSaid,#type=SAY_MESSAGE,#string=jala_song_ends,
           #what=self);
      % Send $ as midi_rsc to end music and resume default.
      Send(self,@StartMusic,#oCaster=oCaster,#rMusic=$);
      Send(oCaster,@ClearTranceFlag);
      
      return;
   }

   StartMusic(oCaster=$, rMusic=$)
   {
      local oRoom, i;
      
      if oCaster = $
      {
         debug("BAD MUSIC SETUP, MAN!");

         return FALSE;
      }

      oRoom = Send(oCaster,@GetOwner);
      for i in Send(oRoom,@GetHolderActive)
      {
         if IsClass(first(i),&user)
         {
            Send(first(i),@MidiSendUser,#midi_rsc=rMusic);
         }
      }
      
      return;
   }

   SetSpellPlayerFlag(who=$, state=$)
   {
      if who = Nth(state,2)
      {
         Send(who,@SetTranceFlag);
      }
      
      return;
   }

   PlaySpellSound(room_obj = $,what = $)
   {
      % Jala plays midis for songs, not wavs.  Just return.
      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
