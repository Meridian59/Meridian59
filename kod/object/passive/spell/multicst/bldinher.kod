% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
BloodInheritance is MultiCastSpell

constants:

   include blakston.khd

resources:


   BloodInheritance_name_rsc = "blood inheritance"
   BloodInheritance_icon_rsc = ibloodin.bgf
   BloodInheritance_desc_rsc = \
      "Infuses a weapon with the malevolent power of Qor.  "
      "It is impossible to predict exactly what form this dark "
      "benediction will take, but it will always be deadly.  "
      "Requires shaman blood, entroot berries, and orc teeth."
   
   BloodInheritance_sound = qunbond.wav

   BloodInheritance_bad_target = "You must target this spell at a weapon."
   BloodInheritance_bad_target2 = "You cannot give Qor's gift to a weapon which is already enchanted."
   BloodInheritance_succeeded = "The evil force of your spell lashes out at %s%s, infusing it with Qor's power."

classvars:

   vrName = BloodInheritance_name_rsc
   vrIcon = BloodInheritance_icon_rsc
   vrDesc = BloodInheritance_desc_rsc

   vrSucceed_wav = BloodInheritance_sound

   viMana = 50

   viSpell_num = SID_BLOOD_INHERITANCE
   viSchool = SS_QOR
   viSpell_level = 6

   viSpellExertion = 50
   viCast_time = 20000    % in milliseconds, this is the time it takes the spell to start casting
   viChance_To_Increase = 35

   % Rewrite of this section because a bad template must have been used at some point
   % Variables were in the wrong place forcing them the be ignored and using the default
   % Multi-cast settings rather than actually being able to set the timers here.
   % viCast_time was also listed twice so extra listing was removed to avoid confusion
   viManaDrain = 1       % Drain is amount used every viDrainTime milliseconds
   viDrainTime = 1000    % Drain some mana every viDrainTime milliseconds
   viMultiCast_Spellpower = 3000  % 10 minutes for worst case, 2.3 mins for best case.  This is the time
                                  % it takes for the spell to load the prism as defined for multicast spells   



properties:                     

   % Moved the Class Variable that was written here in to the correct location

messages:      


   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&ShamanBlood,2] ,plReagents);
      plReagents = Cons([&EntrootBerry,2] ,plReagents);
      plReagents = Cons([&OrcTooth,1] ,plReagents);

      return;
   }
   
   CastSpell(who = $, lTargets = $, iSpellPower = 0)
   {
      % Gotta be a weapon.
      if not isClass(first(lTargets),&Weapon)
      {
         Send(who,@MsgSendUser,#message_rsc=BloodInheritance_bad_target);
         return;
      }

      % Can't have any other enchantments.
      if send(first(lTargets),@HasAnyAttribute)
      {
         Send(who,@MsgSendUser,#message_rsc=BloodInheritance_bad_target);
         return;
      }
      
      propagate;
   }

   % Massive clean-up here.  Moved each random outcome to deal with its event seperately
   % rather than passing the variable due to unpredicatable results of passing the variable
   % Also fixed a bug where only Unholy weapons were created and in certain circumstances the 
   % unholy enchant was being deleted.
   PrismCast(iSpellpower = 0, lTargets = $, who = $) 
   {
      local oItem, iRandom;

      iRandom = Random(1,10);

      if iRandom = 1
      {
		 Send(Send(SYS,@FindItemAttByNum,#Num=WA_VAMPER),@AddToItem,#oItem=First(lTargets));
		 
		 return;
      }

      if iRandom = 2
      {
		 Send(Send(SYS,@FindItemAttByNum,#Num=WA_BLINDER),@AddToItem,#oItem=First(lTargets));
		 
		 return;
      }

      if iRandom = 3
      {
		 Send(Send(SYS,@FindItemAttByNum,#Num=WA_PARALYZER),@AddToItem,#oItem=First(lTargets));
		 
		 return;
      }

      if iRandom >= 4
      {
		 Send(Send(SYS,@FindItemAttByNum,#Num=WA_ATTACKSPELLTYPE),@AddToItem,#oItem=first(lTargets),#state1=ATCK_SPELL_UNHOLY,#timer_duration = send(self,@getDuration,#iSpellPower=iSpellPower));
		 
         return;
      }	  
	  	  
	  return;
   }

      GetDuration(iSpellPower=0)
   {
      local iDuration;

      iDuration = random(900,904) + (iSpellPower*900);
      % Basically we use absurd numbers here to make the enchant semi-permanent
      % We convert to hours for the iDuration, essentially the hours convert to several years of time
	  % Duration is added here to deal with AttackSpellType requiring a timer to avoid possible crash
      % scenarios in dealing with several situations where this timer is checked (on reveal for example)
      % There were incidents where reveal was deleting the enchant.  It is best to set the state to avoid
      % cascade of issues later not only with reveal but with future items.	  
      iDuration = iDuration * 1000 * 60 * 60;
      return iDuration;
   }
   
   GetNumSpellTargets()
   {
      return 1;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
