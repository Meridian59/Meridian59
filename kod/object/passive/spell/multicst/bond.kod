% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Bond is MultiCastSpell

constants:

   include blakston.khd
   include protocol.khd

resources:

   Bond_name_rsc = "bond"
   Bond_icon_rsc = ibond.bgf
   Bond_desc_rsc = \
      "Infuses an item with a soft white light.  However, the "
      "bond requires terrific amounts of energy to form.  A heartstone and "
      "dozens of polished serphym and diamonds must be crushed to amplify "
      "the caster's mystical energy, which must then be focused through a "
      "prism.  The item to be bonded must be targetted.  Once the casting "
      "is complete the item will follow its owner to hell itself."
   
   Bond_sound = sbond.wav

   bond_bad_target = "You may only bond items to a player."
   bond_no_prism = "The magic energies of the prism do not allow it to be bonded."
   bond_failed = \
      "You feel the magical bond begin to reach out in vain for one of its targets, "
      "but finding nothing it dissipates."
   bond_already_bonded = "This item is already bonded."

   bond_successful_casters = "You feel a magical bond form between %s%s and %s."
   bond_successful_bondee = "You feel a magical bond form between you and your %s."

   bond_report_room = "Somehow, you sense that your %s is in %s."
   bond_report_user = "Somehow, you sense that your %s is in %q's possession."

classvars:

   vrName = Bond_name_rsc
   vrIcon = Bond_icon_rsc
   vrDesc = Bond_desc_rsc

   vrSucceed_wav = Bond_sound

   viMana = 50

   viSpell_num = SID_BOND
   viSchool = SS_SHALILLE
   viSpell_level = 6

   viSpellExertion = 50
   viCast_time = 20000
   viChance_To_Increase = 66

   % Drain is amount used every viDrainTime milliseconds
   viManaDrain = 1
   viDrainTime = 1000

   % In ms.
   viCast_time = 0    

properties:                     

   % 10 minutes for worst case, 2.3 mins for best case.
   viMultiCast_Spellpower = 6000

messages:      

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&PolishedSeraphym,50],plReagents);
      plReagents = Cons([&Diamond,50],plReagents);
      plReagents = Cons([&Heartstone,1],plReagents);

      return;
   }

   CanPayCosts(who = $, lTargets = $, iSpellPower = 0)
   {
      local oTarget;

      oTarget = First(lTargets);

      if NOT IsClass(oTarget,&Item)
      {
         Send(who,@MsgSendUser,#message_rsc=bond_bad_target);

         return FALSE;
      }

      propagate;
   }

   CastSpell(who = $, lTargets = $, iSpellPower = 0)
   {
      local oTarget;

      oTarget = First(lTargets);

      if NOT IsClass(oTarget,&Item)
      {
         Send(who,@MsgSendUser,#message_rsc=bond_bad_target);

         return FALSE;
      }

      if IsClass(oTarget,&Prism)
      {
         Send(who,@MsgSendUser,#message_rsc=bond_no_prism);

         return FALSE;
      }

      if Send(oTarget,@HasAttribute,#ItemAtt=IA_TRANSCENDANT)
      {
         Send(who,@MsgSendUser,#message_rsc=bond_already_bonded);

         return FALSE;
      }

      propagate;
   }

   PrismCast(spellpower = 0, lCasters=$, lTargets=$) 
   {
      local oOwner, oCaster;
      oOwner = Send(First(lTargets),@GetOwner);

      % The Bond infrastructure was left in, in case we want to use it for
      % something else.  This is the trigger call.
      %Send(oOwner,@BondItem,#what=First(lTargets));

      % So instead of bonding, we are going to make the item transcendent.

      Send(Send(SYS,@FindItemAttByNum,#Num=IA_TRANSCENDANT),@AddToItem,
           #oItem=First(lTargets));

      for oCaster in lCasters
      {
         Send(oCaster,@MsgSendUser,#message_rsc=bond_successful_bondee,
              #parm1=Send(First(lTargets),@GetName));
      }
      
      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   % This message is not used any more.  But since it is part of the whole
   % bond infrastructre I'm leaving it for now.
   % It should eventually be moved somewhere better.
   BondedItemReport(BondedItem=$,BondedPlayer=$,BondedItemOwner=$)
   {
      if BondedPlayer = $
      {
         DEBUG("tried to report to a $ player!");

         return;
      }

      if BondedItem = $
      {
         DEBUG("tried to report to ",Send(BondedPlayer,@GetTrueName)," on a $ item!  Clearing bond.");
         Send(BondedPlayer,@ClearBondedItem);

         return;
      }

      % Check if the item is in its owner's inventory.
      if Send(BondedPlayer,@IsHolding,#what=BondedItem)
      {
         return;
      }

      if BondedItemOwner = $
      {
         BondedItemOwner = Send(BondedItem,@GetOwner);
      }

      if BondedItemOwner = $
      {
         DEBUG(Send(BondedItem,@GetTrueName)," bonded to ",Send(BondedPlayer,@GetTrueName)," has no owner!  Clearing bond.");
         Send(BondedPlayer,@ClearBondedItem);

         return;
      }

      if Send(BondedItem,@GetHits) = 0
      {
         Send(BondedPlayer,@ClearBondedItem);

         return;
      }
      
      if IsClass(BondedItemOwner,&StorageBox)
      {
         BondedItemOwner = Send(SYS,@UtilGetRoomRecurse,#what=BondedItemOwner);
      }

      if IsClass(BondedItemOwner,&Room)
      {
         Send(BondedPlayer,@MsgSendUser,#message_rsc=bond_report_room,
               #parm1=Send(BondedItem,@GetName),
               #parm2=Send(BondedItemOwner,@GetName));

         return;
      }

      if IsClass(BondedItemOwner,&SafetyDepositBox)
      {
         BondedItemOwner = Send(BondedItemOwner,@GetSafeBoxOwner);
      }

      if IsClass(BondedItemOwner,&User)
      {
         Send(BondedPlayer,@MsgSendUser,#message_rsc=bond_report_user,
               #parm1=Send(BondedItem,@GetName),
               #parm2=Send(BondedItemOwner,@GetName),#type2=STRING_RESOURCE);

         return;
      }

      debug(Send(BondedItem,@GetTrueName)," bonded to ",Send(BondedPlayer,@GetTrueName)," not in room or in player's possession!  In ",Send(BondedItemOwner,@GetTrueName));
      Send(BondedPlayer,@MsgSendUser,#message_rsc=bond_report_room,
            #parm1=Send(BondedItem,@GetName),
            #parm2=Send(BondedItemOwner,@GetName));

      return;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
