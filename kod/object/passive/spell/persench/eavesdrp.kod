% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Eavesdrop is PersonalEnchantment

constants:

   include blakston.khd

resources:

   Eavesdrop_name_rsc = "eavesdrop"
   Eavesdrop_icon_rsc = ieavesdr.bgf
   Eavesdrop_desc_rsc = \
      "Riija grants the ability to hear distant conversations, allowing you to spy on others.  "
      "Requires dragonfly eyes."
   
   Eavesdrop_on_rsc = "The sounds of a nearby room fill your mind."
   Eavesdrop_off_rsc = "The distant sounds become impossible to hear."
   Eavesdrop_already_enchanted_rsc = "You are already listening to another room."
   Eavesdrop_no_rooms = "There seem to be no nearby rooms you can listen to."
   Eavesdrop_Success_rsc = "You grant %s%s the ability to eavesdrop."

   Eavesdrop_sound = riija.wav

classvars:

   vrName = Eavesdrop_name_rsc
   vrIcon = Eavesdrop_icon_rsc
   vrDesc = Eavesdrop_desc_rsc

   vrAlreadyEnchanted = Eavesdrop_already_enchanted_rsc
   vrEnchantment_On = Eavesdrop_On_rsc
   vrEnchantment_Off = Eavesdrop_Off_rsc
   vrSuccess = Eavesdrop_Success_rsc

   viSpell_num = SID_EAVESDROP
   viSchool = SS_RIIJA
   viSpell_level = 2
   viMana = 8
   viSpellExertion = 4

   viManaDrain = 1       % Drain is amount used every so often
   
   viChance_To_Increase = 20
   vrSucceed_wav = Eavesdrop_sound

   vbCanCastOnOthers = FALSE

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&DragonflyEye,1],plReagents);

      return;
   }

   CanPayCosts(who = $, lTargets = $, iSpellPower = 0)
   {
      local lRooms;

      lRooms = send(self,@GetYellList,#who=who);
      
      if Length(lRooms) = 0
      {
         Send(who,@MsgSendUser,#message_rsc=Eavesdrop_no_rooms);

         return FALSE;
      }

      propagate;
   }

   StartPeriodicEnchantment( who = $, state = $ )
   {
      % If caster runs out of mana or loses trance, spell ends.
      if send(who,@GetMana) < viManaDrain * 2
      {
         Send(who,@StartEnchantment,#what=self,#time=nth(state,1),
              #state=state,#addicon=False,#lastcall=True);
      }
      else
      {      
         Send(who,@StartEnchantment,#what=self,#time=nth(state,1),
              #state=state,#addicon=False,#lastcall=False);
      }
      
      Send(who,@LoseMana,#amount=viManaDrain);
      
      return;
   }
   
   EndEnchantment(who=$, state=0)
   {
      Send(nth(state,2),@Delete);
      
      propagate;
   }

   BreakTrance( who = $, state = $, event = $, what = $ )
   {
      if event = EVENT_CAST AND what = self
      {
         propagate;
      }
      
      Send(nth(state,2),@Delete);
      Send(who,@RemoveEnchantment,#what=self,#state=state);
      
      propagate;
   }

   SetSpellPlayerFlag(who=$,state=$)
   {
      Send(who,@SetTranceFlag);
      
      return;
   }

   GetDuration(iSpellPower=0)
   {
      local iPower;
      
      iPower = (iSpellPower / 10) * 100;
      
      return 500 + iPower;
   }

   % State value is: list containing the drain time as the first element, and the listener object as the second element.
   %   IE [ drain time (in ms), listener object ]

   GetStateValue(iSpellPower=$,who=$)
   % Create and place the listener.
   {
      local oRoom, lRooms, ilength, iRow, iCol, iDrainTime, oListener;

      lRooms = send(self,@GetYellList,#who=who);

      iLength = Length(lRooms);
      if iLength = 0
      {
         Send(who,@MsgSendUser,#message_rsc=Eavesdrop_no_rooms);
      }
      
      iLength = Random(1,iLength);
      oRoom = Send(SYS,@FindRoomByNum,#num=nth(lRooms,iLength));

      % Use "safe" t'port coords.
      iRow = Send(oRoom,@GetTeleportRow);
      iCol = Send(oRoom,@GetTeleportCol);

      oListener = Create(&Listener,#Enchanted=who,#iSpellpower=iSpellpower);
      Send(oRoom,@NewHold,#what=oListener, #new_row=iRow,#new_col=iCol);
   
      return [send(self,@GetDuration,#iSpellpower=iSpellpower),oListener];
   }

   OfferToNewCharacters()
   {
      return FALSE;
   }

   GetLastCall()
   % Overwrite to false for periodic enchantments.
   {
      return FALSE;
   }
   
   GetYellList(who=$)
   "Returns a list of rooms in the yell zone of who's current location."
   {
      local oRoom, lRooms;
   
      %% Get yell list from current room and select a room to eavesdrop.
      oRoom = Send(who,@GetOwner);
      lRooms = Send(oRoom,@GetYellZone);
      
      %% Eliminate the room we're in, unless there is no yell list.
      if FindListElem(lRooms,Send(oRoom,@GetRoomNum))  
      {
         if lRooms = $ OR length(lRooms) < 2
         {
            lRooms = [oRoom];
         }
         else
         {
            lRooms = DelListElem(lRooms,oRoom);
         }
      }

      return lRooms;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
