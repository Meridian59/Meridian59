% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
AntiMagicAura is RoomEnchantment

constants:

   include blakston.khd

resources:

   AntiMagicAura_name_rsc = "anti-magic aura"
   AntiMagicAura_icon_rsc = iantimag.bgf
   AntiMagicAura_desc_rsc = \
      "Sends a shock wave of magical energy coursing through the room which "
      "reduces the spellpower of other spells cast for several minutes.  "
      "More powerful mages are more effective at casting this spell.  "
      "Requires sapphires and polished seraphym to cast."
   
   AntiMagicAura_unnecessary = \
      "You cannot overcome the anti-magic field in effect."
   AntiMagicAura_reinforced = \
      "The mana field around you is fluctuating more wildly than it was before."

   AntiMagicAura_on = "The mana field begins to fluctuate."
   AntiMagicAura_off = "The mana field returns to normal."
   AntiMagicAura_new_occupant = "The mana field is fluctuating here."

   AntiMagicAura_sound = kantimag.wav

classvars:

   vrIcon = AntiMagicAura_icon_rsc
   vrDesc = AntiMagicAura_desc_rsc
   vrName = AntiMagicAura_name_rsc   

   viSpell_num = SID_ANTIMAGIC_AURA
   viSchool = SS_KRAANAN
   viMana = 15
   viSpell_level = 6

   viCast_time = 600

   vrSucceed_wav = AntiMagicAura_sound

   viChance_To_Increase = 10

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Sapphire,2],plReagents);
      plReagents = Cons([&PolishedSeraphym,1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   CanPayCosts(who = $, lTargets = $, iSpellPower=0)
   {
      local oRoom;

      oRoom = Send(who,@GetOwner);

      % Check if an anti-magic field already exists
      if Send(oRoom,@IsEnchanted,#what=self)
      {
         Send(who,@MsgSendUser,#message_rsc=AntiMagicAura_unnecessary);
         
         return FALSE;
      }

      propagate;
   }

   CastSpell(who = $, iSpellPower = 0)
   "Initiation point for the spell."
   {
      local oRoom;

      oRoom = Send(who,@GetOwner);
      
      % Global effects of the enchantment.
      Send(oRoom,@SomeoneSaid,#type=SAY_MESSAGE,#string=AntiMagicAura_on,
           #what=self);
      Send(oRoom,@RoomStartEnchantment,#what=self,#state=((iSpellPower/2)+25),
           #time=send(self,@GetDuration,#iSpellPower=iSpellpower));
        
      propagate;
   }

   StartEnchantmentNewOccupant(who = $)
   "Called on new occupants of the enchanted room."
   {
      Send(who,@MsgSendUser,#message_rsc=AntiMagicAura_new_occupant);
      
      return;
   }

   RemoveEnchantment()
   "Sent to each user as they leave the room.  Since we didn't enchant them, "
   "nothing to undo."
   {
      return;
   }

   EndSpell(where = $, state = $, report = TRUE)
   "Called when spell expires."
   {
      if report
      {
         Send(where,@SomeoneSaid,#type=SAY_MESSAGE,#string=AntiMagicAura_off,
              #what=self);
      }
      
      propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      iDuration = 60 + iSpellPower;
      iDuration = random(iDuration/2,iDuration);

      % Convert to ms.
      iDuration = iDuration * 1000;

      return iDuration;
   }

   AffectsSpellPower()
   {
      return TRUE;
   }

   ModifySpellPower(oRoom = $, oSpell = $)
   {
      local iChange;

      iChange = 0;

      if oRoom <> $
      {
         iChange = send(oRoom,@GetEnchantedState,#what=self);
      }

      % Spell won't affect Mana Convergence.
      % Allows for an effective counter-spell to AMA.
      if iChange = $
         OR IsClass(oSpell,&ManaConvergence)
      {
         iChange = 0;
      }

      % This is subtracted from spell power in spell.kod
      return iChange;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
