% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%S%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DeathLink is RoomEnchantment

constants:

   include blakston.khd

   DEATHLINK_TIME = 120000       %  2 realtime minutes

resources:

   deathlink_name_rsc = "death link"
   deathlink_icon_rsc = ideathli.bgf
   deathlink_desc_rsc = \
      "This dark spell feeds off the souls of any poor creature that should "
      "happen to fall in your vicinity.  "
      "Requires shaman blood and polished seraphym to cast."
   
   deathlink_already_enchanted = "Someone has already linked themselves to this room."

   deathlink_on = "%s%s looks as if preparing to feed on darkness itself."
   deathlink_off = "The link to death here dissipates."
   deathlink_on_new_entrant = "You feel a cool presence of a cohort of death in the area."

   deathlink_sound = qdeathlk.wav

classvars:

   vrName = deathlink_name_rsc
   vrIcon = deathlink_icon_rsc
   vrDesc = deathlink_desc_rsc

   viSpell_num = SID_DEATH_LINK
   viMana = 20
   viSchool = SS_QOR
   viSpell_level = 5
   viSpellExertion = 10
   viCast_time = 5000

   viChance_To_Increase = 20
   vrSucceed_wav = deathlink_sound

properties:
  
messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&ShamanBlood,1],plReagents);
      plReagents = Cons([&PolishedSeraphym,1],plReagents);

      return;
   }

   DoubleCheckAfterTrance(who = $, lTargets = $)
   {
      local oRoom;

      oRoom = Send(who,@GetOwner);
    
      if Send(oRoom,@CheckRoomFlag,#flag=ROOM_NO_MAGIC)       
      {
         Send(who,@MsgSendUser,#message_rsc=spell_bad_location,#parm1=vrName);

         return FALSE;
      }
      
      if (send(oRoom,@IsEnchanted,#what=self))
      {
         Send(who,@MsgSendUser,#message_rsc=spell_already_in_effect,#parm1=vrName);

         return FALSE;
      }
      
      propagate;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   CanPayCosts(who = $, lTargets = $)
   {
      local oRoom;

      oRoom = Send(who,@GetOwner);

      % Check for enchantment already applied
      if Send(oRoom,@IsEnchanted,#what=self)
      {
         Send(who,@MsgSendUser,#message_rsc=deathlink_already_enchanted);
         
         return FALSE;
      }

      propagate;
   }

   GiveKilledBenefits(caster=$,victim=$)
   {
      local iAmountHPInc, iAmountManaInc;
   
      if Caster = $ OR Victim = $
      {
         return;
      }
   
      iAmountHPInc = Random(1,5);
      iAmountManaInc = Random(1,5);
      if isClass(Victim,&player)
      {
         iAmountHPInc = iAmountHPInc * 4;
         iAmountManaInc = iAmountManaInc * 4;
      }
      
      send(Caster,@GainHealthNormal,#Amount=iAmountHPInc);   
      send(Caster,@GainMana,#Amount=iAmountManaInc);
      
      return;
   }

   CastSpell(who = $, iSpellPower=20)
   {
      local oRoom, duration;

      duration = (70 + iSpellpower + Random(1,30)) * 1000;

      oRoom = Send(who,@GetOwner);

      % global effects of the enchantment
      Send(oRoom,@SomeoneSaid,#type=SAY_MESSAGE,#string=deathlink_on,
           #what=self,#parm1=send(who,@GetCapDef),#parm2=send(who,@GetName));

      Send(oRoom,@RoomStartEnchantment,#what=self,#time=duration,#state=who);
      Send(oRoom,@EnchantAllOccupants,#what=self);

      propagate;
   }

   StartEnchantmentNewOccupant(who = $)
   "Called on new occupants of the enchanted room."
   {
      Send(who,@MsgSendUser,#message_rsc=deathlink_on_new_entrant);
      Send(self,@StartEnchantment,#who=who);
      
      return;
   }

   StartEnchantment(who = $)
   "Starts enchantment effect on one player"
   {
      Send(who,@AddAttackModifier,#what=self);
      
      return;
   }

   EndSpell(where = $, state = $)
   "Called when spell expires."
   {
      Send(where,@SomeoneSaid,#type=SAY_MESSAGE,#string=deathlink_off,
           #what=self);
      Send(where,@UnenchantAllOccupants,#what=self,#state=state);
      
      return;
   }

   EndRoomEnchantment(who = $, state = $)
   "Remove enchantment effects on this occupant"
   {
      Send(who,@RemoveAttackModifier,#what=self);
      return;
   }

   % Stuff we handle to be an attack modifier.

   ModifyHitRoll(who = $,what = $,hit_roll = $)
   {
      return hit_roll;
   }
   
   ModifyDamage(who = $,what = $,damage = $)
   {
      return damage;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
