% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Silence is RoomEnchantment

constants:

   include blakston.khd

resources:

   Silence_name_rsc = "silence"
   Silence_icon_rsc = isilence.bgf
   Silence_desc_rsc = \
      "Muffles all speech preventing spell casting and communication as long as caster concentrates.  "
      "Requires dark angel feathers and purple mushrooms."
   
   Silence_unnecessary = "This area already is already silenced."

   Silence_on = "A curtain of silence falls across the room."
   Silence_off = "The curtain of silence is lifted."
   Silence_new_entrant = "This place is strangely quiet."

   Silence_cant_block_jala_caster = "Your spell fails to silence the singing bard in the area."
   Silence_cant_block_jala_victim = "Your words ring through the silence spell covering the room."
   Silence_blocked_jala_victim = "The silence spell muffles your song."

   Silence_spell_intro = "Qor Level 3: Draws a curtain of Silence over the room, stirring the servants of Qor."

classvars:

   vrName = Silence_name_rsc
   vrIcon = Silence_icon_rsc
   vrDesc = Silence_desc_rsc
   vrSpell_intro = Silence_spell_intro

   viSpell_num = SID_SILENCE
   viSchool = SS_QOR
   viMana = 10
   viSpell_level = 3

   viManaDrain = 10      % Drain is amount used every viDrainTime milliseconds
   viDrainTime = 1000    % Drain some mana every viDrainTime milliseconds
   
   viChance_To_Increase = 10

   viOutlaw = TRUE
   viHarmful = TRUE
   viNoNewbieOffense = TRUE
   
properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&DarkAngelFeather,2],plReagents);
      plReagents = Cons([&PurpleMushroom,1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   CanPayCosts(who = $, lTargets = $)
   {
      local oRoom;

      oRoom = Send(who,@GetOwner);

      if Send(oRoom,@IsEnchanted,#what=self)
      {
   	   Send(who,@MsgSendUser,#message_rsc=Silence_unnecessary);
   	   
	      return FALSE;
      }

      propagate;
   }

   CastSpell(who = $, iSpellPower = 0)
   "Initiation point for the spell."
   {
      local oRoom, lJalaInfo, oJalaSpell, lJalaState;

      oRoom = Send(who,@GetOwner);

      % global effects of the enchantment
      Send(oRoom,@SomeoneSaid,#type=SAY_MESSAGE,#string=Silence_on,#what=self);
      Send(oRoom,@RoomStartEnchantment,#what=self,#state=[who,iSpellPower],
           #time=send(self,@GetDuration,#iSpellPower=iSpellPower),#iSpellPower=iSpellPower,#lastcall=FALSE);
      Send(who,@SetTranceFlag);

      % See if there's a Jala song going on and try to kill it
      % Format of lJalaInfo is: [timer, spell object, state]
      lJalaInfo = send(oRoom,@GetJalaInfo);

      if lJalaInfo <> $
      {
         % Format of lJalaState is: [volume, caster, spellpower]
         lJalaState = Nth(lJalaInfo,3);

         if random(iSpellPower/2,iSpellPower) > Nth(lJalaState,1)
         {
            % We have blocked the Jala song.
            send(Nth(lJalaState,2),@MsgSendUser,#message_rsc=Silence_blocked_jala_victim);
            send(oRoom,@RemoveEnchantment,#what=Nth(lJalaInfo,2));
         }
         else
         {
            % The Jala song continues on!
            send(who,@MsgSendUser,#message_rsc=Silence_cant_block_jala_caster);
            send(Nth(lJalaState,2),@MsgSendUser,#message_rsc=Silence_cant_block_jala_victim);
         }
      }

      propagate;
   }

   BreakTrance(who=$, event=$, state=$, location=$)
   {
      local oRoom;

      if event = EVENT_ATTACK
      {
         return FALSE;
      }

      if location = $
      {
         oRoom = send(who,@GetOwner);
      }
      else
      {
         oRoom = location;
      }
      
      Send(oRoom,@RemoveEnchantment,#what=self);

      propagate;
   }

   StartPeriodicEnchantment(where=$, state=$)
   "Sends enchantment message to room like CastSpell for most room enchantments, "
   "but silent, and done as often as necessary"
    {
      local oCaster;
      
      oCaster = first(state);
   
      % If caster runs out of mana or loses trance, spell ends.
      if send(oCaster,@GetMana) < viManaDrain * 2
      {
         Send(where,@RoomStartEnchantment,#what=self,#time=send(self,@GetDuration,#iSpellPower=Nth(state,2)),
              #state=state,#addicon=FALSE,#lastcall=TRUE);

      }
      else
      {      
         Send(where,@RoomStartEnchantment,#what=self,#time=send(self,@GetDuration,#iSpellPower=Nth(state,2)),
              #state=state,#addicon=FALSE,#lastcall=FALSE);
      }
      
      Send(oCaster,@LoseMana,#amount=viManaDrain);
      
      return;
   }

   StartEnchantmentNewOccupant(who = $)
   "Called on new occupants of the enchanted room."
   {
      Send(who,@MsgSendUser,#message_rsc=Silence_new_entrant);
      
      return;
   }

   EndSpell(where = $, state = $)
   "Called when spell expires."
   {
      Send(where,@SomeoneSaid,#type=SAY_MESSAGE,#string=Silence_off,#what=self);

      return;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      % Better spellpower means longer time between drains.
      iDuration = viDrainTime + ((viDrainTime * iSpellPower) / SPELLPOWER_MAXIMUM);

      return iDuration;
   }

   SpellBannedInArena()
   {
      return TRUE;
   }

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
