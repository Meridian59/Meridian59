% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Umbrella is RoomEnchantment

constants:

   include blakston.khd

resources:

   Umbrella_name_rsc = "umbrella"
   Umbrella_icon_rsc = iumbrela.bgf
   Umbrella_desc_rsc = \
      "Creates a dome of magical energy that protects effectiveness of area spells. "
      "The spell dissipates if caster breaks concentration by running or combat."
      "Requires emeralds to cast."
   
   Umbrella_unnecessary = "This area already has a dome of magical energy."

   Umbrella_on = "A mystic, shimmering dome of light emerges from %s%s's fingertips."
   Umbrella_off = "The dome of magical energy dissipates."
   Umbrella_new_entrant = "You are encompassed by a dome of magical energy."
   
   Umbrella_AMA = "The Anti-Magic Aura causes the dome of magical energy to implode."

classvars:

   vrName = Umbrella_name_rsc
   vrIcon = Umbrella_icon_rsc
   vrDesc = Umbrella_desc_rsc

   viSpell_num = SID_UMBRELLA
   viMana = 15
   viSchool = SS_SHALILLE
   viSpell_level = 5

   viManaDrain = 15      % Drain is amount used every viDrainTime milliseconds
   viDrainTime = 1000    % Drain some mana every viDrainTime milliseconds
   
   viChance_To_Increase = 35
   
   viIndefinite = ARTICLE_AN
   
properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Emerald,2],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   CanPayCosts(who = $, lTargets = $)
   {
      local oRoom;

      oRoom = Send(who,@GetOwner);

      if Send(oRoom,@IsEnchanted,#what=self)
      {
   	   Send(who,@MsgSendUser,#message_rsc=Umbrella_unnecessary);
   	   
	      return FALSE;
      }

      propagate;
   }

   CastSpell(who = $, iSpellPower = 0)
   "Initiation point for the spell."
   {
      local oRoom, oAMA;

      oRoom = Send(who,@GetOwner);
	  
	  % do not allow umbrella to protect Anti-magic aura
	  oAMA = Send(SYS,@FindSpellByNum,#num=SID_ANTIMAGIC_AURA);
      if Send(oRoom,@IsEnchanted,#what=oAMA)
      {
		  Send(who,@MsgSendUser,#message_rsc=Umbrella_AMA);
   	   
	      return FALSE;
      }

      % global effects of the enchantment
      Send(oRoom,@SomeoneSaid,#type=SAY_MESSAGE,#string=Umbrella_on,#what=self);
      Send(oRoom,@RoomStartEnchantment,#what=self,#state=[who,iSpellPower],
           #time=send(self,@GetDuration,#iSpellPower=iSpellPower),#iSpellPower=iSpellPower,#lastcall=FALSE);
      Send(who,@SetTranceFlag);

      propagate;
   }

   BreakTrance(who=$, event=$, state=$, location=$)
   {
      local oRoom;

      if location = $
      {
         oRoom = send(who,@GetOwner);
      }
      else
      {
         oRoom = location;
      }
      
      Send(oRoom,@RemoveEnchantment,#what=self);

      propagate;
   }

   StartPeriodicEnchantment(where=$, state=$)
   "Sends enchantment message to room like CastSpell for most room enchantments, "
   "but silent, and done as often as necessary"
    {
      local oCaster;
      
      oCaster = first(state);
   
      % If caster runs out of mana or loses trance, spell ends.
      if send(oCaster,@GetMana) < viManaDrain * 2
      {
         Send(where,@RoomStartEnchantment,#what=self,#time=send(self,@GetDuration,#iSpellPower=Nth(state,2)),
              #state=state,#addicon=FALSE,#lastcall=TRUE);

      }
      else
      {      
         Send(where,@RoomStartEnchantment,#what=self,#time=send(self,@GetDuration,#iSpellPower=Nth(state,2)),
              #state=state,#addicon=FALSE,#lastcall=FALSE);
      }
      
      Send(oCaster,@LoseMana,#amount=viManaDrain);
      
      return;
   }

   StartEnchantmentNewOccupant(who = $)
   "Called on new occupants of the enchanted room."
   {
      Send(who,@MsgSendUser,#message_rsc=Umbrella_new_entrant);
      
      return;
   }

   EndSpell(where = $, state = $)
   "Called when spell expires."
   {
      Send(where,@SomeoneSaid,#type=SAY_MESSAGE,#string=Umbrella_off,#what=self);

      return;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      % Better spellpower means longer time between drains.
      iDuration = viDrainTime + ((viDrainTime * iSpellPower) / SPELLPOWER_MAXIMUM);

      return iDuration;
   }

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
