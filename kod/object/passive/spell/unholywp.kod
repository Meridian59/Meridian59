% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
UnholyWeapon is Spell

%% Apr 20, 1997 DSchubert
%% Duration is based on spell power (1-25 hours).

constants:
   include blakston.khd

resources:

   unholyweapon_cast_rsc = "Your %s is now dedicated to Qor."
   unholyweapon_no_can = "You cannot dedicate %s%s to Qor."
   unholyweapon_fails = "The %s is strangely unaffected by the spell."
   unholyweapon_already_done = \
   "This weapon is already dedicated to Qor."

   unholyweapon_name_rsc = "unholy weapon"
   unholyweapon_icon_rsc = iunholyw.bgf
   unholyweapon_desc_rsc = \
      "Dedicates your weapon to Qor, enhancing its "
      "effectiveness against the holy.  "
      "Requires fairy wings and orc teeth to cast."

   unholyweapon_spell_intro = "Qor Lv. 2: Dedicates your weapon to Qor, enhancing its effectiveness against the holy."

   unholyweapon_lable_rsc = "suplicant of Qor."

classvars:

   vrName = unholyweapon_name_rsc
   vrIcon = unholyweapon_icon_rsc
   vrDesc = unholyweapon_desc_rsc

   vrEnchantment_type = unholyweapon_lable_rsc

   vrSpell_intro =unholyweapon_spell_intro
   viSpell_num = SID_UNHOLY_WEAPON
   viSchool = SS_QOR

   viSpell_level = 2
   viMana = 17
   viSpellExertion = 20
   viCast_time = 30000

properties:

messages:

   ResetReagents()
   {
      % separate message so can change, then set from admin mode

      plReagents = $;
      plReagents = Cons([&FairyWing,3],plReagents);
      plReagents = Cons([&OrcTooth,1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      % Tell client how many targets this spell needs
      return 1;
   }

   IsTargetInRange(who = $,target = $)
   {
      return who = Send(target, @GetOwner) 
      OR send(who,@getOwner) = send(target,@getowner);  
   }

   CanPayCosts(who = $, lTargets = $, iSpellPower = 0)
   {
      local oWeapon;
      oWeapon = first(lTargets);
      if oWeapon = $ or not isClass(oWeapon,&weapon)
      {
	 Send(who, @MsgSendUser, #message_rsc=unholyweapon_no_can,
	    #parm1=send(oWeapon,@getdef),#parm2=send(oWeapon,@getname));
	 return False;
      }
      if Send(oWeapon,@CheckSpellFlag,#flag=ATCK_SPELL_UNHOLY)
      {
	 Send(who, @MsgSendUser, #message_rsc=unholyweapon_already_done);
	 return False;
      }
      propagate;   % Check other things higher up
   }

   CastSpell(who = $, lTargets = $, iSpellPower = 0)
   {
      local oWeapon, oWeapAtt;

      oWeapon = first(lTargets);
      if oWeapon = $ or not isClass(oWeapon,&weapon)
      {
	 Send(who, @MsgSendUser, #message_rsc=unholyweapon_no_can,
	    #parm1=send(oWeapon,@getdef),#parm2=send(oWeapon,@getname));
	 return False;
      }

      if not Send(oWeapon,@CanEnchant,#oSpell = self)
      {
         Send(who, @MsgSendUser, #message_rsc=spell_resists,
             #parm1=send(oWeapon,@getCapdef),#parm2=send(oWeapon,@getname));
	 return;
      }
      
      if not Send(self,@IsTargetInRange,#who=who,#target=oWeapon)
      {
	 Send(who, @MsgSendUser,#message_rsc=spell_out_of_range, 
	    #parm1=Send(oWeapon,@GetCapDef),#parm2=Send(oWeapon,@GetName));
	 return False;
      }     

      oWeapAtt = send(SYS,@finditemattbynum,#num=WA_ATTACKSPELLTYPE);	  

      send(oWeapAtt,@AddToItem,#oItem=oWeapon, #random_Gen=FALSE,#state1=ATCK_SPELL_UNHOLY, 
	 #timer_duration = send(self,@getDuration,#iSpellPower=iSpellPower),#state3=send(self,@GetMakerInfo,#who=who));

      Send(who, @MsgSendUser, #message_rsc=unholyweapon_cast_rsc,
	 #parm1=Send(oWeapon,@GetName));

	  propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      iDuration = random(1,4) + (iSpellPower/3);
      %% ~( 1 - 37 )
      %%Convert to hours:
      iDuration = iDuration * 1000 * 60 * 60;
      return iDuration;
   }

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
