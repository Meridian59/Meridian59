% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
LightningWall is WallSpell

constants:

   include blakston.khd

resources:

   LightningWall_name_rsc = "lightning wall"
   LightningWall_icon_rsc = iwalllit.bgf
   LightningWall_desc_rsc = \
      "Creates a crackling barrier of electricity.  One who entered such a "
      "field would certainly feel more than thunder.  "
      "Requires blue mushrooms and yxrl to cast."

   LightningWall_cast_rsc = "A wall of lightning appears before you!"
   LightningWall_failed_rsc = \
      "There is too much summoning magic focused here to create a wall of "
      "lightning."

   LightningWall_sound = faren.wav

classvars:

   vrName = LightningWall_name_rsc
   vrIcon = LightningWall_icon_rsc
   vrDesc = LightningWall_desc_rsc

   viSpell_num = SID_LIGHTNING_WALL
   viSchool = SS_FAREN
   viSpell_level = 6
   viMana = 20
   viSpellExertion = 10

   viChance_To_Increase = 25
   viCast_time = 1000
   vrSucceed_wav = LightningWall_sound

   viHarmful = TRUE

   viNumElements = 9

   vrSummonLimitMsg = LightningWall_failed_rsc

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&BlueMushroom,3],plReagents);
      plReagents = Cons([&Yrxlsap,1], plReagents);

      return;
   }

   CastSpell(who = $, lTargets = $, iSpellPower = 0)
   {
      Send(who,@MsgSendUser,#message_rsc=LightningWall_cast_rsc);

      propagate;
   }

   PlaceWallElements(who = $, iSpellPower = 0)
   {
      local oRoom, iRow, iCol, iFine_Row, iFine_Col, iXStep, iYStep,
            iAngle, iMaxDamage, iDuration, iHalfrow, iHalfCol, iHalfFine_Row,
            iHalfFine_Col, oElement;

      iAngle = Send(who,@GetAngle);
      iMaxDamage = iSpellPower / 4;
      iMaxDamage = Bound(iMaxDamage,1,25);
      iDuration = (iSpellPower * 2) + 20;
      iDuration = Bound(iDuration,20,120);

      % Facing East
      if iAngle >= ANGLE_ENE OR iAngle < ANGLE_ESE
      {
         iRow = Send(who,@GetRow) - 2;
         iCol = Send(who,@GetCol) + 1;
         iXStep = 0;
         iyStep = 1;
      }

      % Facing SouthEast
      if iAngle >= ANGLE_ESE AND iAngle < ANGLE_SSE
      {
         iRow = Send(who,@GetRow) - 1;
         iCol = Send(who,@GetCol) + 3;
         iXStep = -1;
         iyStep = 1;
      }

      % Facing South
      if iAngle >= ANGLE_SSE AND iAngle < ANGLE_SSW
      {
         iRow = Send(who,@GetRow) + 1;
         iCol = Send(who,@GetCol) - 2;
         iXStep = 1;
         iyStep = 0;
      }

      % Facing SouthWest
      if iAngle >= ANGLE_SSW AND iAngle < ANGLE_WSW
      {
         iRow = Send(who,@GetRow) + 3;
         iCol = Send(who,@GetCol) + 1;
         iXStep = -1;
         iyStep = -1;
      }

      % Facing West
      if iAngle >= ANGLE_WSW AND iAngle < ANGLE_WNW
      {
         iRow = Send(who,@GetRow) - 2;
         iCol = Send(who,@GetCol) - 1;
         iXStep = 0;
         iYStep = 1;
      }

      % Facing NorthWest
      if iAngle >= ANGLE_WNW AND iAngle < ANGLE_NNW
      {
         iRow = Send(who,@GetRow) + 1;
         iCol = Send(who,@GetCol) - 3;
         iXStep = 1;
         iyStep = -1;
      }

      % Facing North
      if iAngle >= ANGLE_NNW AND iAngle < ANGLE_NNE
      {
         iRow = Send(who,@GetRow) - 1;
         iCol = Send(who,@GetCol) - 2;
         iXStep = 1;
         iyStep = 0;
      }

      % Facing NorthEast
      if iAngle >= ANGLE_NNE and iAngle < ANGLE_ENE
      {
         iRow = Send(who,@GetRow) - 3;
         iCol = Send(who,@GetCol) - 1;
         iXStep = 1;
         iyStep = 1;
      }

      oRoom = Send(who,@GetOwner);

      iFine_Row = Send(who,@GetFineRow);
      iFine_Col = Send(who,@GetFineCol);

      iHalfRow = 0;
      iHalfCol = 0;
      iHalfFine_Row = iFine_Row;
      iHalfFine_Col = iFine_Col;

      if iYStep < 0 
      {
         if iHalfFine_Row > (FINENESS_HALF - 1)
         {
            iHalfFine_Row = iHalfFine_Row - FINENESS_HALF;
         }
         else
         {
            iHalfRow = -1;
            iHalfFine_Row = FINENESS_HALF + iHalfFine_Row;
         }
      }

      if iYStep > 0 
      {
         if iHalfFine_Row < (FINENESS_HALF + 1)
         {
            iHalfFine_Row = iHalfFine_Row + FINENESS_HALF;
         }
         else
         {
            iHalfRow = 1;
            iHalfFine_Row = iHalfFine_Row - FINENESS_HALF;
         }
      }
      if iXStep < 0 
      {
         if iHalfFine_Col > (FINENESS_HALF - 1)
         {
            iHalfFine_Col = iHalfFine_Col - FINENESS_HALF;
         }
         else
         {
            iHalfCol = -1;
            iHalfFine_Col = FINENESS_HALF + iHalfFine_Col;
         }
      }

      if iXStep > 0 
      {
         if iHalfFine_Col < (FINENESS_HALF + 1)
         {
            iHalfFine_Col = iHalfFine_Col + FINENESS_HALF;
         }
         else
         {
            iHalfCol = 1;
            iHalfFine_Col = iHalfFine_Col - FINENESS_HALF;
         }
      }

      oElement = Create(&WallOfLightning,#MaxDamage=iMaxDamage,#Caster=who,
                        #Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow,#new_col=iCol,
           #fine_row=iFine_Row,#fine_col=iFine_Col);

      oElement = Create(&PassiveWallOfLightning,#MaxDamage=iMaxDamage,
                        #Caster=who,#Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+iHalfRow,#new_col=iCol+iHalfCol,
           #fine_row=iHalfFine_Row,#fine_col=iHalfFine_Col);

      oElement = Create(&WallOfLightning,#MaxDamage=iMaxDamage,#Caster=who,
                        #Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+iYStep,#new_col=iCol+iXStep,
           #fine_row=iFine_Row,#fine_col=iFine_Col);

      oElement = Create(&PassiveWallOfLightning,#MaxDamage=iMaxDamage,
                        #Caster=who,#Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+iYStep+iHalfRow,#new_col=iCol+iXStep+iHalfCol,
           #fine_row=iHalfFine_Row,#fine_col=iHalfFine_Col);

      oElement = Create(&WallOfLightning,#MaxDamage=iMaxDamage,#Caster=who,
                        #Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+2*iYStep,#new_col=iCol+2*iXStep,
           #fine_row=iFine_Row,#fine_col=iFine_Col);

      oElement = Create(&PassiveWallOfLightning,#MaxDamage=iMaxDamage,
                        #Caster=who,#Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+(2*iYStep)+iHalfRow,#new_col=iCol+(2*iXStep)+iHalfCol,
           #fine_row=iHalfFine_Row,#fine_col=iHalfFine_Col);

      oElement = Create(&WallOfLightning,#MaxDamage=iMaxDamage,#Caster=who,
                        #Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+3*iYStep,#new_col=iCol+3*iXStep,
           #fine_row=iFine_Row,#fine_col=iFine_Col);

      oElement = Create(&PassiveWallOfLightning,#MaxDamage=iMaxDamage,
                        #Caster=who,#Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+(3*iYStep)+iHalfRow,#new_col=iCol+(3*iXStep)+iHalfCol,
           #fine_row=iHalfFine_Row,#fine_col=iHalfFine_Col);

      oElement = Create(&WallOfLightning,#MaxDamage=iMaxDamage,#Caster=who,
                        #Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+4*iYStep,#new_col=iCol+4*iXStep,
           #fine_row=iFine_Row,#fine_col=iFine_Col);

      propagate;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
