% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Statue is PassiveObject

constants:

   include blakston.khd
   include protocol.khd

   POSE_PUNCH = 1
   POSE_NONE = 2
   POSE_CAST = 3   
   POSE_WEAPON_ATTACK = 4
   POSE_BOW_ATTACK = 5

   COLOR_BLUE = 1
   COLOR_GREEN = 2
   COLOR_YELLOW = 3

resources:
 
   Statue_name_rsc = "statue"
   Statue_desc_rsc = "This is a statue of %q, a great adventurer."

   statue_default_male_icon = bta.bgf
   statue_default_male_larm = bla.bgf
   statue_default_male_rarm = bra.bgf
   statue_default_male_legs = bfa.bgf

   statue_default_female_icon = btb.bgf
   statue_default_female_larm = blb.bgf
   statue_default_female_rarm = brb.bgf
   statue_default_female_legs = bfb.bgf

   statue_default_sword = swordov.bgf
   statue_default_shield = rshield.bgf
   
classvars:

properties:

   piDrawFX = DRAWFX_SECONDTRANS

   vrDesc = Statue_desc_rsc
   vrName = statue_name_rsc
   vrIcon = statue_default_male_icon

   poOriginal = $         % Who the Statue is of.
   piPose = POSE_NONE
   piExpression = 1
   prToupee = $
   prEyes = $
   prMouth = $
   prNose = $
   prHead = $
   prRight_arm = $
   prLeft_arm = $
   prLegs = $
   pbIsHairVisible = $
   prFacialOverlay = $

   prWeapon = statue_default_sword
   prShield = statue_default_shield
   prBowTop = $
   
   piIcon_frame = 1
   piLegs_frame = 1
   piLeft_frame = 1
   piRight_frame = 1
   piShield_frame = 1
   piWeapon_frame = 1

   piShield_hotspot = HS_LEFT_WEAPON

   piIcon_translation = 0
   piLegs_translation = 0
   piArms_translation = 0
   piWeapon_translation = 0
   piShield_translation = 0
   piSkin_translation = 3
   piHair_translation = PT_GRAY_TO_BGREEN

   piGender = GENDER_MALE

   piOverlays = 8
   piColor = 0

messages:

   ShowDesc()
   {
      Addpacket(4,vrDesc);
      AddPacket(STRING_RESOURCE,Send(poOriginal,@GetTrueName));

      return;
   }

   ConstructorSpecial(desc=$, name=$, gender=$, color = 0)
   {
      local iRand, i, original, tries, lUsers, oUser;
      
      if gender <> $
      {
         piGender = gender;
      }

      piColor = color;
      i = send(SYS,@FindUserByString,#string=name);
      if i <> $
      {
         %% see if someone with this name exists in the database
         original = i;
         send(self,@SetStatue,#Original=original);
      }
      else
      {
         %% no one with this name exists in the database.  Let's grab someone 
         %% of the same gender at random

         tries = 0;
         lUsers = send(SYS,@GetUsers);
         while tries < 10
         {
            if length(lUsers) >= 1
            {
               iRand = random(1,length(lUsers));
               oUser = nth(lUsers,iRand);
               if (send(oUser,@getGender) = gender) and not (IsClass(oUser,&DM) and Send(oUser,@IsMorphed))
               {	    	       
         	      send(self,@SetStatue,#original=oUser,#name=name);

                  break;
               }
            }

            tries = tries + 1;
         }	 

         %% Last ditch, use defaults.  May be necessary for some statues.
         if poOriginal = $
         {
            send(self,@SetStatue,#original=first(lUsers),#name=name);
         }
      }
            
      % Now set correct information.
      if name <> $
      {
         vrName = name;
      }

      if desc <> $
      {
         vrDesc = desc;
      }

      return;      
   }

   Constructor(original = $, default = FALSE,desc = $,special=FALSE, specialname = $, specialgender = GENDER_MALE)
   {     
      if special
      {
         send(self,@ConstructorSpecial,#desc=desc,#name=specialname,#gender=specialgender,#color = special);

         propagate;
      }

      if desc <> $  { vrDesc = desc; }
      
      if default
      {
         if send(SYS,@GetUsers) <> $
         {
            original = first(send(SYS,@GetUsers));
         }
      }

      if original <> $
      {
         send(self,@SetStatue,#Original=original);
         vrName = Statue_name_rsc;
         piGender = Send(original,@GetGender);
      }

      propagate;
   }

   Delete()
   {
      poOriginal = $;

      propagate;
   }

   ResetFrames()
   {
      if piPose = POSE_PUNCH
      {	 
         piIcon_frame = 4;
         piLeft_frame = 6;
         piRight_frame = 14;
         piLegs_frame = 6; 
         piOverlays = 8;
         if prShield <> $
         {
            piShield_frame = 2;
            piOverlays = piOverlays + 1;
         }
      }

      if piPose = POSE_CAST
      {
         piIcon_frame = 1;
         piLeft_frame = 8;
         piRight_frame = 11;
         piLegs_frame = 1; 
         piOverlays = 8;         
      }

      if piPose = POSE_NONE
      {
         piIcon_frame = 1;
         piLeft_frame = 1;
         piRight_frame = 1;
         piLegs_frame = 1; 
         piOverlays = 8;         

         if prShield <> $
         {
            piShield_frame = 2;
            piLeft_frame = 7;
            piOverlays = piOverlays + 1;
         }

         if prWeapon <> $
         {
            piWeapon_frame = 4;
            if prBowTop <> $
            {  
               piWeapon_frame = 2;
               piLeft_frame = 7;
            }
            else
            {
               piRight_frame = 17;
            }

            piOverlays = piOverlays + 1;
         }
      }

      if piPose = POSE_WEAPON_ATTACK
      {
         if prWeapon = $
         {
            send(self,@ResetPose,#pose=POSE_PUNCH);

            return;
         }

         if prBowTop <> $
         {
            send(self,@ResetPose,#pose=POSE_BOW_ATTACK);

            return;
         }

         piIcon_frame = 3;
         piLeft_frame = 5;
         piRight_frame = 5;
         piLegs_frame = 6; 
         piOverlays = 9;         

         if prShield <> $
         {
            piShield_frame = 2;
            piOverlays = piOverlays + 1;
         }

         piWeapon_frame = 2;
      }

      if piPose = POSE_BOW_ATTACK
      {
         if prBowTop = $
         {
            send(self,@ResetPose,#pose=POSE_CAST);

            return;
         }

         piIcon_frame = 5;
         piLeft_frame = 9;
         piRight_frame = 16;
         piLegs_frame = 7; 
         piOverlays = 10;         
         piWeapon_frame = 1;

         if prShield <> $
         {
            piShield_frame = 2;
            piOverlays = piOverlays + 1;
         }
      }

      if prFacialOverlay <> $
      {
         piOverlays = piOverlays + 1;
      }

      if not pbIsHairVisible
      {
         piOverlays = piOverlays - 1;
      }

      return;
   }

   ResetPose(pose=0)
   {
      piPose = pose;
      send(self,@ResetFrames);

      if poOriginal = $
      {
         return;
      }

      piIcon_translation = send(poOriginal,@GetBodyTranslation);         
      piLegs_translation = send(poOriginal,@GetLegsTranslation);         
      piArms_translation = send(poOriginal,@GetArmsTranslation);         
      piHair_translation = send(poOriginal,@getHairColor);
      piSkin_Translation = send(poOriginal,@GetSkinColor);      

      piExpression = send(poOriginal,@GetExpression);         
      if poOwner <> $
      {
         send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   ValidateGraphics()
   {
      % For those odd non-character admins
      if (poOriginal <> $) AND IsClass(poOriginal,&DM)
         AND Send(poOriginal,@IsMorphed) AND (vrIcon <> admin_icon_blank)
      {
         % Making the head blank will eliminate the face elements,
         %  but blank them all out anyway.
         prHead = admin_icon_blank;
         prEyes = admin_icon_blank;
         prMouth = admin_icon_blank;
         prNose = admin_icon_blank;
         prToupee = admin_icon_blank;
         prLeft_arm = admin_icon_blank;
         prRight_arm = admin_icon_blank;
         prLegs = admin_icon_blank;
      }

      if piGender = GENDER_MALE
      {
         if prhead = $
         {  prHead =  charinfo_head_ax_icon;    }
      
         if prEyes = $   
         {  prEyes = charinfo_eyes_ax_icon;    }

         if prMouth = $
         {  prMouth = charinfo_mouth_cx_icon;    }

         if prNose = $
         {  prNose = charinfo_nose_cx_icon;    }

         if prToupee = $
         {  prToupee = charinfo_hair_ad_icon;    }

         if (vrIcon = $) or (vrIcon = admin_icon_blank)
         {  vrIcon = statue_default_male_icon;   }

         if prLeft_arm = $
         {  prLeft_arm = statue_default_male_larm;   }

         if prRight_arm = $
         {  prRight_arm = statue_default_male_rarm;   }

         if prLegs = $
         {  prLegs = statue_default_male_legs;   }
      }
      else
      {
         % Female
         if prhead = $
         {  prHead = charinfo_head_kx_icon;    }
      
         if prEyes = $   
         {  prEyes = charinfo_eyes_kx_icon;    }

         if prMouth = $
         {  prMouth =  charinfo_mouth_lx_icon;  }

         if prNose = $
         {  prNose = charinfo_nose_mx_icon;    }

         if prToupee = $
         {  prToupee = charinfo_hair_cb_icon;  }

         if (vrIcon = $) or (vrIcon = admin_icon_blank)
         {  vrIcon = statue_default_female_icon;   }

         if prLeft_arm = $
         {  prLeft_arm = statue_default_female_larm;   }

         if prRight_arm = $
         {  prRight_arm = statue_default_female_rarm;   }

         if prLegs = $
         {  prLegs = statue_default_female_legs;   }
      }

      if StringEqual(vrName,"Q")
      {
         prToupee = player_toupee_q_rsc;
      }

      return;
   }

   SetStatue(original = $)
   {      
      local oWeapon, oShield;

      if original = $ OR NOT IsClass(original,&User)
      {
         return;
      }

      poOriginal = original;
      piPose = random(1,4);
      vrName = Statue_name_rsc;

      vrIcon = send(poOriginal,@GetIcon,#trueicon=TRUE);
      prLeft_arm = send(poOriginal,@GetLeftArmRsc);
      prRight_arm = send(poOriginal,@GetRightArmRsc);
      prLegs = send(poOriginal,@GetLegsRsc);

      prHead = send(poOriginal,@GetHeadRsc);      
      prEyes = send(poOriginal,@GetEyesRsc);
      prMouth = send(poOriginal,@GetMouthRsc);
      prNose = send(poOriginal,@GetNoseRsc);
      prToupee = send(poOriginal,@GetHairRsc);
      send(self,@ValidateGraphics,#gender=Send(poOriginal,@GetGender));

      prFacialOverlay = Send(poOriginal,@GetFacialOverlay);
      pbIsHairVisible = Send(poOriginal,@IsHairVisible);

      oWeapon = send(poOriginal,@LookUpPlayerWeapon);

      prShield = send(poOriginal,@GetShieldRsc);
      if prShield <> $
      {
         oShield = Send(poOriginal, @LookupPlayerShield);
         piShield_hotspot = Send(oShield, @GetOverlayHotspot);
      }

      prBowTop = $; 
      if oWeapon <> $ AND isClass(oWeapon,&RangedWeapon)
      {
         prBowTop = send(oWeapon,@GetSecondOverlay);
      }

      if oWeapon <> $
      {  
         prWeapon = send(oWeapon,@GetOverlay);  
      }
      else
      {
         prWeapon = $;
      }
      
      send(self,@ResetPose,#pose=piPose);

      return;
   }
   
   SendAnimation()
   {
      if (piIcon_translation) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piIcon_translation);
      }

      AddPacket(1,ANIMATE_NONE,2,piIcon_frame);

      return;
   }

   UpgradeStatue()
   {

      % We added the ability to show facial overlays (patch 1.3.2 / client 732).
      % To upgrade the statue we reset the frames having first correctly set the new properties.
      % This function to be removed after it has been run via "send class" from admin mode on the server.
      prFacialOverlay = Send(poOriginal,@GetFacialOverlay);
      pbIsHairVisible = Send(poOriginal,@IsHairVisible);
      Send(self,@ResetFrames);
      return;
   }

   SendOverlays()
   {
      local iSkin_xlat;

      % Send overlay bitmap info to user.  

      % Player has 8 standard overlays: right arm, left arm, legs, head, eyes, 
      % mouth, nose, hair
      
      %% number of overlays
      AddPacket(1, piOverlays);

      %% left hand      
      AddPacket(4,prLeft_arm,1,HS_LEFT_HAND);
      if piArms_translation <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piArms_translation);
      }      

      AddPacket(1,ANIMATE_NONE,2,piLeft_frame);  

      %% right hand
      AddPacket(4,prRight_arm,1,HS_RIGHT_HAND);
      if piArms_translation <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piArms_translation);
      }

      AddPacket(1,ANIMATE_NONE,2,piRight_frame);  

      %% legs
      AddPacket(4,prLegs,1,HS_LEGS);
      if piLegs_translation <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piLegs_translation);
      }      

      AddPacket(1,ANIMATE_NONE,2,piLegs_frame);  

      %% face
      iSkin_xlat = piSkin_translation;
      AddPacket(4,prHead,1,HS_HEAD,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,1);
      AddPacket(4,prMouth,1,HS_MOUTH,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,piExpression);
      AddPacket(4,prEyes,1,HS_EYES,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,piExpression);
      AddPacket(4,prNose,1,HS_NOSE,1,ANIMATE_TRANSLATION,1,iSkin_xlat,1,ANIMATE_NONE,2,1);

      if pbIsHairVisible
      {
         AddPacket(4,prToupee,1,HS_TOUPEE,1,ANIMATE_TRANSLATION,1,piHair_translation,1,ANIMATE_NONE,2,1);
      }

      if prShield <> $ and piPose <> POSE_CAST
      {
         AddPacket(4,prShield,1, piShield_hotspot);

         if piShield_translation <> 0
         {
            AddPacket(1,ANIMATE_TRANSLATION,1,piShield_translation);
         }      

         AddPacket(1,ANIMATE_NONE,2,piShield_frame);  
      }

      if prWeapon <> $ AND (piPose <> POSE_CAST AND piPose <> POSE_PUNCH)
      {
         if piPose=POSE_BOW_ATTACK
         {
            AddPacket(4,prWeapon,1,HS_BOTTOM_BOW);

            if piWeapon_translation <> 0
            {
               AddPacket(1,ANIMATE_TRANSLATION,1,piWeapon_translation);
            }      

            AddPacket(1,ANIMATE_NONE,2,piWeapon_frame);  
            AddPacket(4,prBowTop,1,HS_TOP_BOW);

            if piWeapon_translation <> 0
            {
	            AddPacket(1,ANIMATE_TRANSLATION,1,piWeapon_translation);
            }      

            AddPacket(1,ANIMATE_NONE,2,PiWeapon_frame);              
         }
         else
         {
            AddPacket(4,prWeapon);
            if prBowTop <> $
            {
               AddPacket(1,HS_BOTTOM_BOW);
            }
            else
            {
               AddPacket(1,HS_RIGHT_WEAPON);
            }

            if piWeapon_translation <> 0
            {
               AddPacket(1,ANIMATE_TRANSLATION,1,piWeapon_translation);
            }
      
            AddPacket(1,ANIMATE_NONE,2,piWeapon_frame);  
         }
      }

      if prFacialOverlay <> $
      {
         Send(prFacialOverlay,@SendOverlayInformation,#iAnimation = $);
      }

      return;
   }

   GetOriginal()
   {
      return poOriginal;
   }  

   GetObjectFlags()
   {
      local iFlags;
      iFlags = piDrawFX;
      
      if piColor = COLOR_GREEN
      {
         iFlags = iFlags | PLAYER_SUPER | FALSEPLAYER_YES | USER_YES ;
      }

      if piColor = COLOR_BLUE
      {
         iFlags = iFlags | PLAYER_DM | FALSEPLAYER_YES | USER_YES ;
      }

      if piColor = COLOR_YELLOW
      {
         iFlags = iFlags | PLAYER_CREATOR | FALSEPLAYER_YES | USER_YES;
      }

      return iFlags;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
