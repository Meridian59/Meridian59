% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

TreasureType is PassiveObject

constants:
   
   include blakston.khd
   
resources:
  
classvars:


properties:
   
   piTreasure_num	        % treasure type id
   plTreasure = $		     % list of treasures

   piDiff_seed = 0
   piItem_att_chance = 0
   
messages:
   
   Constructed()
   {
      local iAdjust, iValue, iTotal, lItem;
      
      if piTreasure_num = $
      {
         debug("Treasure type created with no treasure type id");
         
         propagate;
      }

      % normalize treasure wieghts to total 100%
      if plTreasure <> $
      {
         iAdjust = 0;

         for lItem in plTreasure
         {
            iAdjust = iAdjust + nth(lItem,2);
         }

         if iAdjust = 0
         {
            iAdjust = 100;
         }

         iTotal = 0;

         % normalize total to approx. 100
         for lItem in plTreasure
         {
            iValue = (nth(lItem,2)*100)/iAdjust;
            Setnth(lItem,2,iValue);
            iTotal = iTotal + iValue;
         }            

         if iTotal < 100
         {
            % correct for integer division roundoff, adding extra to first element
            Setnth(first(plTreasure),2,nth(first(plTreasure),2)+100-iTotal);  
         }
      }
      
      Send(SYS,@SystemNewTreasureType,#what=self);
      
      propagate;
   }

   TestAttGenerator(diff_seed=0,who=$)
   "A test procedure that I use to call the below procedure.  It puts the "
   "result in my inventory."
   {
      local oItem;
      
      oItem = send(self,@GenerateItemAtt,#diff_seed=diff_seed,#who=who);
      
      if oItem <> $
      {
         send(who,@NewHold,#what=oItem);
      }
      else 
      {
         debug("Problems, boss!");
      }

      return;
   }

   GenerateItemAtt(diff_seed=0, raw=FALSE, who = $)
   {
      local diff_bonus, random_x, i, index, iChoice, oItem, oItemAtt, lOptions;

      %% The diff seed tells the basic (lowest) level of difficulty that killing
      %% this monster will generate.  A random formula can add or subtract 1 to 5 from 
      %% that value.  The final value is bounded from 1 to 10.

      diff_bonus = send(self,@GetRandomDiffBonus);

      if random(1,100) < 50
      {
         diff_bonus = -diff_bonus;
      }
      
      if raw
      {
         diff_bonus = 0;
      }

      diff_seed = bound(diff_seed + diff_bonus,1,10);
      
      %% system stores a list of weapon atts at each difficulty level.  Choose one.
      %% if it returns nil list (which should never happen), subtract one and choose again.
      
      lOptions = $;
      while lOptions = $
      {
         lOptions = send(SYS,@GetitemAttTreasureList,#diff_seed=diff_seed);

         diff_seed = diff_seed - 1;  

         if diff_seed < 1
         {
            diff_seed = 10;
         }
      }

      %% you now have a list of options.  Choose one.

      index = 0;

      for i in lOptions
      {
         index = index + nth(i,2);      
      }
      
      random_x = random(1, index);
      
      iChoice = $;
      
      for i in lOptions
      {
         random_x = random_x - nth(i,2);
         if random_x <= 0
         {
            iChoice = first(i);
            
            break;
         }
      }
      
      if iChoice = $
      {
         return $;
      }

      oItemAtt = send(SYS,@FindItemAttByNum,#num=iChoice);
      
      %% ask that ItemAtt to generate an item with this attribute.
      oItem = send(oItemAtt,@GenerateItemWithAttribute, #who=who);
             
      return oItem;       
   }

   GetRandomDiffBonus(random_x = $)
   {
      local index_y, i;

      %% Each Treasure Type tells what level of difficulty weapon
      %% att is generated.  TresType then takes that level of difficulty (a number from 1-10).
      %% and sees if a bonus from 1-5 should be added.  The formula is x = sqrt(100/(random(1,100)+1)) - 1.
      %% this results in the following odds
      %%
      %%      no bonus  76%
      %%      +1 diff   13%            
      %%      +2 diff    5%          
      %%      +3 diff    2%          
      %%      +4 diff    2%
      %%      +5 diff    1%
      %%
      %% Note that almost no treasure type has a base difficulty greater than 5, making high difficulty
      %% weapons exceedingly, exceedingly rare.

      if random_x = $
      {
         random_x = random(1,100);
      }
      
      index_y = 100/(random_x + 1);
      
      i = 1;
      while i < 9
      {
         if (index_y) < (i * i)
         {
            return bound(i - 2,0,5);
         }

         i = i + 1;
      }
      
      debug("this shouldn't have happened");
      
      return -1;
   }

   GetTreasureTypeNum()
   {
      return piTreasure_num;
   }

   GenerateTreasure(level=1,who=$,mob=$,tokengen=TRUE,corpse=$)
   {
      local lItem_info, iRnd, iCount, oObj, iNumber;

      % Check for a token generation here
      if who <> $
         AND Send(SYS,@GetTokenGame) <> $ AND tokengen
         AND Random(1,100) <= TOKEN_GENERATION_CHANCE 
      {
         %find open token looks for one in the given room.
         oObj=Send(Send(SYS,@GetTokenGame),@FindOpenToken,
                   #location=Send(who,@GetOwner));
                   
         if oObj <> $ AND IsClass(who,&User) AND Send(who,@PlayerIsIntriguing)
         {
            Send(oObj,@TokenRealized,#who=who,#mob=mob);
            
            return oObj;
         }
      }

      %Check for the newbie signet ring, do we have an eligible newbie?

      if who <> $ AND isClass(who,&User)
         AND Send(SYS,@GetLibrary)<>$
         AND random(1,100) <= Send(Send(SYS,@GetLibrary),@GetSignetChance)
         AND NOT Send(who,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE)
         AND Send(Send(SYS,@GetLibrary),@IsNewbieSignetEligible,#who=who)
      {
         %%% one more check.  only the default region makes these
         if RID_DEFAULT = send(send(who,@GetOwner),@GetRegion)
         {                         
            %Ok, things are good, lets generate that signetring.
            oObj=Send(Send(SYS,@GetLibrary),@CreateSignetRing,#who=who);
            
            if oObj <> $
            {
               return oObj;
            }
         }       
      }

      %%% Item Attributed weapons:  each trestype has two values:
      %%% a Difficulty Seed which determines the level of itematt
      %%% applied to a weapon, and a chance out of 400 
      %%% that a weapatt will appear.
     
      if piDiff_seed > 0
      {
         if who <> $ and IsClass(who,&User)
            AND random(1,400) <= (Send(Send(SYS, @GetSettings), @GetMagicItemModifier) *
                                    piItem_Att_chance) / 100 
         {         
            oObj = Send(self,@GenerateItemAtt,#who=who,#diff_seed=piDiff_seed);
            if oObj <> $
            {
               return oObj;
            }
         }         
      }
      
      iCount=0;
      iRnd = Random(0,100);
      for lItem_info in plTreasure
      {
         iCount = iCount+Nth(lItem_info,2);
         if iRnd <=iCount
         {
            if isClass(who,&Monster) or isClass(corpse,&OrcPitBossBody)
            {
               oObj = Create(First(lItem_info));
            }
            else
            {
               oObj = Create(First(lItem_info),#corpse=corpse);
            }

            if isClass(oObj,&Money)
            {
               iNumber = (Send(Send(SYS, @GetSettings), @GetMoneyFactor) * 2 *
                  Bound(Random(level/2,3*level/2),1,$))/100;
            
               Send(oObj,@AddNumber,#number=iNumber);
            }
            
            return oObj;
         }
      }

      debug("Create treasure didn't get an object");
      return $;
   }
   
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


