% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
AssassinGame is UtilityFunctions

constants:
   
   include blakston.khd
   include protocol.khd

   % Chance to hit with the dagger.
   ASSASSIN_HIT_CHANCE = 50

   % ten minutes
   MAINTENANCE_TIME = 600000

   % One day
   GAME_WAIT_MIN =  86400000
   % One and one half Days - can't be higher!
   GAME_WAIT_MAX = 134200000
   % Six Hours
   GAME_ACCEPT_MIN = 21600000
   % Twelve hours
   GAME_ACCEPT_MAX = 43200000
   % One day
   GAME_DAY = 86400000

   % Players must spend an average of 3 hours per day online. 
   MINIMUM_TIME_ONLINE = 10800

resources:

   assgame_impact = "~IThe black dagger shatters upon impact!"
   assgame_blade_shivers = "~IThe black dagger shivers ominously in your hand."

   assgame_Mail_reset = \
      "It turns out that the man you knew as Roq was an imposter.  Naturally, "
      "the pretender was assassinated.  A match will start anew soon enough."
      "\n\n"
      "-- Roq, the Dark Blade"

   assgame_winner = "### %s has won the challenge of the black blades."
   assgame_prize = \
      "~BFor your assassin's game victory you have been awarded %s%s."
   assgame_go = "~IYour dagger gains an unearthly glow about it."
   assgame_urge = "~IYou have this urge to go and visit Roq."

   assgame_mail_not_enough = "Subject: You have been expelled.\n"
      "You have been expelled from the Assassin's Circle as "
      "you seem too craven to spend time in this world to take part "
      "in the proceedings.\n\n-- Roq, the Dark Blade"

   assgame_mail_no_kills = "Subject: I expect more action soon.\n"
      "Two days have passed without a kill in the Assassin's Game.  "
      "Should a third pass, I will show my contempt by ending the "
      "game without declaring a winner.\n\n-- Roq, the Dark Blade"

   AssGame_mail_disgrace = "Subject: The game is ended in disgrace.\n"
      "Know the face of your own disgrace.  For lack of action, "
      "I have ended the Assassin's Game.  No one wears the mantle of "
      "Assassin Supreme.\n\n-- Roq, the Dark Blade"

   AssGame_mail_winner = "Subject: One has risen above the others.\n"
      "%q has won the challenge of the dark blades.\n\n"
      "-- Roq, the Dark Blade"
   
   Assgame_go_wav = assassin.wav
   AssGame_roq = "Roq, the Dark Blade"

classvars:

properties:

   pbAssassin_game_enabled = TRUE
   pbGame_in_session = FALSE
   ptMaintenance = $

   % This is a list of players who are notified when a game's about to start.
   plAdvertise = $

   % If Game_in_session = TRUE, this is a list of everyone who is in on the
   %  match.  If game_in_session = FALSE, it's everyone who is going to be in
   %  on the next one.
   plCombatants = $

   pbAccept_mode = FALSE

   % This timer controls game timing.
   ptGame = $

   % How many days this particular match has lasted.
   piDays = 0

   % At what time did this match start?  Used to determine deadweight.
   piStartTime = 0

   piKills = 0
   % If the assassin's game goes three days without kills, Roq ends it.
   piDays_without_kills = 0

   piGame_wait_min = GAME_WAIT_MIN
   piGame_wait_max = GAME_WAIT_MAX

   piGame_accept_min = GAME_ACCEPT_MIN 
   piGame_accept_max = GAME_ACCEPT_MAX 
   piGame_day = GAME_DAY

   % Who was the last combatant?
   poWinner_lastgame = $

   % Who got the most kills?  [player,player...]
   plMost_kills_lastgame = $

   % How many kills did they get?
   piNum_kills_lastgame = 0


   % Who got the most kills?  [player,player...]
   plMost_kills = $
   % How many kills did they get?
   piNum_kills = 0

   % This is an optional prize awarded to the winner of the game.
   poPrize = $                

messages:

   %%%  Maintenance and cleanup.

   Constructor()
   {
      local iValue;

      ptMaintenance = CreateTimer(self,@MaintenanceTimer,MAINTENANCE_TIME);
      iValue = Bound(Random(piGame_Wait_Min,piGame_Wait_Max),1,MAX_INT);
      ptGame = CreateTimer(self,@GameTimer,iValue);
      
      return;
   }

   GameTimer()
   "When this goes off, try to change game modes."
   "Note: the timer is restarted in each of the child functions (startgame "
   "and EnterAcceptMode) so that these functions can be called artificially."
   {
      local i;

      ptGame = $;
      piDays = piDays + 1;

      if NOT Send(self,@InAcceptMode) AND NOT Send(self,@InSession)
      {
         % The game is not in accept mode, and the game is not in session.
         %  Enter accept mode and let new players into the match.
         Send(self,@EnterAcceptMode);
         
         return;
      }
      
      if Send(self,@InAcceptMode)
      {
         % Tell the game to start itself.
         Send(self,@StartGame);
         
         return;
      }
      
      % A game is in session, and has been for quite some time.
      %  Kick out the deadwood players 
      for i in plCombatants
      {
         Send(self,@CheckForDeadWeight,#who=i);
         
         if NOT Send(self,@InSession)
         {
            % Game is no longer valid, but a new timer has already been
            %  restarted.
            return;
         }
      }
      
      if piKills = 0
      {
         piDays_without_kills = piDays_without_kills + 1;
      }
      else
      {
         piDays_without_kills = 0;
      }

      if piDays_without_kills = 2
      {
         for i in plCombatants
         {
            Send(i,@ReceiveNestedMail,#nest_list=[4,assgame_mail_no_kills],
                 #from=assgame_roq,#dest_list=[i]);
         }
      }
      
      if piDays_without_kills > 2
      {
         for i in plCombatants
         {
            Send(i,@ReceiveNestedMail,#nest_list=[4,assgame_mail_disgrace],
                 #from=assgame_roq,#dest_list=[i]);
         }
         
         Send(self,@ResetGame,#report=FALSE);
         
         return;
      }

      piKills = 0;
      ptGame = CreateTimer(self,@GameTimer,piGAME_DAY);
      
      return;
   }

   MaintenanceTimer()
   {
      local i;

      ptMaintenance=CreateTimer(self,@MaintenanceTimer,MAINTENANCE_TIME);
      for i in plCombatants
      {
         if Send(self,@GetDagger,#who=i) = $
         {
            Debug("Combatant got rid of a dagger somehow!");
            
            Send(self,@QuitCombatant,#who=i,#report=Send(self,@InSession),
                 #WinCheck=Send(self,@InSession));
         }
      }
      
      return;
   }

   CleanUp()
   "A stub right now.  Here to put any fixes in we may need later."
   {
      return;
   }

   Delete()
   {
      plMost_kills = $;
      poWinner_lastgame = $;
      plMost_kills_lastgame = $;
      poPrize = $;

      if ptMaintenance <> $
      {
         DeleteTimer(ptMaintenance);
         ptMaintenance = $;
      }
      
      if ptGame <> $
      {
         DeleteTimer(ptGame);
         ptGame = $;
      }
      
      return;
   }

   %%% Enrollment

   NewCombatant(who=$)
   "Check to see if the person is a valid combatant.  "
   "If so, and he's not already on the combatant list, put him on the list.  "
   "Also, put him on the ad list if he's not already, whether or not he's "
   "eligible."
   {
      if who = $
      {
         Debug("Got NULL for who!");
         
         return;
      }
      
      if NOT isClass(who,&user)
      {
         Debug("Can't make non-player a combatant!");

         return;
      }

      Send(self,@AdvertiseTo,#who=who); 
         
      if NOT Send(self,@IsLegalCombatant,#who=who)
      {
         return FALSE;
      }

      if Send(self,@IsCombatant,#who=who)
      {
         return FALSE;
      }

      % put him on the combatant list and give 'em a black dagger.
      plCombatants = Cons(who,plCombatants);
      Send(who,@NewHold,#what=create(&BlackDagger));

      return TRUE;
   }

   QuitCombatant(who=$, WinCheck=TRUE, report=TRUE, kill=FALSE)
   "Removes the player from the combat proceedings.  Also, removes their "
   "dagger.  Also, lets others know that player is gone."
   {
      local i, bFound, oOpponent;

      if who = $
      {
         Debug("Got NULL for who!");

         return FALSE;
      }

      bFound = FALSE;
      for i in plCombatants       
      {                         
         if i = who                        
         {
            Send(self,@CheckForMostKills,#who=who);
            
            if report AND Send(self,@InSession)
            {
               Send(self,@NotifyOpponents,#who=who,
                    #string=assgame_blade_shivers);

               % Okay, if they're offline, let the dagger know so it can
               %  shiver when they log on.
               oOpponent = Send(self,@GetPrimaryOpponent,#who=who);
               
               if NOT Send(oOpponent,@IsLoggedOn)
               { 
                  Send(Send(self,@GetDagger,#who=oOpponent),@AddShiver);
               }

               oOpponent = Send(self,@GetSecondaryOpponent,#who=who);
               if not Send(oOpponent,@IsLoggedOn)
               { 
                  Send(Send(self,@GetDagger,#who=oOpponent),@AddShiver);
               }
            }

            plCombatants = DelListElem(plCombatants,i);
            bFound = TRUE;
            Send(Send(self,@GetDagger,#who=who),@delete);
               
            if wincheck
            {
               Send(self,@CheckForWinner);
            }
         }
      }
         
      if bFound = FALSE
      {
         Debug("NonCombatant called QuitCombatant!");

         return FALSE;
      }

      if kill
      {
         piKills = piKills + 1;
      }

      return TRUE;
   }

   AdvertiseTo(who=$)
   {
      if who = $
      {
         Debug("Got NULL for who!");

         return FALSE;
      }

      if not isClass(who,&user)
      {
         Debug("Can't advertise to non-player!");

         return FALSE;
      }

      if not Send(self,@IsAdvertised,#who=who)
      {
         plAdvertise = Cons(who,plAdvertise);
      }

      return TRUE;
   }

   StopAdvertising(who=$)
   "This player no longer will receive ads from the gamemaster."
   {
      local i, bFound;

      bFound = FALSE;

      if who = $
      {
         Debug("Got NULL for who!");

         return FALSE;
      }

      for i in plAdvertise
      {
         if i = who
         {
            plAdvertise = DelListElem(plAdvertise,i);

            bFound = TRUE;
         }
      }
      
      return bFound;
   }

   RemoveFromGame(who=$, RemoveFromRecords=TRUE)
   "Assume here that we don't know if the person in question was on any list.  "
   "So check before doing anything.  This is normally called by a suicider."
   {
      local i;

      % Remove from ad list
      Send(self,@StopAdvertising,#who=who);        

      % Remove from combatant list
      if Send(self,@IsCombatant,#who=who)          
      {
         Send(self,@QuitCombatant,#who=who);
      }

      if RemoveFromRecords
      {
         if poWinner_lastgame = who
         {
            poWinner_lastgame = $;
         }

         for i in plMost_kills_lastgame
         {
            if i = who
            {
               plMost_kills_lastgame = DelListElem(plMost_kills_lastgame,i);
               
               if Length(plMost_kills_lastgame) = 0
               {
                  piNum_kills_lastgame = 0;
               }   
            }
         }
        
         for i in plMost_kills
         {
            if i = who
            {
               plMost_kills = DelListElem(plMost_kills,i);
               
               if Length(plMost_kills) = 0
               {
                  piNum_kills = 0;
               }   
            }
         }
        
       
         if plMost_kills = who
         {
            plMost_kills = $;
            piNum_kills = 0;
         }
      }

      return;
   }

   %%%  Assassin Game Combat.

   TryAssassinAttack(attacker=$,target=$,dagger_obj=$)
   {
      local bLegal_Opponent;

      if (attacker = $ OR target = $) OR dagger_obj = $
      {
         Debug("TryAssassin attack reached with null attacker,dagger or "
               "target!");
         
         return FALSE;
      }

      if NOT IsClass(attacker,&User)
      {
         Debug("TryAssassinAttack reached with non-user attacker!");

         return FALSE;
      }

      if NOT Send(self,@IsCombatant,#who=attacker)
      {
         Debug("Non-combatant",Send(attacker,@GetName),"got a black dagger!");
         Send(attacker,@MsgSendUser,#message_rsc=assgame_impact);
         
         return FALSE;
      }

      if not Send(self,@InSession)
      {
         Debug("Player ",Send(attacker,@GetName)," attacked when a match "
               "wasn't in session!");
         Send(attacker,@MsgSendUser,#message_rsc=assgame_impact);
         
         if Send(self,@IsCombatant,#who=attacker)
         {
            Send(self,@QuitCombatant,#who=attacker);
         }

         return FALSE;
      }

      % Check for "safe zones".  Currently only the Underworld.
      if not Send(Send(target,@GetOwner),@ReqAssassinGameAttack,#what=attacker)
      {        
         return FALSE;
      }

      bLegal_Opponent = FALSE;
      if IsClass(target,&User)
      {
         bLegal_Opponent = Send(self,@IsLegalOpponent,#who=attacker,
                                #target=target);
      }

      % Okay, at this point, we know we have an attacker attacking a
      %   legal target while a match is on.  Do the math - attacker has
      %   a 50% chance to hit, and must do four hits to kill.
      % Anti-cheapness: no hitting if your opponent is held, blinded or dazzled

      if random(1,100) > ASSASSIN_HIT_CHANCE
         OR Send(target,@IsEnchanted,#byClass=&Hold)
         OR Send(target,@IsEnchanted,#byClass=&Blind)
         OR Send(target,@IsEnchanted,#byClass=&Dazzle)
      {
         Send(dagger_obj,@AssassinMiss,#target=target);
      }
      else
      {
         if bLegal_Opponent
         {
            % Remove invisibility and ShadowForm to make this a bit more of a
            %  fair fight.
            Send(attacker,@RemoveEnchantmentClass,#class=&Invisibility);
            Send(attacker,@RemoveEnchantmentClass,#class=&ShadowForm);
            
            Send(dagger_obj,@AssassinHit,#target=target);
         }
         else
         {
            Send(dagger_obj,@AssassinHitWrongTarget,#target=target);
         }
      }

      return TRUE;
   }

   %%% Game mode utilities.

   ResetGame(report=FALSE)
   "Report is only true if called by a DM call, meaning an artificial restart."
   {
      local i, iValue;

      if report = TRUE
      {
         for i in plCombatants
         {
            Send(i,@ReceiveNestedMail,#nest_list=[4,assgame_mail_reset],
              #from=assgame_roq,#dest_list=[i]);
         }
      }
      
      for i in plCombatants
      {
         Send(self,@QuitCombatant,#who=i,#wincheck=FALSE,#report=FALSE);
      }
      
      pbGame_in_Session = FALSE;
      pbAccept_mode = FALSE;
      plMost_kills = $;
      piNum_kills = 0;
      
      % Okay, at this point, the combatant list should be nil, and no black 
      %  daggers should exist anywhere.
      plCombatants = $;
      Send(&BlackDagger,@CleanUp); 

      % This will almost always be true.
      if ptGame <> $
      {
         DeleteTimer(ptGame);
      }

      iValue = Bound(Random(piGame_Wait_Min,piGame_Wait_Max),1,MAX_INT);
      ptGame = CreateTimer(self,@GameTimer,iValue);
      
      return;
   }

   CheckForWinner()
   {
      local i;

      if Length(plCombatants) > 1
         OR NOT Send(self,@InSession)
      {
         % No winner.
         return FALSE;
      }

      % We have a winner!
      for i in plAdvertise
      {
         if Send(i,@isLoggedOn)
         {
            Send(i,@MsgSendUser,#message_rsc=assgame_winner,
                 #parm1=Send(first(plCombatants),@GetTrueName));
         }
         else
         {
            Send(i,@ReceiveNestedMail,#nest_list=[4,assgame_mail_winner,
                 STRING_RESOURCE,Send(first(plCombatants),@GetTrueName)],
                 #from=assgame_roq,#dest_list=[i]);             
         }
      }
      
      Send(self,@CheckForMostKills,#who=first(plCombatants));

      poWinner_lastgame = first(plCombatants);
      plMost_kills_lastgame = plMost_kills;
      piNum_kills_lastgame = piNum_kills;

      % Award a prize, if there's one set.
      if poPrize <> $
      {
         Send(poWinner_lastgame,@MsgSendUser,#message_rsc=assgame_prize,
              #parm1=Send(poPrize,@GetIndef),#parm2=Send(poPrize,@GetName));
         Send(poWinner_lastgame,@NewHold,#what=poPrize);
         poPrize = $;
      }

      % Reset the game for the next match
      Send(self,@ResetGame);
      
      return TRUE;
   }

   CheckForMostKills(who=$)
   {
      local oDagger;

      if who = $
      {
         Debug("CheckforMostKills called with who = $");

         return;
      }

      oDagger = Send(self,@GetDagger,#who=who);

      if oDagger <> $
      {
         if Send(oDagger,@GetNotches) = piNum_kills
         {
            plMost_kills = Cons(who,plMost_Kills);
         }
         
         if Send(oDagger,@GetNotches) > piNum_kills
         {
            piNum_kills = Send(oDagger,@GetNotches);
            
            plMost_kills = [who];
         }
      }
     
      return;
   }

   CheckForDeadWeight(who=$)
   {
      local oDagger, iTime;    

      if who = $
      {
         Debug("Reached CheckForDeadWeight with who = $!");

         return;
      }

      oDagger = Send(self,@GetDagger,#who=who);
      
      if oDagger = $
      {
         Debug("Combatant doesn't have a dagger!  Kicking him out!");
         Send(self,@QuitCombatant,#who=who);
         
         return;
      }
      
      iTime = Send(oDagger,@GetTimeOnline);      
      if (iTime/piDays) < MINIMUM_TIME_ONLINE
      {
         % If they're online and not hiding, give them a warning, but don't
         %  boot them... yet.
         if Send(oDagger,@HasBeenWarned)
            AND ((NOT Send(who,@IsLoggedOn))
                 OR IsClass(Send(who,@GetOwner),&RentableRoom))
         {
            Send(who,@ReceiveNestedMail,#nest_list=[4,assgame_mail_not_enough],
                 #from=assgame_roq,#dest_list=[who]);
            Send(self,@QuitCombatant,#who=who);
            
            return;            
         }
         else
         {
            % Tell the player to shape up and spend more time online.
            Send(oDagger,@Warn);         
         }
      }
      
      return;
   }

   EnterAcceptMode()
   {
      local i, iValue;
      
      % No daggers should exist right now - none have been given out.
      Send(&BlackDagger,@CleanUp);

      % Delete the timer (necessary if the game was started by an admin)
      if ptGame <> $
      {
         DeleteTimer(ptGame);
         ptGame = $;        
      }
      
      if Send(self,@inSession)
      {
         Debug("Called when a game was in session!  Wrongo!");

         return FALSE;
      }
      
      pbAccept_mode = TRUE;
      for i in plAdvertise
      {
         if Send(i,@IsLoggedOn)
         {
            Send(i,@msgSenduser,#message_rsc=assgame_urge);
         }         
      }

      % Create the timer here, since this may be reached abnormally.
      iValue = Bound(Random(piGame_Accept_Min,piGame_Accept_Max),1,MAX_INT);
      ptGame = CreateTimer(self,@GameTimer,iValue);
      
      return;
   }

   StartGame()
   {
      local i;

      if Send(self,@inSession)
      {
         Debug("Called when a game is already in session!  Wrongo!");

         return FALSE;
      }
      
      if not Send(self,@IsViableGame)
      {
         Send(self,@EnterAcceptMode);

         return;
      }

      % Delete the timer, in case this was called artificially.
      if ptGame <> $
      {
         DeleteTimer(ptGame);
         ptGame = $;
      }
      
      pbAccept_mode = FALSE;
      pbGame_in_Session = TRUE;

      piDays = 0;
      piStartTime = GetTime();

      piKills = 0;
      piDays_without_kills = 0;

      Send(self,@RandomizeCombatants);
      for i in plCombatants
      {
         % Init the dagger's stats
         Send(Send(self,@GetDagger,#who=i),@InitGame);   
         Send(i,@MsgSendUser,#message_rsc=assgame_go);
         Send(i,@WaveSendUser,#wave_rsc=assgame_go_wav);
      }
      
      ptGame = CreateTimer(self,@GameTimer,piGAME_DAY);
      
      return;
   }

   %%%  Utility Functions.

   IsEnabled()
   {
      return pbAssassin_game_enabled;
   }

   InSession()
   {
      return pbGame_in_session;
   }

   IsCombatant(who=$)
   "Returns TRUE if who is in the combatant list."
   {
      local i;

      if who = $
      {
         Debug("Got NULL for who!");

         return FALSE;
      }

      for i in plCombatants
      {
         if i = who
         {
            return TRUE;
         }
      }
      
      return FALSE;
   }

   IsAdvertised(who=$)
   "Returns TRUE if who is in the 'advertise to me' list."
   {
      local i;

      if who = $
      {
         Debug("Got NULL for who!");

         return;
      }

      for i in plAdvertise
      {
         if i = who
         {
            return TRUE;
         }
      }
      
      return FALSE;
   }

   IsLegalCombatant(who=$)
   "If a player is not PKILL_ENABLED, then he is not a legal combatant."
   {
      if who = $
      {
         Debug("Got NULL for who!");

         return FALSE;
      }

      if not isClass(who,&user)
      {
         Debug("Non-players are not valid combatants!");

         return FALSE;
      }

      return Send(who,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE);
   }

   IsLegalOpponent(who=$,target=$)
   "Returns TRUE if Target is the person before or after Who in the "
   "plCombatant list."
   {
      if who = $ OR target = $
      {
         Debug("Reached IsLegalOpponent with who or target equal NIL!");

         return FALSE;
      }

      if Send(self,@GetPrimaryOpponent,#who=who) = target
         OR Send(self,@GetSecondaryOpponent,#who=who) = target
      {
         return TRUE;
      }

      % Neither person before or after attacker is someone attacker should
      %  be attacking.  
      return FALSE;            
   }

   GetPrimaryOpponent(who=$)
   "Dagger uses this procedure to get who is on the blade."
   {
      local count, oOpponent;

      if who = $
      {
         Debug("Reached GetPrimaryOpponent with who equal NIL!");

         return $;
      }

      count = FindListElem(plCombatants,who);

      % This only happens if plCombatants is nil.
      if count = $
      {
         return $;
      }

      if count = 0
      {
         Debug("Trying to find the primary opponent for a non-combatant!");

         return $;
      }

      count = count + 1;
      if count > Length(plCombatants)
      {
         count = 1;
      }

      oOpponent = Nth(plCombatants,count);

      if oOpponent = who
      {
         Debug("Player got self as primary opponent!");

         return $;
      }

      return oOpponent;
   }

   GetSecondaryOpponent(who=$)
   "Dagger uses this procedure to get who is on the blade."
   {
      local count, oOpponent;

      if who=$
      {
         Debug("Reached GetSecondaryOpponent with who equal NIL!");

         return $;
      }

      count = FindListElem(plCombatants,who);

      % This only happens if plCombatants is nil.
      if count = $
      {
         return $;
      }

      if count = 0
      {
         Debug("Trying to find the secondary opponent for a non-combatant!");

         return $;
      }

      count = count - 1;
      if count < 1
      {
         count = Length(plCombatants);
      }

      oOpponent = Nth(plCombatants,count);

      if oOpponent = who
      {
         Debug("Player got self as secondary opponent!");

         return $;
      }

      return oOpponent;
   }


   NotifyOpponents(who=$,string=$)
   {
      local oOpponent;

      if who = $ OR string = $
      {
         Debug("Notify opponents called with who = NIL or string = NIL!"); return;
      }

      oOpponent = Send(self,@GetPrimaryOpponent,#who=who);

      if oOpponent = $
      {
         return;
      }

      Send(oOpponent,@MsgSendUser,#message_rsc=string);

      % Don't give two messages.
      if Length(plCombatants) = 2
      {
         return;
      }   

      oOpponent = Send(self,@GetSecondaryOpponent,#who=who);

      if oOpponent = $
      {
         return;
      }

      Send(oOpponent,@MsgSendUser,#message_rsc=string);     

      return;
   }


   RandomizeCombatants()
   "At the beginning of the match, this is run to put combatants in "
   "random order."
   {
      local new_list, rand;

      new_list = $;

      while plCombatants <> $
      {
         rand = random(1,Length(plCombatants));
         new_list = Cons(Nth(plCombatants,rand),new_list);
         plCombatants = DelListElem(plCombatants,Nth(plCombatants,rand));
      }
      
      plCombatants = new_list;
      
      return;
   }

   GetDagger(who=$)
   {
      local lPassive, i;

      if who = $
      {
         Debug("Can't get Black Dagger if who equals NIL!");
         
         return $;
      }

      lPassive = Send(who,@GetHolderPassive);
      for i in lPassive
      {
         if isClass(i,&BlackDagger)
         {
            return i;
         }
      }
      
      Debug("Target player has no black dagger to get!");
      
      return $;
   }

   GetMostKills()
   {
      return plMost_kills_lastgame;
   }

   GetNumKills()
   {
      return piNum_kills_lastgame;
   }

   GetLastWinner()
   {
      return poWinner_lastgame;
   }

   GetNumCombatants()
   {
      return Length(plCombatants);
   }

   IsViableGame()
   "If the game is viable (i.e. there are enough combatants) start the match."
   {
      if Length(plCombatants) > 1
      {
         return TRUE;
      }

      return FALSE;
   }

   InAcceptMode()
   {
      return pbAccept_mode;
   }

   GetStartTime()
   {
      return piStartTime;
   }

   SetPrize(what=$)
   "Admin supported. Sets a prize for the winner."
   {
      % Only items can be prizes.
      if NOT IsClass(what,&Item)
      {
         return FALSE;
      }
      
      poPrize = what;

      % If prize has a previous owner, take it away.
      Send(what,@NewOwner,#what=$);

      return TRUE;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

