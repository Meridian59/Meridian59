% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This class is the base for the intrigue scenario. It serves to keep all the
% basic knowledge of the intrigue in one central place. It also allows you to
% turn the intrigue on and off mid-play through the pbIntrigue_Enable flag.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Parliament is UtilityFunctions

constants:
   
   include blakston.khd

resources:

   parliament_price_up = "~IYour association with %s gets you the best possible price."
   parliament_dam_up = "~ITechniques learned from %s help your attack do more damage."
   parliament_hit_up = "~ITechniques learned from %s help guide your attack."
   parliament_learn_up = "~IInspired by %s, you take a moment to study your actions for ways to improve."
   parliament_spell_up = "~ITechniques learned from %s give your spells more power."
   parliament_defense_up = "~I%s's techniques help you to defend yourself from harm."
   parliament_regen_up = "~I%s's guidance helps you to recuperate faster."
   parliament_vigor_up = "~I%s's guidance helps you retain some of your vigor."
   
   parliament_price_down = "~IPerhaps if %s were more favored, merchant's prices would be better."
   parliament_dam_down = "~IPerhaps if %s were more favored, you would be shown ways to do more damage."
   parliament_hit_down = "~IIf %s were more favored, you might learn ways to hit more often."
   parliament_learn_down = "~IPerhaps if %s were more favored, you would learn faster."
   parliament_spell_down = "~IIf %s were more favored, your spells would have more power."
   parliament_defense_down = "~IIf %s were more favored, you could defend yourself better."
   parliament_regen_down = "~IPerhaps if %s were more favored, you could recuperate faster."
   parliament_vigor_down = "~IPerhaps if %s were more favored, you use your vigor slower."

   parliament_sell_to_murderer = "I normally don't sell to ~Iyour~n type, but since you are on business from %s I guess I have no choice."

   parliament_Duke_name = "Duke Akardius"
   parliament_Princess_name = "Princess Kateriina"
   parliament_Rebel_name = "Jonas D'Accor"

   % Not used currently
   parliament_nodukeprice_down = "~IPerhaps if you served %s, you would obtain better prices."
   parliament_nodukedam_down = "~IIf you served %s, you might get shown tricks to help you do more damage."
   parliament_noprinhit_down = "~IIf you followed Princess Kateriina, you might get shown tricks to help you hit more often."
   parliament_noprinlearn_down = "~IPerhaps if you followed Princess Kateriina, she would show you how to learn faster."

   neutral_faction_preface="Currently at the Court, the unfactioned %s."
   duke_faction_preface="I've heard that the Duke and his servants now %s."
   princess_faction_preface="Have you heard that lately Princess Kateriina and her followers %s?"
   rebel_faction_preface="The rumors about Jonas say his rebels %s"

   strongly_in_suffix="wield unsurpassable influence with the Meridian Council"
   in_power_suffix="show considerable influence in the decisions of the Meridian Council"
   normal_suffix="are back to normal levels in their influence with the Meridian Council"
   out_power_suffix="just don't seem to have much influence with the Meridian Council"
   strongly_out_suffix="completely lack any influence with the Meridian Council"

   parliament_rumor_number = "Ah, followers of %s are %s"
   parliament_liege_number = "mine"

   parliament_few_number = "few but get much direct instruction."
   parliament_small_number = "small but growing in power."
   parliament_average_number = "an average sized group that is given many advantages."
   parliament_large_number = "large in number but not given much individual attention."
   parliament_huge_number = "an incredibly large and unruly group."

   faction_power_shift = "~IYou sense a shift in the balance of power at the Royal Court."
   faction_shift_wav = kaliorup.wav

   parliament_scandalous_behavior = "There are rumors that someone on the Meridian Council is accepting favors from a faction in exchange for his vote. Oh, scandal!"

   parliament_name = "Parliament Report"

   parliament_info_mail = \
       "Report:\n"
       "Princess members: %i\n"
       "Duke members: %i\n"
       "Rebel members: %i\n"
       "Unfactioned members: %i\n"
       "Total intriguers: %i\n\n"
       "Princess power: %i\n"
       "Duke power: %i\n"
       "Rebel power: %i\n"
       "Unfactioned power: %i\n"
       "-----"

classvars:

properties:

   pbIntrigue_enable 
   pbDeleting = FALSE
   plFactions = $     %This is a list of [ FACTION,[WHO,WHO,WHO,...] ]

   plLieges = $           %This is a list of [ MOB, MOB, .... ]
   plFactionGames = $      % This is a list of the faction game objects.

   piNeutralPower = 0
   piPrincessPower = 0
   piDukePower = 0
   piRebelPower = 0

   piTotalPowerPoints = 0

   pbHiddenSwitch = FALSE

   % This number is the balance factor for the faction scenario.
   % This determines the percent of total points used as the "balance" point.
   % The balance point is where power and number of members equal "normal" benefits.
   % If the members are under this balance, benefits will increase.  If the power
   % is under this number, then befits will decrease.  This works in reverse if numbers
   % are over the balance point.
   % In general, this should reflect the percent each active faction should have.
   % This number shouldn't be set too high, or you will get division by zero errors.
   % 25% for four factions, 33% for three factions (also, if one of four is
   % largely inactive)
   % For the main three factions, this number is used raw.  For the unfactioned, their
   % "balance" is what's left from the other factions, expressed as [100-[3*piBalanceFactor]].
   piBalanceFactor = 25   % The percent factor for the faction balance scenario

   % These numbers are figured every day, count the total number of people involved in factions
   piNumberOfIntriguers = 0
   piNumberOfPrincess = 0
   piNumberOfDuke = 0
   piNumberOfRebel = 0
   piNumberOfNeutral = 0

messages:

   Constructor()
   {
      return;
   }

   NewDay()
   {
      % Every game day, we re-figure our numbers.
      send(self,@CalcIntrigueNumbers);
      return;
   }
      
   SendInfoMail(who=$)
   "Admin supported. Send a summary email of the faction scenario to the given user."
   {
      if who = $
      {
         Debug("SendInfoMail called with bad who.");
         return;
      }

      Send(who,@ReceiveNestedMail,#from=parliament_name,
           #dest_list=[who],#nest_list=[4,parliament_info_mail,
           4,piNumberOfPrincess,4,piNumberOfDuke,4,piNumberOfRebel,4,piNumberOfNeutral,4,piNumberOfIntriguers,
           4,piPrincessPower,4,piDukePower,4,piRebelPower,4,piNeutralPower]);
           
      return;
   }

   GetFactionList()
   {
      return plFactions;
   }

   SetDeleting(value=False)
   {
      local oGame;

      pbDeleting=value;
      for oGame in plFactionGames
      {
         Send(oGame,@SetDeleting,#value=value);
      }

      return;
   }

   DeleteLieges()
   {
      local i;
      
      % Delete the old faction lieges
      if plLieges<>$
      { 
         for i in plLieges { Send(i,@Delete); }
      }
      
      plLieges=$;
      
      return;
   }

   RecreateLieges()
   {
      local i;
      
      % Delete old lieges
      if plLieges <> $
      {
         Send(self,@DeleteLieges);
      }
      
      i = FACTION_MAX;
      while i > FACTION_NEUTRAL
      {
         plLieges=Cons(Create(Send(self,@FactionLiegeClass,#num=i)),plLieges);
         Send(First(plLieges),@GotoHomeroom);
         i = i - 1;
      }
      
      return;
   }

   ClearFactions()
   {  
      local i,j;
      if (plFactions<>$)
      {
         for i in plFactions
         {
            for j in Nth(i,2)
            {
               Send(j,@ResignFaction);
            }
         }
         
         plFactions=$;
      }
      
      return;
   }
      
   InitializeFactions()
   {
      local i;
      
      i = FACTION_MAX;
      while i >= FACTION_NEUTRAL
      {
         plFactions=Cons([i,$],plFactions);
         i = i - 1;
      }
      
      return;
   }

   MoveToFaction(who=$,faction=0)
   {
      local i,j;
      
      for i in plFactions
      {
         for j in Nth(i,2)
         {
            if j = who
            {
               SetNth(i,2,DelListElem(Nth(i,2),j));
            }
         }
      }
      
      if faction>=0
      {
         SetNth(plFactions,faction+1,[faction,Cons(who,Nth(Nth(plFactions,faction+1),2))]);
      }
      
      return;
   }

   DeleteGames()
   {
      local oGame;

      for oGame in plFactionGames
      {
         send(oGame,@Delete);
      }
      
      return;
   }

   Delete()
   {
      pbDeleting = TRUE;
      pbIntrigue_enable = FALSE;
      
      Send(self,@ClearFactions);
      Send(self,@DeleteLieges);
      Send(self,@DeleteGames);
      Send(SYS,@DeleteParliament);
      
      return;
   }

   RecreateNPCs()
   {
      local oGame;
   
      pbDeleting = TRUE;
      Send(self,@DeleteLieges);
      Send(self,@RecreateLieges);
      pbDeleting = FALSE;

      if plFactionGames <> $
      {
         for oGame in plFactionGames
         {
            Send(oGame,@RecreateNPCs);
         }
      }

      return;
   }

   Recreate(initial=False)
   "This is how the intrigue scenario mechanics are started. Initial should "
   "only be set to true if the parliament was previously deleted. "
   "Recreate will re-enable the intrigue if it was previously shutdown."
   {
      local i,oGame,oTerritoryGame,oTokenGame;

      pbIntrigue_enable = TRUE;     
      pbDeleting = TRUE;
      Send(self,@DeleteLieges);

      % Delete our games.  Note, this restarts the games.
      % Then, create and list our FactionGames.  Currently two: Tokens and Territory games.
      if plFactionGames <> $
      {
         for oGame in plFactionGames
         {
            send(oGame,@Delete);
         }
      }
      
      plFactionGames = $;
      Send(SYS,@RecreateTerritoryGame);
      oTerritoryGame = Send(SYS,@GetTerritoryGame);
      Send(SYS,@RecreateTokenGame);
      oTokenGame = Send(SYS,@GetTokenGame);
      
      if not((oTerritoryGame = $) or (oTokenGame = $))
      {
         plFactionGames = Cons(oTokenGame,Cons(oTerritoryGame,[]));
      }
      else
      {
         Debug("Argh!  Territory and/or Token games didn't create right!");
      }
      
      Send(self,@RedoTotalPower);
      Send(self,@RecreateLieges);

      if initial
      {
         Send(self,@InitializeFactions);
      }
      
      Send(Self,@RedoPower);
      pbDeleting=False;

      For i in plLieges
      {
         Send(i,@GotoHomeRoom);
      }

      % Finally, recalculate those intrigue numbers.
      send(self,@CalcIntrigueNumbers);

      return;
   }

   FactionLiegeClass(num=0)
   {
      if num=FACTION_DUKE
      {
         return &DukeLiege;
      }
      
      if num=FACTION_PRINCESS
      {
         return &PrincessLiege;
      }
      
      if num=FACTION_REBEL
      {
         return &RebelLiege;
      }
  
      return $;
   }

   Shutdown()
   {
      local i;
      
      pbIntrigue_enable = FALSE;     
      for i in Send(SYS,@GetUsersLoggedOn)
      {
         Send(i,@PlayerIsIntriguing);
      }
      
      return;
   }

   IsShutdown()
   {
      return (not pbIntrigue_enable);
   }

   RedoTotalPower()
   "Re-figures total power numbers"
   {
      local oGame;
   
      piTotalPowerPoints = 0;
      if plFactionGames <> $
      {
         for oGame in plFactionGames
         {
            piTotalPowerPoints = piTotalPowerPoints + Send(oGame,@GetTotalPoints);
         }
      }
      
      return;
   }

   RedoPower()
   "Re-figures numbers for each faction"
   {
      local i,fact,change,count,power,oGame;
      
      change = FALSE;
      fact = FACTION_NEUTRAL;
      
      while fact<=FACTION_MAX
      {
         count = 0;
         power = 0;
         for oGame in plFactionGames
         {
            count = count + send(oGame,@GetPoints,#faction=fact);
         }
         
         power = send(self,@FigurePowerFromCount,#count=count);
         if power<>Send(self,@GetPower,#faction=fact) {change=True;}
         Send(self,@SetRawPower,#faction=fact,#amount=count);
         fact = fact + 1;
      }

      if change
      {
         Send(self,@UpdateEffects); 
         if not pbDeleting
         {
            for i in Send(SYS,@GetUsersLoggedOn)
            {
               if Send(i,@PlayerisIntriguing)
               {
                  Post(i,@MsgSendUser,#message_rsc=faction_power_shift);
                  post(i,@wavesenduser,#wave_rsc=faction_shift_wav);
               }
            }
            
            send(send(SYS,@GetTerritoryGame),@UpdateFlagsPartialGame);
         }

         % Notify system of faction change, who will notify rooms, who will tell NPCs
         Send(SYS,@FactionChanged,#new_faction=fact);
      }
      
      return;
   }

   FigurePowerFromCount(count=0,bNeutral=FALSE)
   {
      local iBalance;

      % How this works:  We take the power as a function of how many points the faction has
      %                  compared to the balance.  Balance of points bn is described above,
      %                  but boils down to (Total Points * Balance Factor)/100. Since you don't
      %                  gain power past having twice the balance, 2b is max.  Decrement by halves.

      if neutral
      {
         iBalance = (piTotalPowerPoints * (100 - (3 * piBalanceFactor)))/100;
      }
      else
      {      
         iBalance = (piTotalPowerPoints * piBalanceFactor)/100;
      }
   
      if count >= (2 * iBalance)
      {
         return FACTION_STRONGLY_IN;
      }
      
      if count >= (3 * iBalance) / 2
      {
         return FACTION_IN_POWER;
      }
      
      if count >= (iBalance)
      {
         return FACTION_NORMAL;
      }
      
      if count >= (iBalance) / 2
      {
         return FACTION_OUT_POWER;
      }
      
      return FACTION_STRONGLY_OUT;
   }

   UpdateEffects(who=$)
   {
      local power,fact,effect,pers;
      
      if who<>$
      {
         pers=who;
         fact=Send(pers,@GetFaction);
         power=Send(self,@Getpower,#faction=fact);
         if pbDeleting {fact=0;power=0;}
         effect=100*fact+power;
         if (effect=Send(pers,@getFactionEffect)) {return;}
         else
         {
            if (Send(pers,@PlayerIsIntriguing))
            {
               Send(pers,@SetFactionEffect,#effect=effect);
            }
            else
            {
               Send(pers,@SetFactionEffect,#effect=0);
            }
         }
      }
      else
      {
         for pers in Send(SYS,@GetUsersLoggedOn)
         {
            if NOT Send(pers,@PlayerIsIntriguing)
            {
               continue;
            }
            
            fact = Send(pers,@GetFaction);
            power = Send(self,@Getpower,#faction=fact);
            
            if pbDeleting
            {
               fact=0;
               power=0;
            }
            
            effect = 100 * fact + power;
            
            if effect = Send(pers,@GetFactionEffect)
            {
               continue;
            }
            
            else
            {
               if (Send(pers,@PlayerIsIntriguing))
               {
                  Send(pers,@SetFactionEffect,#effect=effect);
               }
               else
               {
                  Send(pers,@SetFactionEffect,#effect=0);
               }
            }
         }
      }
      
      return;
   }

   GetLiege(faction=0)
   {
      if plLieges=$
      {
         return $;
      }
      
      return Nth(plLieges,faction);
   }

   SetRawPower(faction=0,amount=0)
   {
      if faction = FACTION_NEUTRAL
      { 
         piNeutralPower = amount;
      }
      
      if faction = FACTION_DUKE
      {
         piDukePower = amount;
      }
      
      if faction = FACTION_PRINCESS
      {
         piPrincessPower = amount;
      }
      
      if faction = FACTION_REBEL
      {
         piRebelPower = amount;
      }
      
      return;
   }

   GetRawPower(faction=0)
   {
      if faction = FACTION_NEUTRAL
      {
         return piNeutralPower;
      }
      
      if faction = FACTION_DUKE
      {
         return piDukePower;
      }
      
      if faction = FACTION_PRINCESS
      {
         return piPrincessPower;
      }
      
      if faction = FACTION_REBEL
      {
         return piRebelPower;
      }
      
      return 0;
   }

   GetPower(faction=0)
   {
      if faction = FACTION_NEUTRAL
      {
         return Send(self,@FigurePowerFromCount,#count=piNeutralPower,#bNeutral=TRUE);
      }
      
      if faction = FACTION_DUKE 
      {
         return Send(self,@FigurePowerFromCount,#count=piDukePower);
      }
      
      if faction = FACTION_PRINCESS
      {
         return Send(self,@FigurePowerFromCount,#count=piPrincessPower);
      }
      
      if faction = FACTION_REBEL
      {
         return Send(self,@FigurePowerFromCount,#count=piRebelPower);
      }
      
      return 0;
   }

   LiegeDeleted(what=$)
   {
      local i,count;
      
      count = 1;
      if plLieges = $
      {
         return;
      }
      
      for i in plLieges
      {
         if i=what
         {
            if NOT pbDeleting
            {
               debug("Liege was deleted unintentionally. Replacement Created");
               SetNth(plLieges,count,Create(Send(Self,@FactionLiegeClass,#num=count))); 
               Send(Nth(plLieges,count),@GotoHomeroom);
            
               return;
            }
            else
            {
               plLieges=DelListElem(plLieges,i);
               
               return;
            }
         }
         
         count=count+1;
      }
      
      return;
   }

   CourtStateRumor(mob=$,faction=0)
   {
      local iRumor,rnd,power,faction_preface,state_suffix;
      
      if plLieges = $
      {
         return;
      }

      if faction <> 0
      {
         rnd = faction;
      }
      else
      {
         rnd = Random(FACTION_NEUTRAL,FACTION_MAX);
      }

      iRumor = random(1,100);

      % We want to return one rumor about the court....
      % Let's say something about the strength of a faction.
      if iRumor < 60
      {
         power=Send(self,@GetPower,#faction=rnd);
         if random(1,100) <= COURT_STATE_WRONG_CHANCE
         {
            power=random(1,5);
         }

         % Which random faction?
         if rnd = FACTION_NEUTRAL
         {
            faction_preface = neutral_faction_preface;
         }

         if rnd = FACTION_DUKE
         {
            faction_preface = duke_faction_preface;
         }
         
         if rnd = FACTION_PRINCESS
         {
            faction_preface = princess_faction_preface;
         }
         
         if rnd = FACTION_REBEL
         {
            faction_preface = rebel_faction_preface;
         }
         
         % What's their rumored power?
         if power = FACTION_STRONGLY_IN
         {
            state_suffix = strongly_in_suffix;
         }
         
         if power = FACTION_IN_POWER
         {
            state_suffix = in_power_suffix;
         }
         
         if power = FACTION_NORMAL
         {
            state_suffix = normal_suffix;
         }
         
         if power = FACTION_OUT_POWER
         {
            state_suffix = out_power_suffix;
         }
         
         if power = FACTION_STRONGLY_OUT
         {
            state_suffix = strongly_out_suffix;
         }
         
         Post(Send(mob,@GetOwner),@SomeoneSaid,#what=mob,#type=SAY_RESOURCE,
              #string= faction_preface, #parm1 = state_suffix);
              
         return;
      }

      % Lets say something about the membership numbers of a faction.
      if iRumor < 90
      {
         Send(self,@CourtNumberRumor,#mob=mob,#faction=rnd);
         
         return;
      }

      % Add in one extra message just for foreshadowing.
      Post(Send(mob,@GetOwner),@SomeoneSaid,#what=mob,#type=SAY_RESOURCE,
           #string=parliament_scandalous_behavior);

      return;
   }

   GetFactionLiegeName(faction=0)
   {
      if faction = FACTION_DUKE
      {
         return parliament_Duke_name;
      }

      if faction = FACTION_PRINCESS
      {
         return parliament_Princess_name;
      }

      if faction = FACTION_REBEL
      {
         return parliament_Rebel_name;
      }

      return $;
   }

   CourtNumberRumor(mob=$,faction=0)
   {
      local iFact, iNumber, iBalance, rWho, rSuffix;
      
      if plLieges = $
      {
         return;
      }
      
      iFact = faction;

      if iFact <= 0 OR iFact > FACTION_MAX
      {
         iFact = Send(mob,@GetFaction);
      }

      if iFact = FACTION_NEUTRAL
      {
         iFact = random((FACTION_NEUTRAL+1),FACTION_MAX);
      }
      
      if IsClass(mob,&Factions)
      {
         rWho = parliament_liege_number;
         iFact = Send(mob,@GetFaction);
      }
      else
      {
         rWho = send(self,@GetFactionLiegeName,#faction=iFact);
      }

      % How this works:  We take the "number" as a function of how many members the faction has
      %                  compared to the balance.  Balance of points bn is described above,
      %                  but boils down to (Total intriguers * Balance Factor)/100. Since you hit
      %                  bottom past having 3 times the balance, it is max.  Start with two parts
      %                  of b/2, then increment by b.

      iNumber = send(self,@GetFactionNumber,#faction=iFact);
      iBalance = (piNumberofIntriguers * piBalanceFactor) / 100;
      
      if iNumber <= (iBalance / 2)
      {
         rSuffix = parliament_few_number;
      }
      else
      {
         if iNumber <= (iBalance)
         {
            rSuffix = parliament_small_number;
         }
         else
         {
            if iNumber < (2 * iBalance)
            {
               rSuffix = parliament_average_number;
            }
            else
            {
               if iNumber < (3 * iBalance)
               {
                  rSuffix = parliament_large_number;
               }
               else
               {
                  rSuffix = parliament_huge_number;
               }
            }
         }
      }
      
      Post(Send(mob,@GetOwner),@SomeoneSaid,#what=mob,#type=SAY_RESOURCE,
           #string=parliament_rumor_number, #parm1=rWho, #parm2=rSuffix);

      return;
   }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%	Calculation Part for Faction Powers
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   CalcIntrigueNumbers()
   {
      local oPerson, iFaction;

      piNumberOfIntriguers = 0;
      piNumberOfPrincess = 0;
      piNumberOfDuke = 0;
      piNumberOfRebel = 0;
      piNumberOfNeutral = 0;

      for oPerson in Send(SYS,@GetUsers)
      {
         if NOT send(oPerson,@IsUserInactive) AND Send(oPerson,@PlayerIsIntriguing)
         {
            piNumberOfIntriguers = piNumberOfIntriguers + 1;
            iFaction = send(oPerson,@GetFaction);

            if iFaction = FACTION_PRINCESS
            {
               piNumberOfPrincess = piNumberOfPrincess + 1;
            }

            if iFaction = FACTION_DUKE
            {
               piNumberOfDuke = piNumberOfDuke + 1;
            }

            if iFaction = FACTION_REBEL
            {
               piNumberOfRebel = piNumberOfRebel + 1;
            }

            if iFaction = FACTION_NEUTRAL
            {
               piNumberOfNeutral = piNumberOfNeutral + 1;
            }
         }
      }

       return;
   }

   GetFactionNumber(faction=$)
   {
      if faction = FACTION_PRINCESS
      {
         return piNumberOfPrincess;
      }

      if faction = FACTION_DUKE
      {
         return piNumberOfDuke;
      }

      if faction = FACTION_REBEL
      {
         return piNumberOfRebel;
      }

      if faction = FACTION_NEUTRAL
      {
         return piNumberOfNeutral;
      }

      Debug("GetFactionNumber called with a bad faction.");
      
      return 0;
   }

   GetFactionLiege(faction=$)
   {
      if faction = FACTION_PRINCESS
      {
         return parliament_Princess_name;
      }

      if faction = FACTION_DUKE
      {
         return parliament_Duke_name;
      }

      if faction = FACTION_REBEL
      {
         return parliament_Rebel_name;
      }

      Debug("GetFactionLiege called with a bad faction.");

      return 0;
   }      

   CalcFactionBonus(base=0,faction=$)
   {
      local iPower, iMembers, iBalanceFactor, iBalance, iTotal;

      % This function takes a base number and cranks it through a function of both
      % number of power points accumulated and number of members.
      % Equations explained below.  Note: pairs are of form (power, percent), so
      % (b/2, 100) means when power is half of balance, percent is 100.

      iTotal = 0;
      iPower = Send(self,@GetRawPower,#faction=faction);
      iMembers = Send(self,@GetFactionNumber,#faction=faction);

      % Figure the balance factor depending on factioned status.
      if faction = FACTION_NEUTRAL
      {
         iBalanceFactor = 100 - (3 * piBalanceFactor);
      }
      else
      {
         iBalanceFactor = piBalanceFactor;
      }

      % Figure Power's contribution
      iBalance = (piTotalPowerPoints * iBalanceFactor) / 100;
      if iPower <= iBalance
      {
         % Less than balance, a line from (0,-10) to (b,100)
         iPower = ((110 * iPower)/iBalance) - 10;
      }
      else
      {
         % Greater than balance, a line from (b,100) to (2b,150)
         iPower = 100 + ((50 * (iPower - iBalance))/iBalance);
      }
      
      % Bound between -10 and 150% contribution.
      iPower = bound(iPower,-10,150);

      % Figure Membership's contribution
      iBalance = (piNumberOfIntriguers * iBalanceFactor) / 100;
      % If balance is less than 3, we have a tiny number of people.  No penalizing (and no divide by 0 errors!)     
      if (iMembers <= iBalance) or (iBalance < 3)
      {
         % Less than balance, contribute 100%
         iMembers = 100;
      }
      else
      {
         % Greater than balance, a line from (b,100) to (3b,0)
         iMembers = ((-50 * iMembers)/iBalance) + 150;
      }
      
      % Bound between 25 and 100% contribution
      iMembers = bound(iMembers,25,100);

      % So figure the modifier, base times contribution from power and members.
      % Special case: if your power contribution is negative, ignore membership contribution.
      % IE, having lots of members doesn't dull your penalty.
      if iPower > 0
      {
         iTotal = (base * iPower * iMembers) / 10000;
      }
      else
      {
         iTotal = (base * iPower) / 100;
      }

      % If calculating for unfactioned, they only get 25% of the benefits, and are never
      % supposed to receive negative benefits.
      if (faction=FACTION_NEUTRAL)
      {
         iTotal = iTotal / 4;
         iTotal = bound(iTotal,0,$);
      }

      return iTotal;
   }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%	Effects Part for Faction Powers
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   GetFactionSpellPowerBonus(who=$,theSpell=$)
   {
      local iFaction, iBonus, iSchool;

      % Rationale behind the numbers:
      % This number is added right into spellpower.
      % Non-intriguing mortals get a small bonus of 3.
      % Maximum normal power is 10.

      if who = $
      {
         debug("bad who!");
         return FALSE;
      }

      iBonus = 0;

      iFaction = send(who,@GetFaction);
      if theSpell <> $
      {
         iSchool = send(theSpell,@GetSchool);
   
         if (iFaction <> FACTION_NEUTRAL)
            AND ((iFaction = FACTION_REBEL)
                 OR ((iFaction = FACTION_DUKE)
                     AND ((iSchool <> SS_QOR) AND (iSchool <> SS_RIIJA) AND (iSchool <> SS_KRAANAN)))
                 OR ((iFaction = FACTION_PRINCESS)
                     AND ((iSchool <> SS_SHALILLE) AND (iSchool <> SS_FAREN) AND (iSchool <> SS_JALA))))
         {
            return 0;
         }
      }
      else
      {
         debug("GetFactionSpellPowerBonus called with no theSpell.  This better be because of testing!");
      }

      % Player is under 40
      if not Send(who,@PlayerIsIntriguing)
      {
         % A small bonus.
         return 3;
      }			  

      iBonus = Send(self,@CalcFactionBonus,#base=10,#faction=iFaction);

      if Random(0,100) = 0 AND iFaction <> FACTION_NEUTRAL
      {
         if iBonus <= 0
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_spell_down,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
         else
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_spell_up,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
      }

      return iBonus;
   }

  GetFactionPriceBonus(who=$, buying=TRUE)
  {
      local iBonus, iFaction;

      % Rationale behind the numbers:
      % The "bonus" is the percent change in prices.  IE, if buying, you get the bonus
      % subtracted from 100 to get the percent of the price you pay, and vice versa.
      % Princess gets a 5% bonus.

      if who = $
      {
         debug("bad who!");
         return FALSE;
      }

      iFaction = send(who,@GetFaction);
      if (iFaction <> FACTION_PRINCESS)
      {
         return 100;
      }

      iBonus = 5;
	 
      if buying
      {
         iBonus = -iBonus;
      }
      
      if Random(0,100) = 0
      {
         Post(who,@MsgSendUser,#message_rsc=parliament_price_up,
              #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
      }

      return (100 + iBonus);
   }

  GetFactionHitrollBonus(who=$)
  {
      local iBonus, iFaction;

      % Rationale behind the numbers:
      % This number is added right into chance to-hit.
      % Non-intriguing mortals get a small bonus of 50.
      % Maximum normal bonus is 125.

      if who = $
      {
         debug("bad who!");
         return FALSE;
      }

      iBonus = 0;

      iFaction = send(who,@GetFaction);
      if (iFaction = FACTION_PRINCESS) OR (iFaction = FACTION_DUKE)
      {
         return 0;
      }

      % Player is under 40
      if NOT Send(who,@PlayerIsIntriguing)
      {
         return 50;
      }			  
    
      iBonus = Send(self,@CalcFactionBonus,#base=100,#faction=iFaction);

      if Random(0,100) = 0 AND iFaction <> FACTION_NEUTRAL
      {
         if iBonus <= 0
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_hit_down,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
         else
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_hit_up,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
      }
      return iBonus;
   }
 
  GetFactionLearnBonus(who=$,theskill=$)
  {
      local iBonus, iFaction, iSchool;

      % Rationale behind the numbers:
      % This number is added right into initial learn chance.
      % Non-intriguing mortals get a small bonus of 3.
      % Maximum normal power is 10.

      if who = $
      {
         debug("bad who!");
         return FALSE;
      }

      iBonus = 0;
      iFaction = send(who,@GetFaction);

      if theskill <> $
      {
         iSchool = $;
         if isClass(theskill,&Spell)
         {
            iSchool = send(theskill,@GetSchool);
         }
   
         if (iFaction <> FACTION_NEUTRAL)
            AND (((iFaction = FACTION_REBEL) AND (iSchool<>$))
                  OR ((iFaction = FACTION_DUKE) AND ((iSchool <> SS_QOR) AND (iSchool <> SS_RIIJA) AND (iSchool <> SS_KRAANAN)))
                  OR ((iFaction = FACTION_PRINCESS)
                      AND ((iSchool <> SS_SHALILLE) AND (iSchool <> SS_FAREN) AND (iSchool <> SS_JALA))))
         {
            return 0;
         }
      }
      else
      {
         debug("GetFactionLearnBonus called with no theskill.  This better be because of testing!");
      }

      % Player is under 40
      if not Send(who,@PlayerIsIntriguing)
      {
         return 2;
      }			  
 
      iBonus = Send(self,@CalcFactionBonus,#base=10,#faction=iFaction);
      
      if Random(0,100) = 0 AND iFaction <> FACTION_NEUTRAL
      {
         if iBonus <= 0
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_learn_down,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
         else
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_learn_up,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
      }
      
      return iBonus;
   }

   GetFactionDamageBonus(who=$)
   {
      local iFaction;

      % Rationale behind the numbers:
      % This number is added right into damage.
      % Rebel gets a small bonus of 1 point of damage.

      if who = $
      {
         debug("bad who!");
         return FALSE;
      }

      iFaction = send(who,@GetFaction);
      if (iFaction <> FACTION_REBEL)
      {
         return 0;
      }

      if Random(0,100) = 0
      {
         Post(who,@MsgSendUser,#message_rsc=parliament_dam_up,
              #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
      }
      
      return 2;
   }

   GetFactionRegenBonus(who=$, hpregen=TRUE)
   {
      local iBonus, iFaction;

      % Rationale behind the numbers:
      % This number is subtracted from regeneration time (measured in miliseconds).
      % Non-intriguing mortals get a small bonus of 200.
      % Maximum normal power is 700.

      if who = $
      {
         debug("bad who!");
         return FALSE;
      }

      iBonus = 0;

      iFaction = send(who,@GetFaction);
      if (iFaction = FACTION_DUKE)
         OR ((iFaction = FACTION_PRINCESS) AND (hpregen))
         OR ((iFaction = FACTION_REBEL) AND (NOT hpregen))
      {
         return 0;
      }

      % Player is under 40
      if not Send(who,@PlayerIsIntriguing)
      {
         return 200;
      }
    
      iBonus = Send(self,@CalcFactionBonus,#base=700,#faction=iFaction);

      if Random(0,100) = 0 AND iFaction <> FACTION_NEUTRAL
      {
         if iBonus <= 0
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_regen_down,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
         else
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_regen_up,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
      }
      
      return iBonus;
   }

   GetFactionDefenseBonus(who=$)
   {
      local iBonus, iFaction;

      % Rationale behind the numbers:
      % This number is added right into defense.
      % Non-intriguing mortals get a small bonus of 50.
      % Maximum normal power is 200.

      if who = $
      {
         debug("bad who!");
         return FALSE;
      }

      iBonus = 0;

      iFaction = send(who,@GetFaction);
      if (iFaction = FACTION_DUKE) OR (iFaction = FACTION_REBEL)
      {
         return 0;
      }

      % Player is under 40
      if not Send(who,@PlayerIsIntriguing)
      {
         return 50;
      }

      iBonus = Send(self,@CalcFactionBonus,#base=200,#faction=iFaction);

      if Random(0,100) = 0 AND iFaction <> FACTION_NEUTRAL
      {
         if iBonus <= 0
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_defense_down,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
         else
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_defense_up,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
      }

      return iBonus;
   }

   GetFactionVigorBonus(who=$)
   {
      local iBonus, iFaction;

      % Rationale behind the numbers:
      % This number is the percent that all vigor usage (exertion added) is reduced by.
      % Non-intriguing mortals get a small bonus of 5.
      % Maximum normal power is 30.

      if who = $
      {
         debug("bad who!");
         return FALSE;
      }

      iBonus = 0;

      iFaction = send(who,@GetFaction);
      if (iFaction = FACTION_PRINCESS) OR (iFaction = FACTION_REBEL)
      {
         return 0;
      }

      % Player is under 40
      if not Send(who,@PlayerIsIntriguing)
      {
         return 5;
      }

      iBonus = Send(self,@CalcFactionBonus,#base=30,#faction=iFaction);

      if Random(0,100) = 0 AND iFaction <> FACTION_NEUTRAL
      {
         if iBonus <= 0
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_vigor_down,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
         else
         {
            Post(who,@MsgSendUser,#message_rsc=parliament_vigor_up,
                 #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
         }
      }

      return iBonus;
   }

   GetFactionSellToMurderer(who=$,seller=$)
   {
      local iFaction;

      % Rationale (no numbers here!):
      % This allows murderers to buy stuff from "lawful" merchants because of faction pressure.

      if who = $
      {
         debug("bad who!");
         return FALSE;
      }

      iFaction = send(who,@GetFaction);
      if (iFaction <> FACTION_DUKE)
      {
         return FALSE;
      }

      if seller <> $
      {
         send(seller,@Say,#message_rsc=parliament_sell_to_murderer,
              #parm1=Send(self,@GetFactionLiege,#faction=iFaction));
      }
      else
      {
         debug("GetFactionSellToMurderer called with no seller.  This better be because of testing!");
      }

      return TRUE;
   }

   BetaPotionsEnabled()
   {
      return pbHiddenSwitch;
   }


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
