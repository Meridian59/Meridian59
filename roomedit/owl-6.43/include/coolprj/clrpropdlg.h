//----------------------------------------------------------------------------
//  Project Jurasic
//  OWL NExt
//  All rights reserved 1999
//
//  SUBSYSTEM:    Jurasic Application
//  FILE:         EditPropDlg.h
//  AUTHOR:       Yura Bidus
//
//  OVERVIEW
//  ~~~~~~~~
//  Class definition for TEditPropDlg (TPropertyPage).
//  (Generated by OWL 6.0 Class Expert for VC version 1.1)
//----------------------------------------------------------------------------
#if !defined(CLRPROPDLG_H) // Sentry, use file only if it's not already included.
#define CLRPROPDLG_H

#include <owl\propsht.h>
#include <owl\static.h>
#include <owl\combobox.h>
#include <owl\drawitem.h>
#include <owl\functor.h>
#include <owl\commctrl.h>
#include <coolprj/defs.h>

namespace owl {class _OWLCLASS TCheckBox;};
namespace owl {class _OWLCLASS TListBox;};
namespace owl {class _OWLCLASS TConfigFile;};


//
// class TFontSample
// ~~~~~ ~~~~~~~~~~~
//
class _COOLCLASS TFontSample : public owl::TStatic {
  public:
    TFontSample(owl::TWindow*, int resId, owl::TModule *module = 0);
    void    SetupWindow ();
    void    Paint (owl::TDC&, bool, owl::TRect&);
    void    SetTextColor(const owl::TColor& clr);
    void    SetBkColor(const owl::TColor& clr);
  private:
    owl::TColor TextColor;
    owl::TColor BkColor;
};

//
// class TFontDescr
// ~~~~~ ~~~~~~~~~~
//
class _COOLCLASS TFontDescr {
  public:
    TFontDescr();
    TFontDescr(int type, const LOGFONT& lf, int family);

    LPCTSTR          GetName () const    { return lf.lfFaceName; }
    int              GetType () const    { return Type; }
    int              GetFamily () const  { return Family; }
    const LOGFONT&  GetLogFont () const  { return lf; }

    bool  operator<(const TFontDescr&) const;
    bool  operator==(const TFontDescr&) const;
  private:
    int      Type;
    int      Family;
    LOGFONT  lf;
};
//
// TFontList
// ~~~~~~~~~
//
typedef owl::TSortedObjectArray<TFontDescr> TFontList;

//
class _COOLCLASS TODComboBox : public owl::TComboBox {
  public:
    TODComboBox (owl::TWindow* parent, int Id, int nLength, owl::TModule* module = 0)
        : owl::TComboBox (parent, Id, nLength, module) {}
  protected:
    virtual void DrawText(owl::TDC& dc, owl::TRect& rc, DRAWITEMSTRUCT& drawInfo) = 0;
  private:
    void DrawItem(DRAWITEMSTRUCT& drawInfo);
};

//
// class TFontNameList
// ~~~~~ ~~~~~~~~~~~~~
//
class _COOLCLASS TFontNameList : public TODComboBox{
  public:
    TFontNameList (owl::TWindow* parent, int Id, TFontList& fonts, owl::TModule* module = 0);
  protected:
    virtual void DrawText (owl::TDC& dc, owl::TRect& rc, DRAWITEMSTRUCT& drawInfo);

  private:
    TFontList&  Fontlist;
    owl::TBitmap      BmpType;
};

//
// class TColorDrawItem
// ~~~~~ ~~~~~~~~~~~~~~
//
class _COOLCLASS TColorDrawItem: public owl::TButtonTextDrawItem {
  public:
    TColorDrawItem(owl::TDrawItemProxy* proxy, const owl::TColor& color, const owl::tstring& text);
    virtual ~TColorDrawItem(){}

    const owl::TColor& GetColor() const { return Color; }

    virtual void PaintBitmap(owl::TDC& rc, owl::TRect& rect);
    virtual void GetButtonSize(owl::TSize& btnSize);

  protected:
    owl::TColor Color;
};
//
// class TColorList
// ~~~~~ ~~~~~~~~~~
//
class _COOLCLASS TColorList : public owl::TComboBox {
  public:
    TColorList (owl::TWindow* parent, int Id, owl::TModule* module = 0);
    ~TColorList ();
    void AddDefColors();
    void SetupWindow();
    void SetProxy(owl::TDrawItemProxy*  proxy);// must be called before SetupWindow
    void SetColor(const owl::TColor& color, const owl::tstring& text);
  protected:
    owl::TDrawItemProxy*  Proxy;
};

typedef owl::TTypedArray<owl::TColor,owl::TColor,owl::TStandardAllocator> TColorArray;


class _COOLCLASS TEditPropDlg;
//template <class R, class T1,class T2>  class TFunctor2;
// TPCallFunctor is a ptr to a fn taking 2 parameters and returns int
typedef owl::TFunctor2<int,TEditPropDlg*,int> TPSheetFunctor;

#define TPSheet_FUNCTOR(func) TFunctionTranslator2<int,TEditPropDlg*,int,int (*)(TEditPropDlg*,int)>(func)
#define TPSheet_MFUNCTOR(obj,memberFunc) TMemberTranslator2<int,TEditPropDlg*,int, int(obj::*)(TEditPropDlg*,int)>(obj, memberFunc);

/////////////////////////////////////////
//
//{{TPropertyPage = TEditPropDlg}}
//
// struct TEditPropDlgXfer
// ~~~~~~ ~~~~~~~~~~~~~~~~
//
//#include <pshpack1.h>
struct _COOLCLASS TEditPropDlgXfer{
  public:
    enum TCallType{ ctApply=0,ctReset,};

    TEditPropDlgXfer(const TPSheetFunctor& functor);

    void LoadData(owl::TConfigFile* config);
    void SaveData(owl::TConfigFile& config);

//{{TEditPropDlgXFER_DATA}}
    LOGFONT        LogFont;
    TColorArray    ColorText;
    TColorArray    ColorBk;
    owl::TIntArray      ArrayBold;
    owl::TIntArray      ArrayItalic;
    owl::TIntArray      ArrayUnderline;
//{{TEditPropDlgXFER_DATA_END}}

    TPSheetFunctor Callback;//callback

  protected:
    bool           Dirty;   //internal variable
    friend class _COOLCLASS TEditPropDlg;
};
//#include <poppack.h>

//
// class TEditPropDlg
// ~~~~~ ~~~~~~~~~~~~
//
class _COOLCLASS TEditPropDlg: public owl::TPropertyPage {
  typedef owl::TPropertyPage Inherited;
  public:
    TEditPropDlg(owl::TPropertySheet* parent, TEditPropDlgXfer& xfer, owl::TResId iconRes = 0,owl::TModule* module = 0);
    ~TEditPropDlg();


//{{TEditPropDlgVIRTUAL_BEGIN}}
  public:
    void SetupWindow();
//{{TEditPropDlgVIRTUAL_END}}

//{{TEditPropDlgXFER_DEF}}
  protected:
    TFontNameList*  Fontname;
    owl::TComboBox*      Fontsize;
    owl::TListBox*        Category;
    TColorList*      ColorText;
    TColorList*      ColorBk;
    owl::TCheckBox*      Underline;
    owl::TCheckBox*      Italic;
    owl::TCheckBox*      Bold;
    TFontSample*    FontSample;
//{{TEditPropDlgXFER_DEF_END}}

  private:
    int GetSelItem (owl::TComboBox* box);
    void FontSelected (owl::TDC& dc, int index);
    void SinchronizeData();
    void SetClrtext(int index);
    void SetClrbk(int index);
    void SetFontsize();
    void PageChanged();
    void PageUnchanged();

  protected_data:
    TFontList          FontList;
    owl::TFont*            SampleFont;
    owl::TDrawItemProxy*    Proxy;
    TEditPropDlgXfer&  XFer;
    int               CyPixPerInch;
    //TCoolTextBuffer TextBuffer;

//{{TEditPropDlgRSP_TBL_BEGIN}}
  protected:
    void EvFontname();
    void EvFontsize();
    void EvClrtext();
    void EvClrbk();
    void EvCommandEditBold();
    void EvCommandEditItalic();
    void EvCommandEditUnderline();
    void EvSelchangeEditCategory();
    void EvMeasureItem(owl::uint ctrlId, MEASUREITEMSTRUCT far& measureInfo);
    int  Apply(::owl::TPshNotify& notify);
    void Reset(::owl::TPshNotify& notify);
//{{TEditPropDlgRSP_TBL_END}}

  DECLARE_RESPONSE_TABLE(TEditPropDlg);
}; //{{TEditPropDlg}}


#endif  // CLRPROPDLG_H sentry.
