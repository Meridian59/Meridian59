//----------------------------------------------------------------------------
//  Project ced
//  OWL NExt
//  Copyright 2000. All Rights reserved.
//
//  SUBSYSTEM:    ced Application
//  FILE:         hexdocument.h
//  AUTHOR:       Yura
//
//  OVERVIEW
//  ~~~~~~~~
//  Source file for implementation of THexDocument (TDocument).
//  (Generated by OWL 6.x Class Expert for MS VC++, Version 1.5)
//----------------------------------------------------------------------------
#include <coolprj/pch.h>
#pragma hdrstop

#include <owl/file.h>

#include <coolprj/hexdocument.h>

using namespace owl;
using namespace std;

//#include "resource.h"    // Definition of all resources.


//{{THexDocument Implementation}}


//-----------------------------------------------------------------------------
// THexDocument Constructor
//
THexDocument::THexDocument(TDocument* parent)
:
  TDocument(parent)
{
  // INSERT>> Your constructor code here.
}
//-----------------------------------------------------------------------------
// THexDocument Destructor
//
THexDocument::~THexDocument()
{
  // INSERT>> Your destructor code here.
}
//-----------------------------------------------------------------------------
bool THexDocument::Open(int mode, LPCTSTR path)
{
  TWaitCursor w;
  // Call base class function.
  if(!TDocument::Open(mode,path))
    return false;

  TFile file(GetDocPath());
  if(!file.IsOpen())
    return false;

  if(!GetHexBuffer().Load(file)){
    PostError(IDS_GDIFILEREADFAIL);
    return false;
  }

  NotifyViews(vnDocOpened, mode);
  return true;
}
//-----------------------------------------------------------------------------
bool THexDocument::IsDirty()
{
  // Call base class function.
  return TDocument::IsDirty() || GetHexBuffer().IsDirty();
}
//-----------------------------------------------------------------------------
bool THexDocument::Commit(bool force)
{
  // Call base class function.
  TWaitCursor w;
  // Call base class function.
  if(!TDocument::Commit(force))
    return false;

  if(force || IsDirty()){
    TFile file(GetDocPath(), TFile::WriteOnly|TFile::CreateAlways);
    if(!file.IsOpen())
      return false;
    return GetHexBuffer().Save(file);
  }
  return true;
}
//-----------------------------------------------------------------------------
bool THexDocument::Revert(bool clear)
{
  TWaitCursor w;
  if(!TDocument::Revert(clear))
    return false;

  TFile file(GetDocPath());
  if(!file.IsOpen())
    return false;

  if(!GetHexBuffer().Load(file)){
    PostError(IDS_GDIFILEREADFAIL);
    return false;
  }
  return true;
}
//-----------------------------------------------------------------------------
